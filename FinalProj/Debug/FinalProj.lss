
FinalProj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00001b6e  00001c02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001df  008001a0  008001a0  00001ca2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ca2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002222  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2b  00000000  00000000  0000407a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc9  00000000  00000000  00004ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00005e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000762  00000000  00000000  000062fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017fc  00000000  00000000  00006a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000825a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_1>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__vector_19>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ee e6       	ldi	r30, 0x6E	; 110
      c8:	fb e1       	ldi	r31, 0x1B	; 27
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a0 3a       	cpi	r26, 0xA0	; 160
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	23 e0       	ldi	r18, 0x03	; 3
      d8:	a0 ea       	ldi	r26, 0xA0	; 160
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	af 37       	cpi	r26, 0x7F	; 127
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 82 06 	call	0xd04	; 0xd04 <main>
      ea:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <SPI_LEDtransmit>:
			store_LED(LEDSTRIP, i, Brightness, 0, 0, 0);	// Clears LED[i]
		}
	}

	LED_Display(LEDSTRIP, NUM_LEDS);
}
      f2:	8e bd       	out	0x2e, r24	; 46
      f4:	0d b4       	in	r0, 0x2d	; 45
      f6:	07 fe       	sbrs	r0, 7
      f8:	fd cf       	rjmp	.-6      	; 0xf4 <SPI_LEDtransmit+0x2>
      fa:	08 95       	ret

000000fc <strip_init>:
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	0e c0       	rjmp	.+28     	; 0x11e <strip_init+0x22>
     102:	fc 01       	movw	r30, r24
     104:	e2 0f       	add	r30, r18
     106:	f3 1f       	adc	r31, r19
     108:	10 82       	st	Z, r1
     10a:	14 ae       	std	Z+60, r1	; 0x3c
     10c:	df 01       	movw	r26, r30
     10e:	a8 58       	subi	r26, 0x88	; 136
     110:	bf 4f       	sbci	r27, 0xFF	; 255
     112:	1c 92       	st	X, r1
     114:	ec 54       	subi	r30, 0x4C	; 76
     116:	ff 4f       	sbci	r31, 0xFF	; 255
     118:	10 82       	st	Z, r1
     11a:	2f 5f       	subi	r18, 0xFF	; 255
     11c:	3f 4f       	sbci	r19, 0xFF	; 255
     11e:	26 17       	cp	r18, r22
     120:	37 07       	cpc	r19, r23
     122:	7c f3       	brlt	.-34     	; 0x102 <strip_init+0x6>
     124:	08 95       	ret

00000126 <LED_StartSignal>:
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     13e:	08 95       	ret

00000140 <LED_EndSignal>:
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     146:	8f ef       	ldi	r24, 0xFF	; 255
     148:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     158:	08 95       	ret

0000015a <LED_ByteSend>:
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	c6 2f       	mov	r28, r22
     162:	d4 2f       	mov	r29, r20
     164:	12 2f       	mov	r17, r18
     166:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     16a:	81 2f       	mov	r24, r17
     16c:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     170:	8d 2f       	mov	r24, r29
     172:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     176:	8c 2f       	mov	r24, r28
     178:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	1f 91       	pop	r17
     182:	08 95       	ret

00000184 <StripCLR>:
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	ec 01       	movw	r28, r24
     18e:	8b 01       	movw	r16, r22
     190:	0e 94 93 00 	call	0x126	; 0x126 <LED_StartSignal>
     194:	b8 01       	movw	r22, r16
     196:	ce 01       	movw	r24, r28
     198:	0e 94 7e 00 	call	0xfc	; 0xfc <strip_init>
     19c:	c0 e0       	ldi	r28, 0x00	; 0
     19e:	d0 e0       	ldi	r29, 0x00	; 0
     1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <StripCLR+0x2c>
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_ByteSend>
     1ae:	21 96       	adiw	r28, 0x01	; 1
     1b0:	c0 17       	cp	r28, r16
     1b2:	d1 07       	cpc	r29, r17
     1b4:	b4 f3       	brlt	.-20     	; 0x1a2 <StripCLR+0x1e>
     1b6:	0e 94 a0 00 	call	0x140	; 0x140 <LED_EndSignal>
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	1f 91       	pop	r17
     1c0:	0f 91       	pop	r16
     1c2:	08 95       	ret

000001c4 <store_LED>:
     1c4:	ef 92       	push	r14
     1c6:	0f 93       	push	r16
     1c8:	6c 33       	cpi	r22, 0x3C	; 60
     1ca:	71 05       	cpc	r23, r1
     1cc:	68 f4       	brcc	.+26     	; 0x1e8 <store_LED+0x24>
     1ce:	fc 01       	movw	r30, r24
     1d0:	e6 0f       	add	r30, r22
     1d2:	f7 1f       	adc	r31, r23
     1d4:	40 83       	st	Z, r20
     1d6:	24 af       	std	Z+60, r18	; 0x3c
     1d8:	df 01       	movw	r26, r30
     1da:	a8 58       	subi	r26, 0x88	; 136
     1dc:	bf 4f       	sbci	r27, 0xFF	; 255
     1de:	0c 93       	st	X, r16
     1e0:	ec 54       	subi	r30, 0x4C	; 76
     1e2:	ff 4f       	sbci	r31, 0xFF	; 255
     1e4:	e0 82       	st	Z, r14
     1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <store_LED+0x2c>
     1e8:	84 e2       	ldi	r24, 0x24	; 36
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <puts>
     1f0:	0f 91       	pop	r16
     1f2:	ef 90       	pop	r14
     1f4:	08 95       	ret

000001f6 <LED_Display>:
     1f6:	cf 92       	push	r12
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	8c 01       	movw	r16, r24
     208:	7b 01       	movw	r14, r22
     20a:	0e 94 93 00 	call	0x126	; 0x126 <LED_StartSignal>
     20e:	c0 e0       	ldi	r28, 0x00	; 0
     210:	d0 e0       	ldi	r29, 0x00	; 0
     212:	c1 2c       	mov	r12, r1
     214:	d1 2c       	mov	r13, r1
     216:	21 c0       	rjmp	.+66     	; 0x25a <LED_Display+0x64>
     218:	f8 01       	movw	r30, r16
     21a:	ec 0f       	add	r30, r28
     21c:	fd 1f       	adc	r31, r29
     21e:	80 81       	ld	r24, Z
     220:	88 23       	and	r24, r24
     222:	a1 f0       	breq	.+40     	; 0x24c <LED_Display+0x56>
     224:	f8 01       	movw	r30, r16
     226:	ec 0f       	add	r30, r28
     228:	fd 1f       	adc	r31, r29
     22a:	9f 01       	movw	r18, r30
     22c:	2c 54       	subi	r18, 0x4C	; 76
     22e:	3f 4f       	sbci	r19, 0xFF	; 255
     230:	af 01       	movw	r20, r30
     232:	48 58       	subi	r20, 0x88	; 136
     234:	5f 4f       	sbci	r21, 0xFF	; 255
     236:	d9 01       	movw	r26, r18
     238:	2c 91       	ld	r18, X
     23a:	da 01       	movw	r26, r20
     23c:	4c 91       	ld	r20, X
     23e:	64 ad       	ldd	r22, Z+60	; 0x3c
     240:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_ByteSend>
     244:	cc 24       	eor	r12, r12
     246:	c3 94       	inc	r12
     248:	d1 2c       	mov	r13, r1
     24a:	06 c0       	rjmp	.+12     	; 0x258 <LED_Display+0x62>
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_ByteSend>
     258:	21 96       	adiw	r28, 0x01	; 1
     25a:	ce 15       	cp	r28, r14
     25c:	df 05       	cpc	r29, r15
     25e:	e4 f2       	brlt	.-72     	; 0x218 <LED_Display+0x22>
     260:	cd 28       	or	r12, r13
     262:	11 f0       	breq	.+4      	; 0x268 <LED_Display+0x72>
     264:	0e 94 a0 00 	call	0x140	; 0x140 <LED_EndSignal>
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	1f 91       	pop	r17
     26e:	0f 91       	pop	r16
     270:	ff 90       	pop	r15
     272:	ef 90       	pop	r14
     274:	df 90       	pop	r13
     276:	cf 90       	pop	r12
     278:	08 95       	ret

0000027a <rand_Pixel>:
     27a:	0e 94 00 0a 	call	0x1400	; 0x1400 <rand>
     27e:	90 78       	andi	r25, 0x80	; 128
     280:	99 23       	and	r25, r25
     282:	1c f4       	brge	.+6      	; 0x28a <rand_Pixel+0x10>
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	9f 6f       	ori	r25, 0xFF	; 255
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	08 95       	ret

0000028c <LED_Bounce_Pattern>:
	uint8_t Pixel = rand() % (0xFF + 1);
	return Pixel;
}

// Creates Bouncing pattern between st and en (LED index 0 -> (NUM_LEDS - 1)). s-len::Snake Length
void LED_Bounce_Pattern(strip* LEDSTRIP, int st, int en, int s_len, int strip_len) {
     28c:	2f 92       	push	r2
     28e:	3f 92       	push	r3
     290:	4f 92       	push	r4
     292:	5f 92       	push	r5
     294:	6f 92       	push	r6
     296:	7f 92       	push	r7
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	00 d0       	rcall	.+0      	; 0x2b2 <LED_Bounce_Pattern+0x26>
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <LED_Bounce_Pattern+0x28>
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	2c 01       	movw	r4, r24
     2bc:	5b 01       	movw	r10, r22
     2be:	4a 01       	movw	r8, r20
     2c0:	69 01       	movw	r12, r18
     2c2:	1b 83       	std	Y+3, r17	; 0x03
     2c4:	0a 83       	std	Y+2, r16	; 0x02
	uint8_t Brightness = 0xFF;
	uint8_t R = rand_Pixel();
     2c6:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     2ca:	89 83       	std	Y+1, r24	; 0x01
	uint8_t G = rand_Pixel();
     2cc:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     2d0:	f8 2e       	mov	r15, r24
	uint8_t B = rand_Pixel();
     2d2:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     2d6:	18 2f       	mov	r17, r24
	int path_len = en - st;
     2d8:	14 01       	movw	r2, r8
     2da:	2a 18       	sub	r2, r10
     2dc:	3b 08       	sbc	r3, r11
	int delay = 10;
	// Get snake moving forward
	for (int i = 0; i < path_len; i++) {
     2de:	61 2c       	mov	r6, r1
     2e0:	71 2c       	mov	r7, r1
     2e2:	40 c0       	rjmp	.+128    	; 0x364 <LED_Bounce_Pattern+0xd8>
		if (cancelpattern) return;
     2e4:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <cancelpattern>
     2e8:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <cancelpattern+0x1>
     2ec:	89 2b       	or	r24, r25
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <LED_Bounce_Pattern+0x66>
     2f0:	8b c0       	rjmp	.+278    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     2f2:	1d 82       	std	Y+5, r1	; 0x05
     2f4:	1c 82       	std	Y+4, r1	; 0x04
     2f6:	15 c0       	rjmp	.+42     	; 0x322 <LED_Bounce_Pattern+0x96>
		// Populating Snake
		for (int j = 0; j < s_len; j++) {
			if ((j+i+st) <= en) {
     2f8:	6c 81       	ldd	r22, Y+4	; 0x04
     2fa:	7d 81       	ldd	r23, Y+5	; 0x05
     2fc:	66 0d       	add	r22, r6
     2fe:	77 1d       	adc	r23, r7
     300:	6a 0d       	add	r22, r10
     302:	7b 1d       	adc	r23, r11
     304:	86 16       	cp	r8, r22
     306:	97 06       	cpc	r9, r23
     308:	3c f0       	brlt	.+14     	; 0x318 <LED_Bounce_Pattern+0x8c>
				store_LED(LEDSTRIP, i+j+st, Brightness, R, G, B);	// Start at st and goes to that en
     30a:	e1 2e       	mov	r14, r17
     30c:	0f 2d       	mov	r16, r15
     30e:	29 81       	ldd	r18, Y+1	; 0x01
     310:	4f ef       	ldi	r20, 0xFF	; 255
     312:	c2 01       	movw	r24, r4
     314:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
	int delay = 10;
	// Get snake moving forward
	for (int i = 0; i < path_len; i++) {
		if (cancelpattern) return;
		// Populating Snake
		for (int j = 0; j < s_len; j++) {
     318:	8c 81       	ldd	r24, Y+4	; 0x04
     31a:	9d 81       	ldd	r25, Y+5	; 0x05
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	9d 83       	std	Y+5, r25	; 0x05
     320:	8c 83       	std	Y+4, r24	; 0x04
     322:	8c 81       	ldd	r24, Y+4	; 0x04
     324:	9d 81       	ldd	r25, Y+5	; 0x05
     326:	8c 15       	cp	r24, r12
     328:	9d 05       	cpc	r25, r13
     32a:	34 f3       	brlt	.-52     	; 0x2f8 <LED_Bounce_Pattern+0x6c>
			if ((j+i+st) <= en) {
				store_LED(LEDSTRIP, i+j+st, Brightness, R, G, B);	// Start at st and goes to that en
			}
		}
		LED_Display(LEDSTRIP, strip_len);
     32c:	6a 81       	ldd	r22, Y+2	; 0x02
     32e:	7b 81       	ldd	r23, Y+3	; 0x03
     330:	c2 01       	movw	r24, r4
     332:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     336:	80 e4       	ldi	r24, 0x40	; 64
     338:	9c e9       	ldi	r25, 0x9C	; 156
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <LED_Bounce_Pattern+0xae>
		_delay_ms(delay);
		// End of Snake
		if ((i + st) <= (en - s_len)) {
     33e:	b3 01       	movw	r22, r6
     340:	6a 0d       	add	r22, r10
     342:	7b 1d       	adc	r23, r11
     344:	c4 01       	movw	r24, r8
     346:	8c 19       	sub	r24, r12
     348:	9d 09       	sbc	r25, r13
     34a:	86 17       	cp	r24, r22
     34c:	97 07       	cpc	r25, r23
     34e:	3c f0       	brlt	.+14     	; 0x35e <LED_Bounce_Pattern+0xd2>
			store_LED(LEDSTRIP, i+st, Brightness, 0, 0, 0);
     350:	e1 2c       	mov	r14, r1
     352:	00 e0       	ldi	r16, 0x00	; 0
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	4f ef       	ldi	r20, 0xFF	; 255
     358:	c2 01       	movw	r24, r4
     35a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
	uint8_t G = rand_Pixel();
	uint8_t B = rand_Pixel();
	int path_len = en - st;
	int delay = 10;
	// Get snake moving forward
	for (int i = 0; i < path_len; i++) {
     35e:	9f ef       	ldi	r25, 0xFF	; 255
     360:	69 1a       	sub	r6, r25
     362:	79 0a       	sbc	r7, r25
     364:	62 14       	cp	r6, r2
     366:	73 04       	cpc	r7, r3
     368:	0c f4       	brge	.+2      	; 0x36c <LED_Bounce_Pattern+0xe0>
     36a:	bc cf       	rjmp	.-136    	; 0x2e4 <LED_Bounce_Pattern+0x58>
     36c:	61 2c       	mov	r6, r1
     36e:	71 2c       	mov	r7, r1
     370:	43 c0       	rjmp	.+134    	; 0x3f8 <LED_Bounce_Pattern+0x16c>
			store_LED(LEDSTRIP, i+st, Brightness, 0, 0, 0);
		}
	}
	// Get snake moving backward
	for (int i = 0; (-1)*i < path_len; i--) {
		if (cancelpattern) return;
     372:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <cancelpattern>
     376:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <cancelpattern+0x1>
     37a:	89 2b       	or	r24, r25
     37c:	09 f0       	breq	.+2      	; 0x380 <LED_Bounce_Pattern+0xf4>
     37e:	44 c0       	rjmp	.+136    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     380:	1d 82       	std	Y+5, r1	; 0x05
     382:	1c 82       	std	Y+4, r1	; 0x04
     384:	15 c0       	rjmp	.+42     	; 0x3b0 <LED_Bounce_Pattern+0x124>
		// Populating Snake
		for (int j = 0; (-1)*j < s_len; j--) {
			if (i+j+en >= st) {
     386:	6c 81       	ldd	r22, Y+4	; 0x04
     388:	7d 81       	ldd	r23, Y+5	; 0x05
     38a:	66 0d       	add	r22, r6
     38c:	77 1d       	adc	r23, r7
     38e:	68 0d       	add	r22, r8
     390:	79 1d       	adc	r23, r9
     392:	6a 15       	cp	r22, r10
     394:	7b 05       	cpc	r23, r11
     396:	3c f0       	brlt	.+14     	; 0x3a6 <LED_Bounce_Pattern+0x11a>
				store_LED(LEDSTRIP, i+j+en, Brightness, R, G, B);	// Start at en and goes to that st
     398:	e1 2e       	mov	r14, r17
     39a:	0f 2d       	mov	r16, r15
     39c:	29 81       	ldd	r18, Y+1	; 0x01
     39e:	4f ef       	ldi	r20, 0xFF	; 255
     3a0:	c2 01       	movw	r24, r4
     3a2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
	}
	// Get snake moving backward
	for (int i = 0; (-1)*i < path_len; i--) {
		if (cancelpattern) return;
		// Populating Snake
		for (int j = 0; (-1)*j < s_len; j--) {
     3a6:	8c 81       	ldd	r24, Y+4	; 0x04
     3a8:	9d 81       	ldd	r25, Y+5	; 0x05
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	9d 83       	std	Y+5, r25	; 0x05
     3ae:	8c 83       	std	Y+4, r24	; 0x04
     3b0:	8c 81       	ldd	r24, Y+4	; 0x04
     3b2:	9d 81       	ldd	r25, Y+5	; 0x05
     3b4:	91 95       	neg	r25
     3b6:	81 95       	neg	r24
     3b8:	91 09       	sbc	r25, r1
     3ba:	8c 15       	cp	r24, r12
     3bc:	9d 05       	cpc	r25, r13
     3be:	1c f3       	brlt	.-58     	; 0x386 <LED_Bounce_Pattern+0xfa>
			if (i+j+en >= st) {
				store_LED(LEDSTRIP, i+j+en, Brightness, R, G, B);	// Start at en and goes to that st
			}
		}
		LED_Display(LEDSTRIP, strip_len);
     3c0:	6a 81       	ldd	r22, Y+2	; 0x02
     3c2:	7b 81       	ldd	r23, Y+3	; 0x03
     3c4:	c2 01       	movw	r24, r4
     3c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
     3ca:	80 e4       	ldi	r24, 0x40	; 64
     3cc:	9c e9       	ldi	r25, 0x9C	; 156
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <LED_Bounce_Pattern+0x142>
		_delay_ms(delay);
		// End of Snake
		if ((i + en) >= (st + s_len)) {
     3d2:	b3 01       	movw	r22, r6
     3d4:	68 0d       	add	r22, r8
     3d6:	79 1d       	adc	r23, r9
     3d8:	c5 01       	movw	r24, r10
     3da:	8c 0d       	add	r24, r12
     3dc:	9d 1d       	adc	r25, r13
     3de:	68 17       	cp	r22, r24
     3e0:	79 07       	cpc	r23, r25
     3e2:	3c f0       	brlt	.+14     	; 0x3f2 <LED_Bounce_Pattern+0x166>
			store_LED(LEDSTRIP, i+en, Brightness, 0, 0, 0);
     3e4:	e1 2c       	mov	r14, r1
     3e6:	00 e0       	ldi	r16, 0x00	; 0
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	4f ef       	ldi	r20, 0xFF	; 255
     3ec:	c2 01       	movw	r24, r4
     3ee:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		if ((i + st) <= (en - s_len)) {
			store_LED(LEDSTRIP, i+st, Brightness, 0, 0, 0);
		}
	}
	// Get snake moving backward
	for (int i = 0; (-1)*i < path_len; i--) {
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	69 1a       	sub	r6, r25
     3f6:	71 08       	sbc	r7, r1
     3f8:	88 27       	eor	r24, r24
     3fa:	99 27       	eor	r25, r25
     3fc:	86 19       	sub	r24, r6
     3fe:	97 09       	sbc	r25, r7
     400:	82 15       	cp	r24, r2
     402:	93 05       	cpc	r25, r3
     404:	0c f4       	brge	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     406:	b5 cf       	rjmp	.-150    	; 0x372 <LED_Bounce_Pattern+0xe6>
		if ((i + en) >= (st + s_len)) {
			store_LED(LEDSTRIP, i+en, Brightness, 0, 0, 0);
		}
	}
	
}
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	bf 90       	pop	r11
     424:	af 90       	pop	r10
     426:	9f 90       	pop	r9
     428:	8f 90       	pop	r8
     42a:	7f 90       	pop	r7
     42c:	6f 90       	pop	r6
     42e:	5f 90       	pop	r5
     430:	4f 90       	pop	r4
     432:	3f 90       	pop	r3
     434:	2f 90       	pop	r2
     436:	08 95       	ret

00000438 <LED_Rand_Pattern>:

// Creates Completely Random Pattern on LEDSTRIP
void LED_Rand_Pattern(strip* LEDSTRIP, int strip_len, int delay) {
     438:	8f 92       	push	r8
     43a:	9f 92       	push	r9
     43c:	af 92       	push	r10
     43e:	bf 92       	push	r11
     440:	cf 92       	push	r12
     442:	df 92       	push	r13
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	6c 01       	movw	r12, r24
     452:	7b 01       	movw	r14, r22
     454:	5a 01       	movw	r10, r20
	for (int i = 0; i < strip_len; i++) {
     456:	00 e0       	ldi	r16, 0x00	; 0
     458:	10 e0       	ldi	r17, 0x00	; 0
     45a:	16 c0       	rjmp	.+44     	; 0x488 <LED_Rand_Pattern+0x50>
		LEDSTRIP->Brightness[i] = rand_Pixel();
     45c:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     460:	e6 01       	movw	r28, r12
     462:	c0 0f       	add	r28, r16
     464:	d1 1f       	adc	r29, r17
     466:	88 83       	st	Y, r24
		LEDSTRIP->R[i]			= rand_Pixel();
     468:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     46c:	8c af       	std	Y+60, r24	; 0x3c
		LEDSTRIP->G[i]			= rand_Pixel();
     46e:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     472:	fe 01       	movw	r30, r28
     474:	e8 58       	subi	r30, 0x88	; 136
     476:	ff 4f       	sbci	r31, 0xFF	; 255
     478:	80 83       	st	Z, r24
		LEDSTRIP->B[i]			= rand_Pixel();
     47a:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     47e:	cc 54       	subi	r28, 0x4C	; 76
     480:	df 4f       	sbci	r29, 0xFF	; 255
     482:	88 83       	st	Y, r24
	
}

// Creates Completely Random Pattern on LEDSTRIP
void LED_Rand_Pattern(strip* LEDSTRIP, int strip_len, int delay) {
	for (int i = 0; i < strip_len; i++) {
     484:	0f 5f       	subi	r16, 0xFF	; 255
     486:	1f 4f       	sbci	r17, 0xFF	; 255
     488:	0e 15       	cp	r16, r14
     48a:	1f 05       	cpc	r17, r15
     48c:	3c f3       	brlt	.-50     	; 0x45c <LED_Rand_Pattern+0x24>
		LEDSTRIP->Brightness[i] = rand_Pixel();
		LEDSTRIP->R[i]			= rand_Pixel();
		LEDSTRIP->G[i]			= rand_Pixel();
		LEDSTRIP->B[i]			= rand_Pixel();
	}
	LED_Display(LEDSTRIP, strip_len);
     48e:	b7 01       	movw	r22, r14
     490:	c6 01       	movw	r24, r12
     492:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
	_delay_ms(delay);
     496:	b5 01       	movw	r22, r10
     498:	bb 0c       	add	r11, r11
     49a:	88 0b       	sbc	r24, r24
     49c:	99 0b       	sbc	r25, r25
     49e:	0e 94 92 08 	call	0x1124	; 0x1124 <__floatsisf>
     4a2:	4b 01       	movw	r8, r22
     4a4:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	4a e7       	ldi	r20, 0x7A	; 122
     4ac:	55 e4       	ldi	r21, 0x45	; 69
     4ae:	0e 94 1f 09 	call	0x123e	; 0x123e <__mulsf3>
     4b2:	6b 01       	movw	r12, r22
     4b4:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e8       	ldi	r20, 0x80	; 128
     4bc:	5f e3       	ldi	r21, 0x3F	; 63
     4be:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__cmpsf2>
     4c2:	88 23       	and	r24, r24
     4c4:	24 f1       	brlt	.+72     	; 0x50e <LED_Rand_Pattern+0xd6>
		__ticks = 1;
	else if (__tmp > 65535)
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	3f ef       	ldi	r19, 0xFF	; 255
     4ca:	4f e7       	ldi	r20, 0x7F	; 127
     4cc:	57 e4       	ldi	r21, 0x47	; 71
     4ce:	c7 01       	movw	r24, r14
     4d0:	b6 01       	movw	r22, r12
     4d2:	0e 94 1a 09 	call	0x1234	; 0x1234 <__gesf2>
     4d6:	18 16       	cp	r1, r24
     4d8:	ac f4       	brge	.+42     	; 0x504 <LED_Rand_Pattern+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	40 e2       	ldi	r20, 0x20	; 32
     4e0:	51 e4       	ldi	r21, 0x41	; 65
     4e2:	c5 01       	movw	r24, r10
     4e4:	b4 01       	movw	r22, r8
     4e6:	0e 94 1f 09 	call	0x123e	; 0x123e <__mulsf3>
     4ea:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__fixunssfsi>
     4ee:	06 c0       	rjmp	.+12     	; 0x4fc <LED_Rand_Pattern+0xc4>
     4f0:	80 e9       	ldi	r24, 0x90	; 144
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LED_Rand_Pattern+0xbc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f8:	61 50       	subi	r22, 0x01	; 1
     4fa:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4fc:	61 15       	cp	r22, r1
     4fe:	71 05       	cpc	r23, r1
     500:	b9 f7       	brne	.-18     	; 0x4f0 <LED_Rand_Pattern+0xb8>
     502:	0a c0       	rjmp	.+20     	; 0x518 <LED_Rand_Pattern+0xe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     504:	c7 01       	movw	r24, r14
     506:	b6 01       	movw	r22, r12
     508:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__fixunssfsi>
     50c:	02 c0       	rjmp	.+4      	; 0x512 <LED_Rand_Pattern+0xda>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	cb 01       	movw	r24, r22
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <LED_Rand_Pattern+0xdc>
}
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	ff 90       	pop	r15
     522:	ef 90       	pop	r14
     524:	df 90       	pop	r13
     526:	cf 90       	pop	r12
     528:	bf 90       	pop	r11
     52a:	af 90       	pop	r10
     52c:	9f 90       	pop	r9
     52e:	8f 90       	pop	r8
     530:	08 95       	ret

00000532 <LED_Out2InPattern>:

// Out to in pattern
void LED_Out2InPattern(strip* LEDSTRIP, int strip_len, int delay) {
     532:	3f 92       	push	r3
     534:	4f 92       	push	r4
     536:	5f 92       	push	r5
     538:	6f 92       	push	r6
     53a:	7f 92       	push	r7
     53c:	8f 92       	push	r8
     53e:	9f 92       	push	r9
     540:	af 92       	push	r10
     542:	bf 92       	push	r11
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	29 97       	sbiw	r28, 0x09	; 9
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	6c 01       	movw	r12, r24
     566:	7e 83       	std	Y+6, r23	; 0x06
     568:	6d 83       	std	Y+5, r22	; 0x05
     56a:	4a 01       	movw	r8, r20
	int left  =  0;
	int right = 59;
	uint8_t Brightness = 0xFF;
	uint8_t R = rand_Pixel();
     56c:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     570:	18 2f       	mov	r17, r24
	uint8_t G = rand_Pixel();
     572:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     576:	f8 2e       	mov	r15, r24
	uint8_t B = rand_Pixel();
     578:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     57c:	38 2e       	mov	r3, r24
}

// Out to in pattern
void LED_Out2InPattern(strip* LEDSTRIP, int strip_len, int delay) {
	int left  =  0;
	int right = 59;
     57e:	0f 2e       	mov	r0, r31
     580:	fb e3       	ldi	r31, 0x3B	; 59
     582:	af 2e       	mov	r10, r31
     584:	b1 2c       	mov	r11, r1
     586:	f0 2d       	mov	r31, r0
	_delay_ms(delay);
}

// Out to in pattern
void LED_Out2InPattern(strip* LEDSTRIP, int strip_len, int delay) {
	int left  =  0;
     588:	19 86       	std	Y+9, r1	; 0x09
     58a:	18 86       	std	Y+8, r1	; 0x08
	uint8_t Brightness = 0xFF;
	uint8_t R = rand_Pixel();
	uint8_t G = rand_Pixel();
	uint8_t B = rand_Pixel();
	while (1) {	// Out 2 In
		if (cancelpattern) return;
     58c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <cancelpattern>
     590:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <cancelpattern+0x1>
     594:	89 2b       	or	r24, r25
     596:	09 f0       	breq	.+2      	; 0x59a <LED_Out2InPattern+0x68>
     598:	e6 c0       	rjmp	.+460    	; 0x766 <LED_Out2InPattern+0x234>
		store_LED(LEDSTRIP, left, Brightness, R,  G,  B);
     59a:	e3 2c       	mov	r14, r3
     59c:	0f 2d       	mov	r16, r15
     59e:	21 2f       	mov	r18, r17
     5a0:	4f ef       	ldi	r20, 0xFF	; 255
     5a2:	68 85       	ldd	r22, Y+8	; 0x08
     5a4:	79 85       	ldd	r23, Y+9	; 0x09
     5a6:	c6 01       	movw	r24, r12
     5a8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		store_LED(LEDSTRIP, right, Brightness,  R,  G,  B);
     5ac:	21 2f       	mov	r18, r17
     5ae:	4f ef       	ldi	r20, 0xFF	; 255
     5b0:	b5 01       	movw	r22, r10
     5b2:	c6 01       	movw	r24, r12
     5b4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		left++;
     5b8:	88 85       	ldd	r24, Y+8	; 0x08
     5ba:	99 85       	ldd	r25, Y+9	; 0x09
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	99 87       	std	Y+9, r25	; 0x09
     5c0:	88 87       	std	Y+8, r24	; 0x08
		right--;
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	a9 1a       	sub	r10, r25
     5c6:	b1 08       	sbc	r11, r1
		LED_Display(LEDSTRIP, strip_len);
     5c8:	6d 81       	ldd	r22, Y+5	; 0x05
     5ca:	7e 81       	ldd	r23, Y+6	; 0x06
     5cc:	c6 01       	movw	r24, r12
     5ce:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
		if (left == 29) break;
     5d2:	88 85       	ldd	r24, Y+8	; 0x08
     5d4:	99 85       	ldd	r25, Y+9	; 0x09
     5d6:	4d 97       	sbiw	r24, 0x1d	; 29
     5d8:	09 f4       	brne	.+2      	; 0x5dc <LED_Out2InPattern+0xaa>
     5da:	47 c0       	rjmp	.+142    	; 0x66a <LED_Out2InPattern+0x138>
		_delay_ms(delay);
     5dc:	b4 01       	movw	r22, r8
     5de:	09 2c       	mov	r0, r9
     5e0:	00 0c       	add	r0, r0
     5e2:	88 0b       	sbc	r24, r24
     5e4:	99 0b       	sbc	r25, r25
     5e6:	0e 94 92 08 	call	0x1124	; 0x1124 <__floatsisf>
     5ea:	69 83       	std	Y+1, r22	; 0x01
     5ec:	7a 83       	std	Y+2, r23	; 0x02
     5ee:	8b 83       	std	Y+3, r24	; 0x03
     5f0:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	4a e7       	ldi	r20, 0x7A	; 122
     5f8:	55 e4       	ldi	r21, 0x45	; 69
     5fa:	0e 94 1f 09 	call	0x123e	; 0x123e <__mulsf3>
     5fe:	2b 01       	movw	r4, r22
     600:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e8       	ldi	r20, 0x80	; 128
     608:	5f e3       	ldi	r21, 0x3F	; 63
     60a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__cmpsf2>
     60e:	88 23       	and	r24, r24
     610:	34 f1       	brlt	.+76     	; 0x65e <LED_Out2InPattern+0x12c>
		__ticks = 1;
	else if (__tmp > 65535)
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	3f ef       	ldi	r19, 0xFF	; 255
     616:	4f e7       	ldi	r20, 0x7F	; 127
     618:	57 e4       	ldi	r21, 0x47	; 71
     61a:	c3 01       	movw	r24, r6
     61c:	b2 01       	movw	r22, r4
     61e:	0e 94 1a 09 	call	0x1234	; 0x1234 <__gesf2>
     622:	18 16       	cp	r1, r24
     624:	bc f4       	brge	.+46     	; 0x654 <LED_Out2InPattern+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	40 e2       	ldi	r20, 0x20	; 32
     62c:	51 e4       	ldi	r21, 0x41	; 65
     62e:	69 81       	ldd	r22, Y+1	; 0x01
     630:	7a 81       	ldd	r23, Y+2	; 0x02
     632:	8b 81       	ldd	r24, Y+3	; 0x03
     634:	9c 81       	ldd	r25, Y+4	; 0x04
     636:	0e 94 1f 09 	call	0x123e	; 0x123e <__mulsf3>
     63a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__fixunssfsi>
     63e:	06 c0       	rjmp	.+12     	; 0x64c <LED_Out2InPattern+0x11a>
     640:	80 e9       	ldi	r24, 0x90	; 144
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <LED_Out2InPattern+0x112>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     648:	61 50       	subi	r22, 0x01	; 1
     64a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     64c:	61 15       	cp	r22, r1
     64e:	71 05       	cpc	r23, r1
     650:	b9 f7       	brne	.-18     	; 0x640 <LED_Out2InPattern+0x10e>
     652:	9c cf       	rjmp	.-200    	; 0x58c <LED_Out2InPattern+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     654:	c3 01       	movw	r24, r6
     656:	b2 01       	movw	r22, r4
     658:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__fixunssfsi>
     65c:	02 c0       	rjmp	.+4      	; 0x662 <LED_Out2InPattern+0x130>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	cb 01       	movw	r24, r22
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <LED_Out2InPattern+0x132>
     668:	91 cf       	rjmp	.-222    	; 0x58c <LED_Out2InPattern+0x5a>
	}
	left  = 29;
	right = 30;
	R = rand_Pixel();
     66a:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     66e:	18 2f       	mov	r17, r24
	G = rand_Pixel();
     670:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     674:	f8 2e       	mov	r15, r24
	B = rand_Pixel();
     676:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     67a:	8f 83       	std	Y+7, r24	; 0x07
		LED_Display(LEDSTRIP, strip_len);
		if (left == 29) break;
		_delay_ms(delay);
	}
	left  = 29;
	right = 30;
     67c:	0f 2e       	mov	r0, r31
     67e:	fe e1       	ldi	r31, 0x1E	; 30
     680:	af 2e       	mov	r10, r31
     682:	b1 2c       	mov	r11, r1
     684:	f0 2d       	mov	r31, r0
	R = rand_Pixel();
	G = rand_Pixel();
	B = rand_Pixel();
	while (1) {	// In 2 Out
		if (cancelpattern) return;
     686:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <cancelpattern>
     68a:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <cancelpattern+0x1>
     68e:	89 2b       	or	r24, r25
     690:	09 f0       	breq	.+2      	; 0x694 <LED_Out2InPattern+0x162>
     692:	69 c0       	rjmp	.+210    	; 0x766 <LED_Out2InPattern+0x234>
		store_LED(LEDSTRIP, left, Brightness, R,  G,  B);
     694:	ef 80       	ldd	r14, Y+7	; 0x07
     696:	0f 2d       	mov	r16, r15
     698:	21 2f       	mov	r18, r17
     69a:	4f ef       	ldi	r20, 0xFF	; 255
     69c:	68 85       	ldd	r22, Y+8	; 0x08
     69e:	79 85       	ldd	r23, Y+9	; 0x09
     6a0:	c6 01       	movw	r24, r12
     6a2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		store_LED(LEDSTRIP, right, Brightness,  R,  G,  B);
     6a6:	ef 80       	ldd	r14, Y+7	; 0x07
     6a8:	21 2f       	mov	r18, r17
     6aa:	4f ef       	ldi	r20, 0xFF	; 255
     6ac:	b5 01       	movw	r22, r10
     6ae:	c6 01       	movw	r24, r12
     6b0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		left --;
     6b4:	88 85       	ldd	r24, Y+8	; 0x08
     6b6:	99 85       	ldd	r25, Y+9	; 0x09
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	99 87       	std	Y+9, r25	; 0x09
     6bc:	88 87       	std	Y+8, r24	; 0x08
		right++;
     6be:	9f ef       	ldi	r25, 0xFF	; 255
     6c0:	a9 1a       	sub	r10, r25
     6c2:	b9 0a       	sbc	r11, r25
		LED_Display(LEDSTRIP, strip_len);
     6c4:	6d 81       	ldd	r22, Y+5	; 0x05
     6c6:	7e 81       	ldd	r23, Y+6	; 0x06
     6c8:	c6 01       	movw	r24, r12
     6ca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
		if (left == 0) break;
     6ce:	88 85       	ldd	r24, Y+8	; 0x08
     6d0:	99 85       	ldd	r25, Y+9	; 0x09
     6d2:	89 2b       	or	r24, r25
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <LED_Out2InPattern+0x1a6>
     6d6:	47 c0       	rjmp	.+142    	; 0x766 <LED_Out2InPattern+0x234>
		_delay_ms(delay);
     6d8:	b4 01       	movw	r22, r8
     6da:	09 2c       	mov	r0, r9
     6dc:	00 0c       	add	r0, r0
     6de:	88 0b       	sbc	r24, r24
     6e0:	99 0b       	sbc	r25, r25
     6e2:	0e 94 92 08 	call	0x1124	; 0x1124 <__floatsisf>
     6e6:	69 83       	std	Y+1, r22	; 0x01
     6e8:	7a 83       	std	Y+2, r23	; 0x02
     6ea:	8b 83       	std	Y+3, r24	; 0x03
     6ec:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	4a e7       	ldi	r20, 0x7A	; 122
     6f4:	55 e4       	ldi	r21, 0x45	; 69
     6f6:	0e 94 1f 09 	call	0x123e	; 0x123e <__mulsf3>
     6fa:	2b 01       	movw	r4, r22
     6fc:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e8       	ldi	r20, 0x80	; 128
     704:	5f e3       	ldi	r21, 0x3F	; 63
     706:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__cmpsf2>
     70a:	88 23       	and	r24, r24
     70c:	34 f1       	brlt	.+76     	; 0x75a <LED_Out2InPattern+0x228>
		__ticks = 1;
	else if (__tmp > 65535)
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	3f ef       	ldi	r19, 0xFF	; 255
     712:	4f e7       	ldi	r20, 0x7F	; 127
     714:	57 e4       	ldi	r21, 0x47	; 71
     716:	c3 01       	movw	r24, r6
     718:	b2 01       	movw	r22, r4
     71a:	0e 94 1a 09 	call	0x1234	; 0x1234 <__gesf2>
     71e:	18 16       	cp	r1, r24
     720:	bc f4       	brge	.+46     	; 0x750 <LED_Out2InPattern+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e2       	ldi	r20, 0x20	; 32
     728:	51 e4       	ldi	r21, 0x41	; 65
     72a:	69 81       	ldd	r22, Y+1	; 0x01
     72c:	7a 81       	ldd	r23, Y+2	; 0x02
     72e:	8b 81       	ldd	r24, Y+3	; 0x03
     730:	9c 81       	ldd	r25, Y+4	; 0x04
     732:	0e 94 1f 09 	call	0x123e	; 0x123e <__mulsf3>
     736:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__fixunssfsi>
     73a:	06 c0       	rjmp	.+12     	; 0x748 <LED_Out2InPattern+0x216>
     73c:	80 e9       	ldi	r24, 0x90	; 144
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <LED_Out2InPattern+0x20e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     744:	61 50       	subi	r22, 0x01	; 1
     746:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     748:	61 15       	cp	r22, r1
     74a:	71 05       	cpc	r23, r1
     74c:	b9 f7       	brne	.-18     	; 0x73c <LED_Out2InPattern+0x20a>
     74e:	9b cf       	rjmp	.-202    	; 0x686 <LED_Out2InPattern+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     750:	c3 01       	movw	r24, r6
     752:	b2 01       	movw	r22, r4
     754:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__fixunssfsi>
     758:	02 c0       	rjmp	.+4      	; 0x75e <LED_Out2InPattern+0x22c>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	cb 01       	movw	r24, r22
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <LED_Out2InPattern+0x22e>
     764:	90 cf       	rjmp	.-224    	; 0x686 <LED_Out2InPattern+0x154>
	}
     766:	29 96       	adiw	r28, 0x09	; 9
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	bf 90       	pop	r11
     784:	af 90       	pop	r10
     786:	9f 90       	pop	r9
     788:	8f 90       	pop	r8
     78a:	7f 90       	pop	r7
     78c:	6f 90       	pop	r6
     78e:	5f 90       	pop	r5
     790:	4f 90       	pop	r4
     792:	3f 90       	pop	r3
     794:	08 95       	ret

00000796 <SPI_MasterInit>:
#define SPI_SS		2	// Unused No SS for LEDSTRIP SPI Connection
#define SPI_MOSI	3
#define SPI_MISO	4	// Unused Slave doesn't return data
#define SPI_SCK		5
void SPI_MasterInit(void) {
	SPI_DDR = (1<<SPI_SS) | (1<<SPI_MOSI) | (1<<SPI_SCK);	/* Set SS, MOSI and SCK output, all others input */
     796:	8c e2       	ldi	r24, 0x2C	; 44
     798:	84 b9       	out	0x04, r24	; 4
	SPCR0 = (1<<SPE) | (1<<MSTR) | (0<<SPR1) | (0<<SPR0);	/* Enable SPI, Master, set clock rate fclk/4 = 4 MHz */
     79a:	80 e5       	ldi	r24, 0x50	; 80
     79c:	8c bd       	out	0x2c, r24	; 44
     79e:	08 95       	ret

000007a0 <getMode>:

// Gets the mode from RECV_Data
unsigned int getMode(void) {
	int st = 33;									// Smallest value starts at index 33
	unsigned int modeVal = 0;
	for (int i = 0; i < 16; i++) {					// 16 bit signal
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
}

// Gets the mode from RECV_Data
unsigned int getMode(void) {
	int st = 33;									// Smallest value starts at index 33
	unsigned int modeVal = 0;
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
	SPCR0 = (1<<SPE) | (1<<MSTR) | (0<<SPR1) | (0<<SPR0);	/* Enable SPI, Master, set clock rate fclk/4 = 4 MHz */
}

// Gets the mode from RECV_Data
unsigned int getMode(void) {
	int st = 33;									// Smallest value starts at index 33
     7a8:	41 e2       	ldi	r20, 0x21	; 33
     7aa:	50 e0       	ldi	r21, 0x00	; 0
	unsigned int modeVal = 0;
	for (int i = 0; i < 16; i++) {					// 16 bit signal
     7ac:	18 c0       	rjmp	.+48     	; 0x7de <getMode+0x3e>
		if (RECV_Data[st] == 1) modeVal |= (1<<i);	// Converts Binary list to Value
     7ae:	fa 01       	movw	r30, r20
     7b0:	ee 0f       	add	r30, r30
     7b2:	ff 1f       	adc	r31, r31
     7b4:	e1 5d       	subi	r30, 0xD1	; 209
     7b6:	fc 4f       	sbci	r31, 0xFC	; 252
     7b8:	60 81       	ld	r22, Z
     7ba:	71 81       	ldd	r23, Z+1	; 0x01
     7bc:	61 30       	cpi	r22, 0x01	; 1
     7be:	71 05       	cpc	r23, r1
     7c0:	51 f4       	brne	.+20     	; 0x7d6 <getMode+0x36>
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	02 2e       	mov	r0, r18
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <getMode+0x2e>
     7ca:	66 0f       	add	r22, r22
     7cc:	77 1f       	adc	r23, r23
     7ce:	0a 94       	dec	r0
     7d0:	e2 f7       	brpl	.-8      	; 0x7ca <getMode+0x2a>
     7d2:	86 2b       	or	r24, r22
     7d4:	97 2b       	or	r25, r23
		st--;
     7d6:	41 50       	subi	r20, 0x01	; 1
     7d8:	51 09       	sbc	r21, r1

// Gets the mode from RECV_Data
unsigned int getMode(void) {
	int st = 33;									// Smallest value starts at index 33
	unsigned int modeVal = 0;
	for (int i = 0; i < 16; i++) {					// 16 bit signal
     7da:	2f 5f       	subi	r18, 0xFF	; 255
     7dc:	3f 4f       	sbci	r19, 0xFF	; 255
     7de:	20 31       	cpi	r18, 0x10	; 16
     7e0:	31 05       	cpc	r19, r1
     7e2:	2c f3       	brlt	.-54     	; 0x7ae <getMode+0xe>
		if (RECV_Data[st] == 1) modeVal |= (1<<i);	// Converts Binary list to Value
		st--;
	}
	return modeVal;
}
     7e4:	08 95       	ret

000007e6 <InitTimer1>:

// 100us timer to detect period length between signal pulse
void InitTimer1(void) {	// ISR every 100us | 200 * 8 / (1.6 * (10^7) ) thus 200 - 1 = 199 || 100 us = 0.1 ms
	TCCR1B |=   (1<<WGM12);			// Turn on clear-on-match with OCR1A
     7e6:	e1 e8       	ldi	r30, 0x81	; 129
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	88 60       	ori	r24, 0x08	; 8
     7ee:	80 83       	st	Z, r24
	OCR1A   =        65535;			// Max 16 bit timer
     7f0:	8f ef       	ldi	r24, 0xFF	; 255
     7f2:	9f ef       	ldi	r25, 0xFF	; 255
     7f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     7f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |=    (1<<CS11);			// fast PWM with TOP = OCR1A, prescalar = 8
     7fc:	80 81       	ld	r24, Z
     7fe:	82 60       	ori	r24, 0x02	; 2
     800:	80 83       	st	Z, r24
     802:	08 95       	ret

00000804 <__vector_1>:
}

// ISR on falling edge to detect signal
ISR(INT0_vect) {
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	0f 92       	push	r0
     80c:	11 24       	eor	r1, r1
     80e:	2f 93       	push	r18
     810:	3f 93       	push	r19
     812:	4f 93       	push	r20
     814:	5f 93       	push	r21
     816:	6f 93       	push	r22
     818:	7f 93       	push	r23
     81a:	8f 93       	push	r24
     81c:	9f 93       	push	r25
     81e:	af 93       	push	r26
     820:	bf 93       	push	r27
     822:	ef 93       	push	r30
     824:	ff 93       	push	r31
	if (recieving) {
     826:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <recieving>
     82a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <recieving+0x1>
     82e:	89 2b       	or	r24, r25
     830:	09 f4       	brne	.+2      	; 0x834 <__vector_1+0x30>
     832:	7d c0       	rjmp	.+250    	; 0x92e <__stack+0x2f>
		// Collect Time Spent
		int timespent = TCNT1;		// each counter value is 0.5 us
     834:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     838:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
		if (timespent < 3400) RECV_Data[pointer] = 0;		// If less than 1700 us || Bit 0
     83c:	88 34       	cpi	r24, 0x48	; 72
     83e:	9d 40       	sbci	r25, 0x0D	; 13
     840:	5c f4       	brge	.+22     	; 0x858 <__vector_1+0x54>
     842:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <__data_end>
     846:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <__data_end+0x1>
     84a:	ee 0f       	add	r30, r30
     84c:	ff 1f       	adc	r31, r31
     84e:	e1 5d       	subi	r30, 0xD1	; 209
     850:	fc 4f       	sbci	r31, 0xFC	; 252
     852:	11 82       	std	Z+1, r1	; 0x01
     854:	10 82       	st	Z, r1
     856:	0c c0       	rjmp	.+24     	; 0x870 <__vector_1+0x6c>
		else				  RECV_Data[pointer] = 1;		// Bit is 1
     858:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <__data_end>
     85c:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <__data_end+0x1>
     860:	ee 0f       	add	r30, r30
     862:	ff 1f       	adc	r31, r31
     864:	e1 5d       	subi	r30, 0xD1	; 209
     866:	fc 4f       	sbci	r31, 0xFC	; 252
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	91 83       	std	Z+1, r25	; 0x01
     86e:	80 83       	st	Z, r24
		pointer++;											// Increment position of RECV_Data
     870:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
     874:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x1>
     87e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
		if (pointer == size_signal - 1) {
     882:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
     886:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
     88a:	84 97       	sbiw	r24, 0x24	; 36
     88c:	09 f0       	breq	.+2      	; 0x890 <__vector_1+0x8c>
     88e:	4b c0       	rjmp	.+150    	; 0x926 <__stack+0x27>
			new_mode = getMode();
     890:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <getMode>
     894:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <new_mode+0x1>
     898:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <new_mode>
			pointer = recieving = 0;						// Done Receiving
     89c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <recieving+0x1>
     8a0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <recieving>
     8a4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
     8a8:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
			if (new_mode != mode && (new_mode==A || new_mode==B || new_mode==C || new_mode==PWR))
     8ac:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <new_mode>
     8b0:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <new_mode+0x1>
     8b4:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <mode>
     8b8:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <mode+0x1>
     8bc:	28 17       	cp	r18, r24
     8be:	39 07       	cpc	r19, r25
     8c0:	91 f1       	breq	.+100    	; 0x926 <__stack+0x27>
     8c2:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <new_mode>
     8c6:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <new_mode+0x1>
     8ca:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <A>
     8ce:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <A+0x1>
     8d2:	28 17       	cp	r18, r24
     8d4:	39 07       	cpc	r19, r25
     8d6:	09 f1       	breq	.+66     	; 0x91a <__stack+0x1b>
     8d8:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <new_mode>
     8dc:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <new_mode+0x1>
     8e0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <B>
     8e4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <B+0x1>
     8e8:	28 17       	cp	r18, r24
     8ea:	39 07       	cpc	r19, r25
     8ec:	b1 f0       	breq	.+44     	; 0x91a <__stack+0x1b>
     8ee:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <new_mode>
     8f2:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <new_mode+0x1>
     8f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <C>
     8fa:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <C+0x1>
     8fe:	28 17       	cp	r18, r24
     900:	39 07       	cpc	r19, r25
     902:	59 f0       	breq	.+22     	; 0x91a <__stack+0x1b>
     904:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <new_mode>
     908:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <new_mode+0x1>
     90c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <PWR>
     910:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <PWR+0x1>
     914:	28 17       	cp	r18, r24
     916:	39 07       	cpc	r19, r25
     918:	31 f4       	brne	.+12     	; 0x926 <__stack+0x27>
				cancelpattern = 1;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <cancelpattern+0x1>
     922:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <cancelpattern>
		}
		TCNT1 = 0;											// Reset Timer Counter
     926:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     92a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	}
}
     92e:	ff 91       	pop	r31
     930:	ef 91       	pop	r30
     932:	bf 91       	pop	r27
     934:	af 91       	pop	r26
     936:	9f 91       	pop	r25
     938:	8f 91       	pop	r24
     93a:	7f 91       	pop	r23
     93c:	6f 91       	pop	r22
     93e:	5f 91       	pop	r21
     940:	4f 91       	pop	r20
     942:	3f 91       	pop	r19
     944:	2f 91       	pop	r18
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f 90       	pop	r0
     94c:	1f 90       	pop	r1
     94e:	18 95       	reti

00000950 <InitINT0>:
void InitINT0(void) {	  // Init the interrupt pin
	DDRD  &= ~(1<<DDRD2); // INT1 is an input
     950:	8a b1       	in	r24, 0x0a	; 10
     952:	8b 7f       	andi	r24, 0xFB	; 251
     954:	8a b9       	out	0x0a, r24	; 10
	EIMSK |=  (1<<INT0);  // EXT interrupt enable
     956:	8d b3       	in	r24, 0x1d	; 29
     958:	81 60       	ori	r24, 0x01	; 1
     95a:	8d bb       	out	0x1d, r24	; 29
	EICRA |=  (1<<ISC01); // Falling Edge INT0 
     95c:	e9 e6       	ldi	r30, 0x69	; 105
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	82 60       	ori	r24, 0x02	; 2
     964:	80 83       	st	Z, r24
     966:	08 95       	ret

00000968 <dispRECV>:
}

// Displays Received Signal with UART
void dispRECV(void) {
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
	printf("\n Start Signal \n");
     96c:	82 e3       	ldi	r24, 0x32	; 50
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <puts>
	for (int i = 18; i < 34; i++) {
     974:	c2 e1       	ldi	r28, 0x12	; 18
     976:	d0 e0       	ldi	r29, 0x00	; 0
     978:	14 c0       	rjmp	.+40     	; 0x9a2 <dispRECV+0x3a>
		printf("%d ", RECV_Data[i]);
     97a:	fe 01       	movw	r30, r28
     97c:	ee 0f       	add	r30, r30
     97e:	ff 1f       	adc	r31, r31
     980:	e1 5d       	subi	r30, 0xD1	; 209
     982:	fc 4f       	sbci	r31, 0xFC	; 252
     984:	80 81       	ld	r24, Z
     986:	91 81       	ldd	r25, Z+1	; 0x01
     988:	9f 93       	push	r25
     98a:	8f 93       	push	r24
     98c:	82 e4       	ldi	r24, 0x42	; 66
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	9f 93       	push	r25
     992:	8f 93       	push	r24
     994:	0e 94 44 0a 	call	0x1488	; 0x1488 <printf>
}

// Displays Received Signal with UART
void dispRECV(void) {
	printf("\n Start Signal \n");
	for (int i = 18; i < 34; i++) {
     998:	21 96       	adiw	r28, 0x01	; 1
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	c2 32       	cpi	r28, 0x22	; 34
     9a4:	d1 05       	cpc	r29, r1
     9a6:	4c f3       	brlt	.-46     	; 0x97a <dispRECV+0x12>
		printf("%d ", RECV_Data[i]);
	}
	printf("\n END Signal \n");
     9a8:	86 e4       	ldi	r24, 0x46	; 70
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <puts>
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <runMode>:

// Adjusts the Mode based on received HEX signal
void runMode(void) {
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
	new_mode = getMode();
     9ba:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <getMode>
     9be:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <new_mode+0x1>
     9c2:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <new_mode>
	if (new_mode == mode) 
     9c6:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <new_mode>
     9ca:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <new_mode+0x1>
     9ce:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <mode>
     9d2:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <mode+0x1>
     9d6:	28 17       	cp	r18, r24
     9d8:	39 07       	cpc	r19, r25
     9da:	09 f4       	brne	.+2      	; 0x9de <runMode+0x28>
     9dc:	81 c1       	rjmp	.+770    	; 0xce0 <runMode+0x32a>
		return;
	switch (new_mode) {
     9de:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <new_mode>
     9e2:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <new_mode+0x1>
     9e6:	87 3c       	cpi	r24, 0xC7	; 199
     9e8:	28 e3       	ldi	r18, 0x38	; 56
     9ea:	92 07       	cpc	r25, r18
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <runMode+0x3a>
     9ee:	f4 c0       	rjmp	.+488    	; 0xbd8 <runMode+0x222>
     9f0:	a8 f4       	brcc	.+42     	; 0xa1c <runMode+0x66>
     9f2:	87 3e       	cpi	r24, 0xE7	; 231
     9f4:	28 e1       	ldi	r18, 0x18	; 24
     9f6:	92 07       	cpc	r25, r18
     9f8:	09 f4       	brne	.+2      	; 0x9fc <runMode+0x46>
     9fa:	e4 c0       	rjmp	.+456    	; 0xbc4 <runMode+0x20e>
     9fc:	28 f4       	brcc	.+10     	; 0xa08 <runMode+0x52>
     9fe:	8d 3f       	cpi	r24, 0xFD	; 253
     a00:	92 40       	sbci	r25, 0x02	; 2
     a02:	09 f4       	brne	.+2      	; 0xa06 <runMode+0x50>
     a04:	54 c0       	rjmp	.+168    	; 0xaae <runMode+0xf8>
     a06:	4c c1       	rjmp	.+664    	; 0xca0 <runMode+0x2ea>
     a08:	8d 3d       	cpi	r24, 0xDD	; 221
     a0a:	22 e2       	ldi	r18, 0x22	; 34
     a0c:	92 07       	cpc	r25, r18
     a0e:	09 f4       	brne	.+2      	; 0xa12 <runMode+0x5c>
     a10:	3f c0       	rjmp	.+126    	; 0xa90 <runMode+0xda>
     a12:	8f 3c       	cpi	r24, 0xCF	; 207
     a14:	90 43       	sbci	r25, 0x30	; 48
     a16:	09 f4       	brne	.+2      	; 0xa1a <runMode+0x64>
     a18:	d0 c0       	rjmp	.+416    	; 0xbba <runMode+0x204>
     a1a:	42 c1       	rjmp	.+644    	; 0xca0 <runMode+0x2ea>
     a1c:	85 38       	cpi	r24, 0x85	; 133
     a1e:	2a e7       	ldi	r18, 0x7A	; 122
     a20:	92 07       	cpc	r25, r18
     a22:	09 f4       	brne	.+2      	; 0xa26 <runMode+0x70>
     a24:	d4 c0       	rjmp	.+424    	; 0xbce <runMode+0x218>
     a26:	20 f4       	brcc	.+8      	; 0xa30 <runMode+0x7a>
     a28:	8d 39       	cpi	r24, 0x9D	; 157
     a2a:	92 46       	sbci	r25, 0x62	; 98
     a2c:	59 f0       	breq	.+22     	; 0xa44 <runMode+0x8e>
     a2e:	38 c1       	rjmp	.+624    	; 0xca0 <runMode+0x2ea>
     a30:	87 36       	cpi	r24, 0x67	; 103
     a32:	28 e9       	ldi	r18, 0x98	; 152
     a34:	92 07       	cpc	r25, r18
     a36:	09 f4       	brne	.+2      	; 0xa3a <runMode+0x84>
     a38:	5c c0       	rjmp	.+184    	; 0xaf2 <runMode+0x13c>
     a3a:	8d 33       	cpi	r24, 0x3D	; 61
     a3c:	92 4c       	sbci	r25, 0xC2	; 194
     a3e:	09 f4       	brne	.+2      	; 0xa42 <runMode+0x8c>
     a40:	47 c0       	rjmp	.+142    	; 0xad0 <runMode+0x11a>
     a42:	2e c1       	rjmp	.+604    	; 0xca0 <runMode+0x2ea>
		case 0x629D:	// PWR BTN
			printf("POWER ON/OFF\n");
     a44:	84 e5       	ldi	r24, 0x54	; 84
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <puts>
			if (mode) {
     a4c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <mode>
     a50:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <mode+0x1>
     a54:	89 2b       	or	r24, r25
     a56:	99 f0       	breq	.+38     	; 0xa7e <runMode+0xc8>
				StripCLR(&LEDSTRIP, NUM_LEDS);
     a58:	6c e3       	ldi	r22, 0x3C	; 60
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	8f e3       	ldi	r24, 0x3F	; 63
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	0e 94 c2 00 	call	0x184	; 0x184 <StripCLR>
				prev_mode = mode;
     a64:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <mode>
     a68:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <mode+0x1>
     a6c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <prev_mode+0x1>
     a70:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <prev_mode>
				mode = 0;
     a74:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <mode+0x1>
     a78:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <mode>
     a7c:	31 c1       	rjmp	.+610    	; 0xce0 <runMode+0x32a>
			}
			else mode = prev_mode;
     a7e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <prev_mode>
     a82:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <prev_mode+0x1>
     a86:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <mode+0x1>
     a8a:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <mode>
     a8e:	28 c1       	rjmp	.+592    	; 0xce0 <runMode+0x32a>
			break;
		case 0x22DD:	// A
			mode = 1;
     a90:	c1 e0       	ldi	r28, 0x01	; 1
     a92:	d0 e0       	ldi	r29, 0x00	; 0
     a94:	d0 93 a5 01 	sts	0x01A5, r29	; 0x8001a5 <mode+0x1>
     a98:	c0 93 a4 01 	sts	0x01A4, r28	; 0x8001a4 <mode>
			printf("A\n");
     a9c:	81 e6       	ldi	r24, 0x61	; 97
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <puts>
			cancelpattern = 1;
     aa4:	d0 93 a3 01 	sts	0x01A3, r29	; 0x8001a3 <cancelpattern+0x1>
     aa8:	c0 93 a2 01 	sts	0x01A2, r28	; 0x8001a2 <cancelpattern>
			break;
     aac:	19 c1       	rjmp	.+562    	; 0xce0 <runMode+0x32a>
		case 0x02FD:	// B
			mode = 2;
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <mode+0x1>
     ab6:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <mode>
			printf("B\n");
     aba:	83 e6       	ldi	r24, 0x63	; 99
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <puts>
			cancelpattern = 1;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <cancelpattern+0x1>
     aca:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <cancelpattern>
			break;
     ace:	08 c1       	rjmp	.+528    	; 0xce0 <runMode+0x32a>
		case 0xC23D:	// C
			mode = 3;
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <mode+0x1>
     ad8:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <mode>
			printf("C\n");
     adc:	85 e6       	ldi	r24, 0x65	; 101
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <puts>
			cancelpattern = 1;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <cancelpattern+0x1>
     aec:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <cancelpattern>
			break;
     af0:	f7 c0       	rjmp	.+494    	; 0xce0 <runMode+0x32a>
		case 0x9867:	// UP
			switch (mode) {
     af2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <mode>
     af6:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <mode+0x1>
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	91 05       	cpc	r25, r1
     afe:	19 f1       	breq	.+70     	; 0xb46 <runMode+0x190>
     b00:	83 30       	cpi	r24, 0x03	; 3
     b02:	91 05       	cpc	r25, r1
     b04:	e9 f1       	breq	.+122    	; 0xb80 <runMode+0x1ca>
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	09 f0       	breq	.+2      	; 0xb0c <runMode+0x156>
     b0a:	ea c0       	rjmp	.+468    	; 0xce0 <runMode+0x32a>
				case 1:		// Snake Mode | Increase Snake
				if (s_len < 10) s_len++;
     b0c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_len>
     b10:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <s_len+0x1>
     b14:	8a 30       	cpi	r24, 0x0A	; 10
     b16:	91 05       	cpc	r25, r1
     b18:	2c f4       	brge	.+10     	; 0xb24 <runMode+0x16e>
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <s_len+0x1>
     b20:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <s_len>
					printf("UP %d\n", s_len);
     b24:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <s_len+0x1>
     b28:	8f 93       	push	r24
     b2a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_len>
     b2e:	8f 93       	push	r24
     b30:	87 e6       	ldi	r24, 0x67	; 103
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	9f 93       	push	r25
     b36:	8f 93       	push	r24
     b38:	0e 94 44 0a 	call	0x1488	; 0x1488 <printf>
					break;
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	cd c0       	rjmp	.+410    	; 0xce0 <runMode+0x32a>
				case 2:		// O2I   Mode | Decrease Delay
					if (O2I_delay > 5) O2I_delay -= 2;
     b46:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <O2I_delay>
     b4a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <O2I_delay+0x1>
     b4e:	86 30       	cpi	r24, 0x06	; 6
     b50:	91 05       	cpc	r25, r1
     b52:	2c f0       	brlt	.+10     	; 0xb5e <runMode+0x1a8>
     b54:	02 97       	sbiw	r24, 0x02	; 2
     b56:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <O2I_delay+0x1>
     b5a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <O2I_delay>
					printf("UP %d\n", O2I_delay);
     b5e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <O2I_delay+0x1>
     b62:	8f 93       	push	r24
     b64:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <O2I_delay>
     b68:	8f 93       	push	r24
     b6a:	87 e6       	ldi	r24, 0x67	; 103
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	9f 93       	push	r25
     b70:	8f 93       	push	r24
     b72:	0e 94 44 0a 	call	0x1488	; 0x1488 <printf>
					break;
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	b0 c0       	rjmp	.+352    	; 0xce0 <runMode+0x32a>
				case 3:		// Rand  Mode | Decrease Delay
					if (RAN_delay > 4) RAN_delay -= 4;
     b80:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RAN_delay>
     b84:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <RAN_delay+0x1>
     b88:	85 30       	cpi	r24, 0x05	; 5
     b8a:	91 05       	cpc	r25, r1
     b8c:	2c f0       	brlt	.+10     	; 0xb98 <runMode+0x1e2>
     b8e:	04 97       	sbiw	r24, 0x04	; 4
     b90:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <RAN_delay+0x1>
     b94:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <RAN_delay>
					printf("UP %d\n", RAN_delay);
     b98:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <RAN_delay+0x1>
     b9c:	8f 93       	push	r24
     b9e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RAN_delay>
     ba2:	8f 93       	push	r24
     ba4:	87 e6       	ldi	r24, 0x67	; 103
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	9f 93       	push	r25
     baa:	8f 93       	push	r24
     bac:	0e 94 44 0a 	call	0x1488	; 0x1488 <printf>
					break;	
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	93 c0       	rjmp	.+294    	; 0xce0 <runMode+0x32a>
			}
			break;
		case 0x30CF:	// LEFT
			printf("LEFT\n");
     bba:	8e e6       	ldi	r24, 0x6E	; 110
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <puts>
			break;
     bc2:	8e c0       	rjmp	.+284    	; 0xce0 <runMode+0x32a>
		case 0x18E7:	// CIRCLE
			printf("CIRCLE\n");
     bc4:	83 e7       	ldi	r24, 0x73	; 115
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <puts>
			break;
     bcc:	89 c0       	rjmp	.+274    	; 0xce0 <runMode+0x32a>
		case 0x7A85:	// RIGHT
			printf("RIGHT\n");
     bce:	8a e7       	ldi	r24, 0x7A	; 122
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <puts>
			break;
     bd6:	84 c0       	rjmp	.+264    	; 0xce0 <runMode+0x32a>
		case 0x38C7:	// DOWN
			switch (mode) {
     bd8:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <mode>
     bdc:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <mode+0x1>
     be0:	82 30       	cpi	r24, 0x02	; 2
     be2:	91 05       	cpc	r25, r1
     be4:	19 f1       	breq	.+70     	; 0xc2c <runMode+0x276>
     be6:	83 30       	cpi	r24, 0x03	; 3
     be8:	91 05       	cpc	r25, r1
     bea:	e9 f1       	breq	.+122    	; 0xc66 <runMode+0x2b0>
     bec:	01 97       	sbiw	r24, 0x01	; 1
     bee:	09 f0       	breq	.+2      	; 0xbf2 <runMode+0x23c>
     bf0:	77 c0       	rjmp	.+238    	; 0xce0 <runMode+0x32a>
				case 1:		// Snake Mode | Decrease Snake
					if (s_len > 1) s_len--;
     bf2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_len>
     bf6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <s_len+0x1>
     bfa:	82 30       	cpi	r24, 0x02	; 2
     bfc:	91 05       	cpc	r25, r1
     bfe:	2c f0       	brlt	.+10     	; 0xc0a <runMode+0x254>
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <s_len+0x1>
     c06:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <s_len>
					printf("DOWN %d\n", s_len);
     c0a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <s_len+0x1>
     c0e:	8f 93       	push	r24
     c10:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_len>
     c14:	8f 93       	push	r24
     c16:	80 e8       	ldi	r24, 0x80	; 128
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	9f 93       	push	r25
     c1c:	8f 93       	push	r24
     c1e:	0e 94 44 0a 	call	0x1488	; 0x1488 <printf>
					break;
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	5a c0       	rjmp	.+180    	; 0xce0 <runMode+0x32a>
				case 2:		// O2I   Mode | Increase Delay
					if (O2I_delay < 20) O2I_delay += 2;
     c2c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <O2I_delay>
     c30:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <O2I_delay+0x1>
     c34:	84 31       	cpi	r24, 0x14	; 20
     c36:	91 05       	cpc	r25, r1
     c38:	2c f4       	brge	.+10     	; 0xc44 <runMode+0x28e>
     c3a:	02 96       	adiw	r24, 0x02	; 2
     c3c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <O2I_delay+0x1>
     c40:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <O2I_delay>
					printf("DOWN %d\n", O2I_delay);
     c44:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <O2I_delay+0x1>
     c48:	8f 93       	push	r24
     c4a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <O2I_delay>
     c4e:	8f 93       	push	r24
     c50:	80 e8       	ldi	r24, 0x80	; 128
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	9f 93       	push	r25
     c56:	8f 93       	push	r24
     c58:	0e 94 44 0a 	call	0x1488	; 0x1488 <printf>
					break;
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	3d c0       	rjmp	.+122    	; 0xce0 <runMode+0x32a>
				case 3:		// Rand  Mode | Increase Delay
					if (RAN_delay < 60) RAN_delay += 4;
     c66:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RAN_delay>
     c6a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <RAN_delay+0x1>
     c6e:	8c 33       	cpi	r24, 0x3C	; 60
     c70:	91 05       	cpc	r25, r1
     c72:	2c f4       	brge	.+10     	; 0xc7e <runMode+0x2c8>
     c74:	04 96       	adiw	r24, 0x04	; 4
     c76:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <RAN_delay+0x1>
     c7a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <RAN_delay>
					printf("DOWN %d\n", RAN_delay);
     c7e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <RAN_delay+0x1>
     c82:	8f 93       	push	r24
     c84:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RAN_delay>
     c88:	8f 93       	push	r24
     c8a:	80 e8       	ldi	r24, 0x80	; 128
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	9f 93       	push	r25
     c90:	8f 93       	push	r24
     c92:	0e 94 44 0a 	call	0x1488	; 0x1488 <printf>
					break;
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	20 c0       	rjmp	.+64     	; 0xce0 <runMode+0x32a>
			}
			break;
		default:	// Error Case
			printf("ERROR OCCURED\n");
     ca0:	89 e8       	ldi	r24, 0x89	; 137
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <puts>
			for (int i = 0; i < size_signal; i++) {
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	08 c0       	rjmp	.+16     	; 0xcbe <runMode+0x308>
				RECV_Data[i] = 0;
     cae:	fc 01       	movw	r30, r24
     cb0:	ee 0f       	add	r30, r30
     cb2:	ff 1f       	adc	r31, r31
     cb4:	e1 5d       	subi	r30, 0xD1	; 209
     cb6:	fc 4f       	sbci	r31, 0xFC	; 252
     cb8:	11 82       	std	Z+1, r1	; 0x01
     cba:	10 82       	st	Z, r1
					break;
			}
			break;
		default:	// Error Case
			printf("ERROR OCCURED\n");
			for (int i = 0; i < size_signal; i++) {
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	85 32       	cpi	r24, 0x25	; 37
     cc0:	91 05       	cpc	r25, r1
     cc2:	ac f3       	brlt	.-22     	; 0xcae <runMode+0x2f8>
				RECV_Data[i] = 0;
			}
			cancelpattern = pointer = 0;	// No need to stop Current Pattern running
     cc4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
     cc8:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
     ccc:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <cancelpattern+0x1>
     cd0:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <cancelpattern>
			recieving = 1;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <recieving+0x1>
     cdc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <recieving>
			break;
	}
}
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	08 95       	ret

00000ce6 <recieve>:

// Uses info from received signal to change mode
void recieve(void) {
	dispRECV();
     ce6:	0e 94 b4 04 	call	0x968	; 0x968 <dispRECV>
	runMode();
     cea:	0e 94 db 04 	call	0x9b6	; 0x9b6 <runMode>
	// RESET | Receiving Future Signals | Pointer to start of signal list
	recieving = 1;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <recieving+0x1>
     cf6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <recieving>
	pointer   = 0;
     cfa:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
     cfe:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
     d02:	08 95       	ret

00000d04 <main>:
}

// Driver Code
int main(void) {
	uart_init(0);
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	0e 94 45 08 	call	0x108a	; 0x108a <uart_init>

	InitINT0();
     d0a:	0e 94 a8 04 	call	0x950	; 0x950 <InitINT0>
	InitTimer1();
     d0e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <InitTimer1>
	SPI_MasterInit();
     d12:	0e 94 cb 03 	call	0x796	; 0x796 <SPI_MasterInit>

	sei();					// global interrupts enabled 
     d16:	78 94       	sei
	UCSR0B |= (1<<RXCIE0);	// Interrupts initialized
     d18:	e1 ec       	ldi	r30, 0xC1	; 193
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	80 68       	ori	r24, 0x80	; 128
     d20:	80 83       	st	Z, r24
	// LED to show Power is being Supplied
	DDRD  = (1<<PIND7);		
     d22:	80 e8       	ldi	r24, 0x80	; 128
     d24:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1<<PIND7);
     d26:	8b b9       	out	0x0b, r24	; 11

	strip_init(&LEDSTRIP, NUM_LEDS);		// Initialize all values of OBJ to 0
     d28:	6c e3       	ldi	r22, 0x3C	; 60
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	8f e3       	ldi	r24, 0x3F	; 63
     d2e:	92 e0       	ldi	r25, 0x02	; 2
     d30:	0e 94 7e 00 	call	0xfc	; 0xfc <strip_init>
	StripCLR(&LEDSTRIP, NUM_LEDS);			// Clears the LEDSTRIP display
     d34:	6c e3       	ldi	r22, 0x3C	; 60
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	8f e3       	ldi	r24, 0x3F	; 63
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	0e 94 c2 00 	call	0x184	; 0x184 <StripCLR>

	while (1) {
		if (cancelpattern) {
     d40:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <cancelpattern>
     d44:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <cancelpattern+0x1>
     d48:	89 2b       	or	r24, r25
     d4a:	51 f0       	breq	.+20     	; 0xd60 <main+0x5c>
			cancelpattern = 0;
     d4c:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <cancelpattern+0x1>
     d50:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <cancelpattern>
			StripCLR(&LEDSTRIP, NUM_LEDS);
     d54:	6c e3       	ldi	r22, 0x3C	; 60
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	8f e3       	ldi	r24, 0x3F	; 63
     d5a:	92 e0       	ldi	r25, 0x02	; 2
     d5c:	0e 94 c2 00 	call	0x184	; 0x184 <StripCLR>
		}
		if (!recieving) { // Ready to read
     d60:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <recieving>
     d64:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <recieving+0x1>
     d68:	89 2b       	or	r24, r25
     d6a:	11 f4       	brne	.+4      	; 0xd70 <main+0x6c>
			recieve();
     d6c:	0e 94 73 06 	call	0xce6	; 0xce6 <recieve>
		}

		switch (mode) {
     d70:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <mode>
     d74:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <mode+0x1>
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	91 05       	cpc	r25, r1
     d7c:	a1 f0       	breq	.+40     	; 0xda6 <main+0xa2>
     d7e:	83 30       	cpi	r24, 0x03	; 3
     d80:	91 05       	cpc	r25, r1
     d82:	e1 f0       	breq	.+56     	; 0xdbc <main+0xb8>
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	e1 f6       	brne	.-72     	; 0xd40 <main+0x3c>
			case 1:
				LED_Bounce_Pattern(&LEDSTRIP, 0, 59, s_len, NUM_LEDS);
     d88:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <s_len>
     d8c:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <s_len+0x1>
     d90:	0c e3       	ldi	r16, 0x3C	; 60
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	4b e3       	ldi	r20, 0x3B	; 59
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	8f e3       	ldi	r24, 0x3F	; 63
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	0e 94 46 01 	call	0x28c	; 0x28c <LED_Bounce_Pattern>
				break;
     da4:	cd cf       	rjmp	.-102    	; 0xd40 <main+0x3c>
			case 2:
				LED_Out2InPattern(&LEDSTRIP, NUM_LEDS, O2I_delay);
     da6:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <O2I_delay>
     daa:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <O2I_delay+0x1>
     dae:	6c e3       	ldi	r22, 0x3C	; 60
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	8f e3       	ldi	r24, 0x3F	; 63
     db4:	92 e0       	ldi	r25, 0x02	; 2
     db6:	0e 94 99 02 	call	0x532	; 0x532 <LED_Out2InPattern>
				break;
     dba:	c2 cf       	rjmp	.-124    	; 0xd40 <main+0x3c>
			case 3:
				LED_Rand_Pattern(&LEDSTRIP,NUM_LEDS, RAN_delay);
     dbc:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <RAN_delay>
     dc0:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <RAN_delay+0x1>
     dc4:	6c e3       	ldi	r22, 0x3C	; 60
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	8f e3       	ldi	r24, 0x3F	; 63
     dca:	92 e0       	ldi	r25, 0x02	; 2
     dcc:	0e 94 1c 02 	call	0x438	; 0x438 <LED_Rand_Pattern>
				break;
     dd0:	b7 cf       	rjmp	.-146    	; 0xd40 <main+0x3c>

00000dd2 <uart_putchar>:

/*
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int uart_putchar(char c, FILE *stream) {
     dd2:	cf 93       	push	r28
     dd4:	c8 2f       	mov	r28, r24

  if (c == '\a')
     dd6:	87 30       	cpi	r24, 0x07	; 7
     dd8:	69 f4       	brne	.+26     	; 0xdf4 <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
     dda:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <__iob+0x4>
     dde:	30 91 7e 03 	lds	r19, 0x037E	; 0x80037e <__iob+0x5>
     de2:	47 e0       	ldi	r20, 0x07	; 7
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	87 e9       	ldi	r24, 0x97	; 151
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	0e 94 10 0a 	call	0x1420	; 0x1420 <fwrite>
      return 0;
     df2:	2a c0       	rjmp	.+84     	; 0xe48 <uart_putchar+0x76>
    }

  if (c == '\n')
     df4:	8a 30       	cpi	r24, 0x0A	; 10
     df6:	19 f4       	brne	.+6      	; 0xdfe <uart_putchar+0x2c>
    uart_putchar('\r', stream);
     df8:	8d e0       	ldi	r24, 0x0D	; 13
     dfa:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
	if (use_tx_interrupts) {
     dfe:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <use_tx_interrupts>
     e02:	88 23       	and	r24, r24
     e04:	d9 f0       	breq	.+54     	; 0xe3c <uart_putchar+0x6a>
		t_buffer[t_put_index] = c;					// put character in buffer
     e06:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <t_put_index>
     e0a:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <t_put_index+0x1>
     e0e:	fc 01       	movw	r30, r24
     e10:	e3 50       	subi	r30, 0x03	; 3
     e12:	fe 4f       	sbci	r31, 0xFE	; 254
     e14:	c0 83       	st	Z, r28
		t_put_index = (t_put_index + 1) % BUF_SIZE;	// increment ring buffer index
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	8f 73       	andi	r24, 0x3F	; 63
     e1a:	90 78       	andi	r25, 0x80	; 128
     e1c:	99 23       	and	r25, r25
     e1e:	24 f4       	brge	.+8      	; 0xe28 <uart_putchar+0x56>
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	80 6c       	ori	r24, 0xC0	; 192
     e24:	9f 6f       	ori	r25, 0xFF	; 255
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <t_put_index+0x1>
     e2c:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <t_put_index>
		UCSR0B |= _BV(UDRE0);							// enable interrupt
     e30:	e1 ec       	ldi	r30, 0xC1	; 193
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	80 62       	ori	r24, 0x20	; 32
     e38:	80 83       	st	Z, r24
     e3a:	06 c0       	rjmp	.+12     	; 0xe48 <uart_putchar+0x76>
	} else {
		loop_until_bit_is_set(UCSR0A, UDRE0);
     e3c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     e40:	85 ff       	sbrs	r24, 5
     e42:	fc cf       	rjmp	.-8      	; 0xe3c <uart_putchar+0x6a>
		UDR0 = c;
     e44:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}

  return 0;
}
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	cf 91       	pop	r28
     e4e:	08 95       	ret

00000e50 <uart_getchar>:
 * parity recognition is supported by hardware).
 *
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int uart_getchar(FILE *stream) {
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     e5c:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <rxp.1837>
     e60:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <rxp.1837+0x1>
     e64:	23 2b       	or	r18, r19
     e66:	09 f0       	breq	.+2      	; 0xe6a <uart_getchar+0x1a>
     e68:	a3 c0       	rjmp	.+326    	; 0xfb0 <uart_getchar+0x160>
     e6a:	8c 01       	movw	r16, r24
     e6c:	c6 ea       	ldi	r28, 0xA6	; 166
     e6e:	d1 e0       	ldi	r29, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     e70:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     e74:	99 23       	and	r25, r25
     e76:	e4 f7       	brge	.-8      	; 0xe70 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     e78:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     e7c:	84 fd       	sbrc	r24, 4
     e7e:	ab c0       	rjmp	.+342    	; 0xfd6 <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     e80:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     e84:	83 fd       	sbrc	r24, 3
     e86:	aa c0       	rjmp	.+340    	; 0xfdc <uart_getchar+0x18c>
	  return _FDEV_ERR;
	c = UDR0;
     e88:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     e8c:	8d 30       	cpi	r24, 0x0D	; 13
     e8e:	09 f4       	brne	.+2      	; 0xe92 <uart_getchar+0x42>
	  c = '\n';
     e90:	8a e0       	ldi	r24, 0x0A	; 10
	if (c == '\n')
     e92:	8a 30       	cpi	r24, 0x0A	; 10
     e94:	59 f4       	brne	.+22     	; 0xeac <uart_getchar+0x5c>
	  {
	    *cp = c;
     e96:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
     e98:	b8 01       	movw	r22, r16
     e9a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
	    rxp = b;
     e9e:	86 ea       	ldi	r24, 0xA6	; 166
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <rxp.1837+0x1>
     ea6:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <rxp.1837>
	    break;
     eaa:	82 c0       	rjmp	.+260    	; 0xfb0 <uart_getchar+0x160>
	  }
	else if (c == '\t')
     eac:	89 30       	cpi	r24, 0x09	; 9
     eae:	09 f4       	brne	.+2      	; 0xeb2 <uart_getchar+0x62>
	  c = ' ';
     eb0:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     eb2:	90 ee       	ldi	r25, 0xE0	; 224
     eb4:	98 0f       	add	r25, r24
     eb6:	9f 35       	cpi	r25, 0x5F	; 95
     eb8:	10 f0       	brcs	.+4      	; 0xebe <uart_getchar+0x6e>
     eba:	80 3a       	cpi	r24, 0xA0	; 160
     ebc:	98 f0       	brcs	.+38     	; 0xee4 <uart_getchar+0x94>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	c5 3f       	cpi	r28, 0xF5	; 245
     ec2:	d9 07       	cpc	r29, r25
     ec4:	29 f4       	brne	.+10     	; 0xed0 <uart_getchar+0x80>
	      uart_putchar('\a', stream);
     ec6:	b8 01       	movw	r22, r16
     ec8:	87 e0       	ldi	r24, 0x07	; 7
     eca:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
     ece:	d0 cf       	rjmp	.-96     	; 0xe70 <uart_getchar+0x20>
	    else
	      {
		*cp++ = c;
     ed0:	7e 01       	movw	r14, r28
     ed2:	ef ef       	ldi	r30, 0xFF	; 255
     ed4:	ee 1a       	sub	r14, r30
     ed6:	fe 0a       	sbc	r15, r30
     ed8:	88 83       	st	Y, r24
		uart_putchar(c, stream);
     eda:	b8 01       	movw	r22, r16
     edc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
     ee0:	e7 01       	movw	r28, r14
		uart_putchar(c, stream);
	      }
	    continue;
     ee2:	c6 cf       	rjmp	.-116    	; 0xe70 <uart_getchar+0x20>
	  }

	switch (c)
     ee4:	82 31       	cpi	r24, 0x12	; 18
     ee6:	19 f1       	breq	.+70     	; 0xf2e <uart_getchar+0xde>
     ee8:	30 f4       	brcc	.+12     	; 0xef6 <uart_getchar+0xa6>
     eea:	83 30       	cpi	r24, 0x03	; 3
     eec:	09 f4       	brne	.+2      	; 0xef0 <uart_getchar+0xa0>
     eee:	79 c0       	rjmp	.+242    	; 0xfe2 <uart_getchar+0x192>
     ef0:	88 30       	cpi	r24, 0x08	; 8
     ef2:	49 f0       	breq	.+18     	; 0xf06 <uart_getchar+0xb6>
     ef4:	bd cf       	rjmp	.-134    	; 0xe70 <uart_getchar+0x20>
     ef6:	87 31       	cpi	r24, 0x17	; 23
     ef8:	09 f4       	brne	.+2      	; 0xefc <uart_getchar+0xac>
     efa:	4e c0       	rjmp	.+156    	; 0xf98 <uart_getchar+0x148>
     efc:	8f 37       	cpi	r24, 0x7F	; 127
     efe:	19 f0       	breq	.+6      	; 0xf06 <uart_getchar+0xb6>
     f00:	85 31       	cpi	r24, 0x15	; 21
     f02:	b9 f1       	breq	.+110    	; 0xf72 <uart_getchar+0x122>
     f04:	b5 cf       	rjmp	.-150    	; 0xe70 <uart_getchar+0x20>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     f06:	f1 e0       	ldi	r31, 0x01	; 1
     f08:	c6 3a       	cpi	r28, 0xA6	; 166
     f0a:	df 07       	cpc	r29, r31
     f0c:	09 f0       	breq	.+2      	; 0xf10 <uart_getchar+0xc0>
     f0e:	08 f4       	brcc	.+2      	; 0xf12 <uart_getchar+0xc2>
     f10:	af cf       	rjmp	.-162    	; 0xe70 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     f12:	b8 01       	movw	r22, r16
     f14:	88 e0       	ldi	r24, 0x08	; 8
     f16:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
		uart_putchar(' ', stream);
     f1a:	b8 01       	movw	r22, r16
     f1c:	80 e2       	ldi	r24, 0x20	; 32
     f1e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
		uart_putchar('\b', stream);
     f22:	b8 01       	movw	r22, r16
     f24:	88 e0       	ldi	r24, 0x08	; 8
     f26:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
		cp--;
     f2a:	21 97       	sbiw	r28, 0x01	; 1
     f2c:	a1 cf       	rjmp	.-190    	; 0xe70 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     f2e:	b8 01       	movw	r22, r16
     f30:	8d e0       	ldi	r24, 0x0D	; 13
     f32:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     f36:	0f 2e       	mov	r0, r31
     f38:	f6 ea       	ldi	r31, 0xA6	; 166
     f3a:	ef 2e       	mov	r14, r31
     f3c:	f1 e0       	ldi	r31, 0x01	; 1
     f3e:	ff 2e       	mov	r15, r31
     f40:	f0 2d       	mov	r31, r0
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <uart_getchar+0x100>
	      uart_putchar(*cp2, stream);
     f44:	b8 01       	movw	r22, r16
     f46:	f7 01       	movw	r30, r14
     f48:	81 91       	ld	r24, Z+
     f4a:	7f 01       	movw	r14, r30
     f4c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     f50:	ec 16       	cp	r14, r28
     f52:	fd 06       	cpc	r15, r29
     f54:	b8 f3       	brcs	.-18     	; 0xf44 <uart_getchar+0xf4>
     f56:	8c cf       	rjmp	.-232    	; 0xe70 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     f58:	b8 01       	movw	r22, r16
     f5a:	88 e0       	ldi	r24, 0x08	; 8
     f5c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
		uart_putchar(' ', stream);
     f60:	b8 01       	movw	r22, r16
     f62:	80 e2       	ldi	r24, 0x20	; 32
     f64:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
		uart_putchar('\b', stream);
     f68:	b8 01       	movw	r22, r16
     f6a:	88 e0       	ldi	r24, 0x08	; 8
     f6c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
		cp--;
     f70:	21 97       	sbiw	r28, 0x01	; 1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     f72:	f1 e0       	ldi	r31, 0x01	; 1
     f74:	c6 3a       	cpi	r28, 0xA6	; 166
     f76:	df 07       	cpc	r29, r31
     f78:	09 f0       	breq	.+2      	; 0xf7c <uart_getchar+0x12c>
     f7a:	70 f7       	brcc	.-36     	; 0xf58 <uart_getchar+0x108>
     f7c:	79 cf       	rjmp	.-270    	; 0xe70 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     f7e:	b8 01       	movw	r22, r16
     f80:	88 e0       	ldi	r24, 0x08	; 8
     f82:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
		uart_putchar(' ', stream);
     f86:	b8 01       	movw	r22, r16
     f88:	80 e2       	ldi	r24, 0x20	; 32
     f8a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
		uart_putchar('\b', stream);
     f8e:	b8 01       	movw	r22, r16
     f90:	88 e0       	ldi	r24, 0x08	; 8
     f92:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <uart_putchar>
		cp--;
     f96:	21 97       	sbiw	r28, 0x01	; 1
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	c6 3a       	cpi	r28, 0xA6	; 166
     f9c:	d8 07       	cpc	r29, r24
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <uart_getchar+0x152>
     fa0:	08 f4       	brcc	.+2      	; 0xfa4 <uart_getchar+0x154>
     fa2:	66 cf       	rjmp	.-308    	; 0xe70 <uart_getchar+0x20>
     fa4:	fe 01       	movw	r30, r28
     fa6:	31 97       	sbiw	r30, 0x01	; 1
     fa8:	80 81       	ld	r24, Z
     faa:	80 32       	cpi	r24, 0x20	; 32
     fac:	41 f7       	brne	.-48     	; 0xf7e <uart_getchar+0x12e>
     fae:	60 cf       	rjmp	.-320    	; 0xe70 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     fb0:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <rxp.1837>
     fb4:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <rxp.1837+0x1>
     fb8:	cf 01       	movw	r24, r30
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <rxp.1837+0x1>
     fc0:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <rxp.1837>
     fc4:	80 81       	ld	r24, Z
  if (c == '\n')
     fc6:	8a 30       	cpi	r24, 0x0A	; 10
     fc8:	21 f4       	brne	.+8      	; 0xfd2 <uart_getchar+0x182>
    rxp = 0;
     fca:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <rxp.1837+0x1>
     fce:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <rxp.1837>

  return c;
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <uart_getchar+0x196>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     fd6:	8e ef       	ldi	r24, 0xFE	; 254
     fd8:	9f ef       	ldi	r25, 0xFF	; 255
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <uart_getchar+0x196>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
     fdc:	8f ef       	ldi	r24, 0xFF	; 255
     fde:	9f ef       	ldi	r25, 0xFF	; 255
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <uart_getchar+0x196>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     fe2:	8f ef       	ldi	r24, 0xFF	; 255
     fe4:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	08 95       	ret

00000ff4 <__vector_19>:
static char t_buffer[BUF_SIZE];
static int t_put_index = 0;
volatile static int t_get_index = 0;

ISR(USART0_UDRE_vect)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	8f 93       	push	r24
    1004:	9f 93       	push	r25
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
	if (t_get_index != t_put_index) {
    100a:	20 91 f9 01 	lds	r18, 0x01F9	; 0x8001f9 <t_get_index>
    100e:	30 91 fa 01 	lds	r19, 0x01FA	; 0x8001fa <t_get_index+0x1>
    1012:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <t_put_index>
    1016:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <t_put_index+0x1>
    101a:	28 17       	cp	r18, r24
    101c:	39 07       	cpc	r19, r25
    101e:	51 f1       	breq	.+84     	; 0x1074 <__vector_19+0x80>
		UDR0 = t_buffer[t_get_index];
    1020:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <t_get_index>
    1024:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <t_get_index+0x1>
    1028:	e3 50       	subi	r30, 0x03	; 3
    102a:	fe 4f       	sbci	r31, 0xFE	; 254
    102c:	80 81       	ld	r24, Z
    102e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		t_get_index = (t_get_index + 1) % BUF_SIZE;
    1032:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <t_get_index>
    1036:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <t_get_index+0x1>
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	8f 73       	andi	r24, 0x3F	; 63
    103e:	90 78       	andi	r25, 0x80	; 128
    1040:	99 23       	and	r25, r25
    1042:	24 f4       	brge	.+8      	; 0x104c <__vector_19+0x58>
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	80 6c       	ori	r24, 0xC0	; 192
    1048:	9f 6f       	ori	r25, 0xFF	; 255
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <t_get_index+0x1>
    1050:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <t_get_index>
		if (t_get_index == t_put_index) {
    1054:	20 91 f9 01 	lds	r18, 0x01F9	; 0x8001f9 <t_get_index>
    1058:	30 91 fa 01 	lds	r19, 0x01FA	; 0x8001fa <t_get_index+0x1>
    105c:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <t_put_index>
    1060:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <t_put_index+0x1>
    1064:	28 17       	cp	r18, r24
    1066:	39 07       	cpc	r19, r25
    1068:	29 f4       	brne	.+10     	; 0x1074 <__vector_19+0x80>
			UCSR0B &= ~(_BV(UDRE0));
    106a:	e1 ec       	ldi	r30, 0xC1	; 193
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 7d       	andi	r24, 0xDF	; 223
    1072:	80 83       	st	Z, r24
		}
	}
	
}
    1074:	ff 91       	pop	r31
    1076:	ef 91       	pop	r30
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	3f 91       	pop	r19
    107e:	2f 91       	pop	r18
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <uart_init>:
void uart_init(bool use_tx_intr) {
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    108a:	97 e6       	ldi	r25, 0x67	; 103
    108c:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    1090:	98 e1       	ldi	r25, 0x18	; 24
    1092:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  
  stdout = &uartFile;
    1096:	e9 e7       	ldi	r30, 0x79	; 121
    1098:	f3 e0       	ldi	r31, 0x03	; 3
    109a:	26 e1       	ldi	r18, 0x16	; 22
    109c:	31 e0       	ldi	r19, 0x01	; 1
    109e:	33 83       	std	Z+3, r19	; 0x03
    10a0:	22 83       	std	Z+2, r18	; 0x02
  stdin = &uartFile;
    10a2:	31 83       	std	Z+1, r19	; 0x01
    10a4:	20 83       	st	Z, r18
  stderr = &uartFile;
    10a6:	35 83       	std	Z+5, r19	; 0x05
    10a8:	24 83       	std	Z+4, r18	; 0x04
  if (use_tx_intr) {
    10aa:	88 23       	and	r24, r24
    10ac:	21 f0       	breq	.+8      	; 0x10b6 <uart_init+0x2c>
	  use_tx_interrupts = true;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <use_tx_interrupts>
	  sei();
    10b4:	78 94       	sei
    10b6:	08 95       	ret

000010b8 <__cmpsf2>:
    10b8:	0e 94 cd 08 	call	0x119a	; 0x119a <__fp_cmp>
    10bc:	08 f4       	brcc	.+2      	; 0x10c0 <__cmpsf2+0x8>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	08 95       	ret

000010c2 <__fixunssfsi>:
    10c2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__fp_splitA>
    10c6:	88 f0       	brcs	.+34     	; 0x10ea <__fixunssfsi+0x28>
    10c8:	9f 57       	subi	r25, 0x7F	; 127
    10ca:	98 f0       	brcs	.+38     	; 0x10f2 <__fixunssfsi+0x30>
    10cc:	b9 2f       	mov	r27, r25
    10ce:	99 27       	eor	r25, r25
    10d0:	b7 51       	subi	r27, 0x17	; 23
    10d2:	b0 f0       	brcs	.+44     	; 0x1100 <__fixunssfsi+0x3e>
    10d4:	e1 f0       	breq	.+56     	; 0x110e <__fixunssfsi+0x4c>
    10d6:	66 0f       	add	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	88 1f       	adc	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	1a f0       	brmi	.+6      	; 0x10e6 <__fixunssfsi+0x24>
    10e0:	ba 95       	dec	r27
    10e2:	c9 f7       	brne	.-14     	; 0x10d6 <__fixunssfsi+0x14>
    10e4:	14 c0       	rjmp	.+40     	; 0x110e <__fixunssfsi+0x4c>
    10e6:	b1 30       	cpi	r27, 0x01	; 1
    10e8:	91 f0       	breq	.+36     	; 0x110e <__fixunssfsi+0x4c>
    10ea:	0e 94 13 09 	call	0x1226	; 0x1226 <__fp_zero>
    10ee:	b1 e0       	ldi	r27, 0x01	; 1
    10f0:	08 95       	ret
    10f2:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__fp_zero>
    10f6:	67 2f       	mov	r22, r23
    10f8:	78 2f       	mov	r23, r24
    10fa:	88 27       	eor	r24, r24
    10fc:	b8 5f       	subi	r27, 0xF8	; 248
    10fe:	39 f0       	breq	.+14     	; 0x110e <__fixunssfsi+0x4c>
    1100:	b9 3f       	cpi	r27, 0xF9	; 249
    1102:	cc f3       	brlt	.-14     	; 0x10f6 <__fixunssfsi+0x34>
    1104:	86 95       	lsr	r24
    1106:	77 95       	ror	r23
    1108:	67 95       	ror	r22
    110a:	b3 95       	inc	r27
    110c:	d9 f7       	brne	.-10     	; 0x1104 <__fixunssfsi+0x42>
    110e:	3e f4       	brtc	.+14     	; 0x111e <__fixunssfsi+0x5c>
    1110:	90 95       	com	r25
    1112:	80 95       	com	r24
    1114:	70 95       	com	r23
    1116:	61 95       	neg	r22
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	8f 4f       	sbci	r24, 0xFF	; 255
    111c:	9f 4f       	sbci	r25, 0xFF	; 255
    111e:	08 95       	ret

00001120 <__floatunsisf>:
    1120:	e8 94       	clt
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <__floatsisf+0x12>

00001124 <__floatsisf>:
    1124:	97 fb       	bst	r25, 7
    1126:	3e f4       	brtc	.+14     	; 0x1136 <__floatsisf+0x12>
    1128:	90 95       	com	r25
    112a:	80 95       	com	r24
    112c:	70 95       	com	r23
    112e:	61 95       	neg	r22
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	8f 4f       	sbci	r24, 0xFF	; 255
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	99 23       	and	r25, r25
    1138:	a9 f0       	breq	.+42     	; 0x1164 <__floatsisf+0x40>
    113a:	f9 2f       	mov	r31, r25
    113c:	96 e9       	ldi	r25, 0x96	; 150
    113e:	bb 27       	eor	r27, r27
    1140:	93 95       	inc	r25
    1142:	f6 95       	lsr	r31
    1144:	87 95       	ror	r24
    1146:	77 95       	ror	r23
    1148:	67 95       	ror	r22
    114a:	b7 95       	ror	r27
    114c:	f1 11       	cpse	r31, r1
    114e:	f8 cf       	rjmp	.-16     	; 0x1140 <__floatsisf+0x1c>
    1150:	fa f4       	brpl	.+62     	; 0x1190 <__floatsisf+0x6c>
    1152:	bb 0f       	add	r27, r27
    1154:	11 f4       	brne	.+4      	; 0x115a <__floatsisf+0x36>
    1156:	60 ff       	sbrs	r22, 0
    1158:	1b c0       	rjmp	.+54     	; 0x1190 <__floatsisf+0x6c>
    115a:	6f 5f       	subi	r22, 0xFF	; 255
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	8f 4f       	sbci	r24, 0xFF	; 255
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	16 c0       	rjmp	.+44     	; 0x1190 <__floatsisf+0x6c>
    1164:	88 23       	and	r24, r24
    1166:	11 f0       	breq	.+4      	; 0x116c <__floatsisf+0x48>
    1168:	96 e9       	ldi	r25, 0x96	; 150
    116a:	11 c0       	rjmp	.+34     	; 0x118e <__floatsisf+0x6a>
    116c:	77 23       	and	r23, r23
    116e:	21 f0       	breq	.+8      	; 0x1178 <__floatsisf+0x54>
    1170:	9e e8       	ldi	r25, 0x8E	; 142
    1172:	87 2f       	mov	r24, r23
    1174:	76 2f       	mov	r23, r22
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <__floatsisf+0x5e>
    1178:	66 23       	and	r22, r22
    117a:	71 f0       	breq	.+28     	; 0x1198 <__floatsisf+0x74>
    117c:	96 e8       	ldi	r25, 0x86	; 134
    117e:	86 2f       	mov	r24, r22
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	2a f0       	brmi	.+10     	; 0x1190 <__floatsisf+0x6c>
    1186:	9a 95       	dec	r25
    1188:	66 0f       	add	r22, r22
    118a:	77 1f       	adc	r23, r23
    118c:	88 1f       	adc	r24, r24
    118e:	da f7       	brpl	.-10     	; 0x1186 <__floatsisf+0x62>
    1190:	88 0f       	add	r24, r24
    1192:	96 95       	lsr	r25
    1194:	87 95       	ror	r24
    1196:	97 f9       	bld	r25, 7
    1198:	08 95       	ret

0000119a <__fp_cmp>:
    119a:	99 0f       	add	r25, r25
    119c:	00 08       	sbc	r0, r0
    119e:	55 0f       	add	r21, r21
    11a0:	aa 0b       	sbc	r26, r26
    11a2:	e0 e8       	ldi	r30, 0x80	; 128
    11a4:	fe ef       	ldi	r31, 0xFE	; 254
    11a6:	16 16       	cp	r1, r22
    11a8:	17 06       	cpc	r1, r23
    11aa:	e8 07       	cpc	r30, r24
    11ac:	f9 07       	cpc	r31, r25
    11ae:	c0 f0       	brcs	.+48     	; 0x11e0 <__fp_cmp+0x46>
    11b0:	12 16       	cp	r1, r18
    11b2:	13 06       	cpc	r1, r19
    11b4:	e4 07       	cpc	r30, r20
    11b6:	f5 07       	cpc	r31, r21
    11b8:	98 f0       	brcs	.+38     	; 0x11e0 <__fp_cmp+0x46>
    11ba:	62 1b       	sub	r22, r18
    11bc:	73 0b       	sbc	r23, r19
    11be:	84 0b       	sbc	r24, r20
    11c0:	95 0b       	sbc	r25, r21
    11c2:	39 f4       	brne	.+14     	; 0x11d2 <__fp_cmp+0x38>
    11c4:	0a 26       	eor	r0, r26
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <__fp_cmp+0x46>
    11c8:	23 2b       	or	r18, r19
    11ca:	24 2b       	or	r18, r20
    11cc:	25 2b       	or	r18, r21
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <__fp_cmp+0x3e>
    11d0:	08 95       	ret
    11d2:	0a 26       	eor	r0, r26
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <__fp_cmp+0x3e>
    11d6:	a1 40       	sbci	r26, 0x01	; 1
    11d8:	a6 95       	lsr	r26
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	81 1d       	adc	r24, r1
    11de:	81 1d       	adc	r24, r1
    11e0:	08 95       	ret

000011e2 <__fp_split3>:
    11e2:	57 fd       	sbrc	r21, 7
    11e4:	90 58       	subi	r25, 0x80	; 128
    11e6:	44 0f       	add	r20, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	59 f0       	breq	.+22     	; 0x1202 <__fp_splitA+0x10>
    11ec:	5f 3f       	cpi	r21, 0xFF	; 255
    11ee:	71 f0       	breq	.+28     	; 0x120c <__fp_splitA+0x1a>
    11f0:	47 95       	ror	r20

000011f2 <__fp_splitA>:
    11f2:	88 0f       	add	r24, r24
    11f4:	97 fb       	bst	r25, 7
    11f6:	99 1f       	adc	r25, r25
    11f8:	61 f0       	breq	.+24     	; 0x1212 <__fp_splitA+0x20>
    11fa:	9f 3f       	cpi	r25, 0xFF	; 255
    11fc:	79 f0       	breq	.+30     	; 0x121c <__fp_splitA+0x2a>
    11fe:	87 95       	ror	r24
    1200:	08 95       	ret
    1202:	12 16       	cp	r1, r18
    1204:	13 06       	cpc	r1, r19
    1206:	14 06       	cpc	r1, r20
    1208:	55 1f       	adc	r21, r21
    120a:	f2 cf       	rjmp	.-28     	; 0x11f0 <__fp_split3+0xe>
    120c:	46 95       	lsr	r20
    120e:	f1 df       	rcall	.-30     	; 0x11f2 <__fp_splitA>
    1210:	08 c0       	rjmp	.+16     	; 0x1222 <__fp_splitA+0x30>
    1212:	16 16       	cp	r1, r22
    1214:	17 06       	cpc	r1, r23
    1216:	18 06       	cpc	r1, r24
    1218:	99 1f       	adc	r25, r25
    121a:	f1 cf       	rjmp	.-30     	; 0x11fe <__fp_splitA+0xc>
    121c:	86 95       	lsr	r24
    121e:	71 05       	cpc	r23, r1
    1220:	61 05       	cpc	r22, r1
    1222:	08 94       	sec
    1224:	08 95       	ret

00001226 <__fp_zero>:
    1226:	e8 94       	clt

00001228 <__fp_szero>:
    1228:	bb 27       	eor	r27, r27
    122a:	66 27       	eor	r22, r22
    122c:	77 27       	eor	r23, r23
    122e:	cb 01       	movw	r24, r22
    1230:	97 f9       	bld	r25, 7
    1232:	08 95       	ret

00001234 <__gesf2>:
    1234:	0e 94 cd 08 	call	0x119a	; 0x119a <__fp_cmp>
    1238:	08 f4       	brcc	.+2      	; 0x123c <__gesf2+0x8>
    123a:	8f ef       	ldi	r24, 0xFF	; 255
    123c:	08 95       	ret

0000123e <__mulsf3>:
    123e:	0e 94 32 09 	call	0x1264	; 0x1264 <__mulsf3x>
    1242:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_round>
    1246:	0e 94 95 09 	call	0x132a	; 0x132a <__fp_pscA>
    124a:	38 f0       	brcs	.+14     	; 0x125a <__mulsf3+0x1c>
    124c:	0e 94 9c 09 	call	0x1338	; 0x1338 <__fp_pscB>
    1250:	20 f0       	brcs	.+8      	; 0x125a <__mulsf3+0x1c>
    1252:	95 23       	and	r25, r21
    1254:	11 f0       	breq	.+4      	; 0x125a <__mulsf3+0x1c>
    1256:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_inf>
    125a:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_nan>
    125e:	11 24       	eor	r1, r1
    1260:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__fp_szero>

00001264 <__mulsf3x>:
    1264:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__fp_split3>
    1268:	70 f3       	brcs	.-36     	; 0x1246 <__mulsf3+0x8>

0000126a <__mulsf3_pse>:
    126a:	95 9f       	mul	r25, r21
    126c:	c1 f3       	breq	.-16     	; 0x125e <__mulsf3+0x20>
    126e:	95 0f       	add	r25, r21
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	55 1f       	adc	r21, r21
    1274:	62 9f       	mul	r22, r18
    1276:	f0 01       	movw	r30, r0
    1278:	72 9f       	mul	r23, r18
    127a:	bb 27       	eor	r27, r27
    127c:	f0 0d       	add	r31, r0
    127e:	b1 1d       	adc	r27, r1
    1280:	63 9f       	mul	r22, r19
    1282:	aa 27       	eor	r26, r26
    1284:	f0 0d       	add	r31, r0
    1286:	b1 1d       	adc	r27, r1
    1288:	aa 1f       	adc	r26, r26
    128a:	64 9f       	mul	r22, r20
    128c:	66 27       	eor	r22, r22
    128e:	b0 0d       	add	r27, r0
    1290:	a1 1d       	adc	r26, r1
    1292:	66 1f       	adc	r22, r22
    1294:	82 9f       	mul	r24, r18
    1296:	22 27       	eor	r18, r18
    1298:	b0 0d       	add	r27, r0
    129a:	a1 1d       	adc	r26, r1
    129c:	62 1f       	adc	r22, r18
    129e:	73 9f       	mul	r23, r19
    12a0:	b0 0d       	add	r27, r0
    12a2:	a1 1d       	adc	r26, r1
    12a4:	62 1f       	adc	r22, r18
    12a6:	83 9f       	mul	r24, r19
    12a8:	a0 0d       	add	r26, r0
    12aa:	61 1d       	adc	r22, r1
    12ac:	22 1f       	adc	r18, r18
    12ae:	74 9f       	mul	r23, r20
    12b0:	33 27       	eor	r19, r19
    12b2:	a0 0d       	add	r26, r0
    12b4:	61 1d       	adc	r22, r1
    12b6:	23 1f       	adc	r18, r19
    12b8:	84 9f       	mul	r24, r20
    12ba:	60 0d       	add	r22, r0
    12bc:	21 1d       	adc	r18, r1
    12be:	82 2f       	mov	r24, r18
    12c0:	76 2f       	mov	r23, r22
    12c2:	6a 2f       	mov	r22, r26
    12c4:	11 24       	eor	r1, r1
    12c6:	9f 57       	subi	r25, 0x7F	; 127
    12c8:	50 40       	sbci	r21, 0x00	; 0
    12ca:	9a f0       	brmi	.+38     	; 0x12f2 <__mulsf3_pse+0x88>
    12cc:	f1 f0       	breq	.+60     	; 0x130a <__mulsf3_pse+0xa0>
    12ce:	88 23       	and	r24, r24
    12d0:	4a f0       	brmi	.+18     	; 0x12e4 <__mulsf3_pse+0x7a>
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	bb 1f       	adc	r27, r27
    12d8:	66 1f       	adc	r22, r22
    12da:	77 1f       	adc	r23, r23
    12dc:	88 1f       	adc	r24, r24
    12de:	91 50       	subi	r25, 0x01	; 1
    12e0:	50 40       	sbci	r21, 0x00	; 0
    12e2:	a9 f7       	brne	.-22     	; 0x12ce <__mulsf3_pse+0x64>
    12e4:	9e 3f       	cpi	r25, 0xFE	; 254
    12e6:	51 05       	cpc	r21, r1
    12e8:	80 f0       	brcs	.+32     	; 0x130a <__mulsf3_pse+0xa0>
    12ea:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__fp_inf>
    12ee:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__fp_szero>
    12f2:	5f 3f       	cpi	r21, 0xFF	; 255
    12f4:	e4 f3       	brlt	.-8      	; 0x12ee <__mulsf3_pse+0x84>
    12f6:	98 3e       	cpi	r25, 0xE8	; 232
    12f8:	d4 f3       	brlt	.-12     	; 0x12ee <__mulsf3_pse+0x84>
    12fa:	86 95       	lsr	r24
    12fc:	77 95       	ror	r23
    12fe:	67 95       	ror	r22
    1300:	b7 95       	ror	r27
    1302:	f7 95       	ror	r31
    1304:	e7 95       	ror	r30
    1306:	9f 5f       	subi	r25, 0xFF	; 255
    1308:	c1 f7       	brne	.-16     	; 0x12fa <__mulsf3_pse+0x90>
    130a:	fe 2b       	or	r31, r30
    130c:	88 0f       	add	r24, r24
    130e:	91 1d       	adc	r25, r1
    1310:	96 95       	lsr	r25
    1312:	87 95       	ror	r24
    1314:	97 f9       	bld	r25, 7
    1316:	08 95       	ret

00001318 <__fp_inf>:
    1318:	97 f9       	bld	r25, 7
    131a:	9f 67       	ori	r25, 0x7F	; 127
    131c:	80 e8       	ldi	r24, 0x80	; 128
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	08 95       	ret

00001324 <__fp_nan>:
    1324:	9f ef       	ldi	r25, 0xFF	; 255
    1326:	80 ec       	ldi	r24, 0xC0	; 192
    1328:	08 95       	ret

0000132a <__fp_pscA>:
    132a:	00 24       	eor	r0, r0
    132c:	0a 94       	dec	r0
    132e:	16 16       	cp	r1, r22
    1330:	17 06       	cpc	r1, r23
    1332:	18 06       	cpc	r1, r24
    1334:	09 06       	cpc	r0, r25
    1336:	08 95       	ret

00001338 <__fp_pscB>:
    1338:	00 24       	eor	r0, r0
    133a:	0a 94       	dec	r0
    133c:	12 16       	cp	r1, r18
    133e:	13 06       	cpc	r1, r19
    1340:	14 06       	cpc	r1, r20
    1342:	05 06       	cpc	r0, r21
    1344:	08 95       	ret

00001346 <__fp_round>:
    1346:	09 2e       	mov	r0, r25
    1348:	03 94       	inc	r0
    134a:	00 0c       	add	r0, r0
    134c:	11 f4       	brne	.+4      	; 0x1352 <__fp_round+0xc>
    134e:	88 23       	and	r24, r24
    1350:	52 f0       	brmi	.+20     	; 0x1366 <__fp_round+0x20>
    1352:	bb 0f       	add	r27, r27
    1354:	40 f4       	brcc	.+16     	; 0x1366 <__fp_round+0x20>
    1356:	bf 2b       	or	r27, r31
    1358:	11 f4       	brne	.+4      	; 0x135e <__fp_round+0x18>
    135a:	60 ff       	sbrs	r22, 0
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <__fp_round+0x20>
    135e:	6f 5f       	subi	r22, 0xFF	; 255
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	8f 4f       	sbci	r24, 0xFF	; 255
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	08 95       	ret

00001368 <do_rand>:
    1368:	8f 92       	push	r8
    136a:	9f 92       	push	r9
    136c:	af 92       	push	r10
    136e:	bf 92       	push	r11
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	ec 01       	movw	r28, r24
    137e:	68 81       	ld	r22, Y
    1380:	79 81       	ldd	r23, Y+1	; 0x01
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	9b 81       	ldd	r25, Y+3	; 0x03
    1386:	61 15       	cp	r22, r1
    1388:	71 05       	cpc	r23, r1
    138a:	81 05       	cpc	r24, r1
    138c:	91 05       	cpc	r25, r1
    138e:	21 f4       	brne	.+8      	; 0x1398 <do_rand+0x30>
    1390:	64 e2       	ldi	r22, 0x24	; 36
    1392:	79 ed       	ldi	r23, 0xD9	; 217
    1394:	8b e5       	ldi	r24, 0x5B	; 91
    1396:	97 e0       	ldi	r25, 0x07	; 7
    1398:	2d e1       	ldi	r18, 0x1D	; 29
    139a:	33 ef       	ldi	r19, 0xF3	; 243
    139c:	41 e0       	ldi	r20, 0x01	; 1
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__divmodsi4>
    13a4:	49 01       	movw	r8, r18
    13a6:	5a 01       	movw	r10, r20
    13a8:	9b 01       	movw	r18, r22
    13aa:	ac 01       	movw	r20, r24
    13ac:	a7 ea       	ldi	r26, 0xA7	; 167
    13ae:	b1 e4       	ldi	r27, 0x41	; 65
    13b0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__muluhisi3>
    13b4:	6b 01       	movw	r12, r22
    13b6:	7c 01       	movw	r14, r24
    13b8:	ac ee       	ldi	r26, 0xEC	; 236
    13ba:	b4 ef       	ldi	r27, 0xF4	; 244
    13bc:	a5 01       	movw	r20, r10
    13be:	94 01       	movw	r18, r8
    13c0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__mulohisi3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	8c 0d       	add	r24, r12
    13ca:	9d 1d       	adc	r25, r13
    13cc:	ae 1d       	adc	r26, r14
    13ce:	bf 1d       	adc	r27, r15
    13d0:	b7 ff       	sbrs	r27, 7
    13d2:	03 c0       	rjmp	.+6      	; 0x13da <do_rand+0x72>
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	a1 09       	sbc	r26, r1
    13d8:	b0 48       	sbci	r27, 0x80	; 128
    13da:	88 83       	st	Y, r24
    13dc:	99 83       	std	Y+1, r25	; 0x01
    13de:	aa 83       	std	Y+2, r26	; 0x02
    13e0:	bb 83       	std	Y+3, r27	; 0x03
    13e2:	9f 77       	andi	r25, 0x7F	; 127
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	ff 90       	pop	r15
    13ea:	ef 90       	pop	r14
    13ec:	df 90       	pop	r13
    13ee:	cf 90       	pop	r12
    13f0:	bf 90       	pop	r11
    13f2:	af 90       	pop	r10
    13f4:	9f 90       	pop	r9
    13f6:	8f 90       	pop	r8
    13f8:	08 95       	ret

000013fa <rand_r>:
    13fa:	0e 94 b4 09 	call	0x1368	; 0x1368 <do_rand>
    13fe:	08 95       	ret

00001400 <rand>:
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	0e 94 b4 09 	call	0x1368	; 0x1368 <do_rand>
    1408:	08 95       	ret

0000140a <srand>:
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    1412:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1416:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    141a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    141e:	08 95       	ret

00001420 <fwrite>:
    1420:	a0 e0       	ldi	r26, 0x00	; 0
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e6 e1       	ldi	r30, 0x16	; 22
    1426:	fa e0       	ldi	r31, 0x0A	; 10
    1428:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__+0xc>
    142c:	5b 01       	movw	r10, r22
    142e:	4a 01       	movw	r8, r20
    1430:	79 01       	movw	r14, r18
    1432:	d9 01       	movw	r26, r18
    1434:	13 96       	adiw	r26, 0x03	; 3
    1436:	2c 91       	ld	r18, X
    1438:	21 ff       	sbrs	r18, 1
    143a:	1d c0       	rjmp	.+58     	; 0x1476 <fwrite+0x56>
    143c:	c0 e0       	ldi	r28, 0x00	; 0
    143e:	d0 e0       	ldi	r29, 0x00	; 0
    1440:	c8 15       	cp	r28, r8
    1442:	d9 05       	cpc	r29, r9
    1444:	d9 f0       	breq	.+54     	; 0x147c <fwrite+0x5c>
    1446:	8c 01       	movw	r16, r24
    1448:	6c 01       	movw	r12, r24
    144a:	ca 0c       	add	r12, r10
    144c:	db 1c       	adc	r13, r11
    144e:	c8 01       	movw	r24, r16
    1450:	0c 15       	cp	r16, r12
    1452:	1d 05       	cpc	r17, r13
    1454:	71 f0       	breq	.+28     	; 0x1472 <fwrite+0x52>
    1456:	0f 5f       	subi	r16, 0xFF	; 255
    1458:	1f 4f       	sbci	r17, 0xFF	; 255
    145a:	d7 01       	movw	r26, r14
    145c:	18 96       	adiw	r26, 0x08	; 8
    145e:	ed 91       	ld	r30, X+
    1460:	fc 91       	ld	r31, X
    1462:	19 97       	sbiw	r26, 0x09	; 9
    1464:	b7 01       	movw	r22, r14
    1466:	dc 01       	movw	r26, r24
    1468:	8c 91       	ld	r24, X
    146a:	09 95       	icall
    146c:	89 2b       	or	r24, r25
    146e:	79 f3       	breq	.-34     	; 0x144e <fwrite+0x2e>
    1470:	05 c0       	rjmp	.+10     	; 0x147c <fwrite+0x5c>
    1472:	21 96       	adiw	r28, 0x01	; 1
    1474:	e5 cf       	rjmp	.-54     	; 0x1440 <fwrite+0x20>
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	01 c0       	rjmp	.+2      	; 0x147e <fwrite+0x5e>
    147c:	ce 01       	movw	r24, r28
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	ec e0       	ldi	r30, 0x0C	; 12
    1484:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__+0xc>

00001488 <printf>:
    1488:	a0 e0       	ldi	r26, 0x00	; 0
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	ea e4       	ldi	r30, 0x4A	; 74
    148e:	fa e0       	ldi	r31, 0x0A	; 10
    1490:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__prologue_saves__+0x20>
    1494:	ae 01       	movw	r20, r28
    1496:	4b 5f       	subi	r20, 0xFB	; 251
    1498:	5f 4f       	sbci	r21, 0xFF	; 255
    149a:	fa 01       	movw	r30, r20
    149c:	61 91       	ld	r22, Z+
    149e:	71 91       	ld	r23, Z+
    14a0:	af 01       	movw	r20, r30
    14a2:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <__iob+0x2>
    14a6:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <__iob+0x3>
    14aa:	0e 94 8a 0a 	call	0x1514	; 0x1514 <vfprintf>
    14ae:	e2 e0       	ldi	r30, 0x02	; 2
    14b0:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__epilogue_restores__+0x20>

000014b4 <puts>:
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <__iob+0x2>
    14c0:	f0 91 7c 03 	lds	r31, 0x037C	; 0x80037c <__iob+0x3>
    14c4:	23 81       	ldd	r18, Z+3	; 0x03
    14c6:	21 ff       	sbrs	r18, 1
    14c8:	1b c0       	rjmp	.+54     	; 0x1500 <puts+0x4c>
    14ca:	8c 01       	movw	r16, r24
    14cc:	d0 e0       	ldi	r29, 0x00	; 0
    14ce:	c0 e0       	ldi	r28, 0x00	; 0
    14d0:	f8 01       	movw	r30, r16
    14d2:	81 91       	ld	r24, Z+
    14d4:	8f 01       	movw	r16, r30
    14d6:	60 91 7b 03 	lds	r22, 0x037B	; 0x80037b <__iob+0x2>
    14da:	70 91 7c 03 	lds	r23, 0x037C	; 0x80037c <__iob+0x3>
    14de:	db 01       	movw	r26, r22
    14e0:	18 96       	adiw	r26, 0x08	; 8
    14e2:	ed 91       	ld	r30, X+
    14e4:	fc 91       	ld	r31, X
    14e6:	19 97       	sbiw	r26, 0x09	; 9
    14e8:	88 23       	and	r24, r24
    14ea:	31 f0       	breq	.+12     	; 0x14f8 <puts+0x44>
    14ec:	09 95       	icall
    14ee:	89 2b       	or	r24, r25
    14f0:	79 f3       	breq	.-34     	; 0x14d0 <puts+0x1c>
    14f2:	df ef       	ldi	r29, 0xFF	; 255
    14f4:	cf ef       	ldi	r28, 0xFF	; 255
    14f6:	ec cf       	rjmp	.-40     	; 0x14d0 <puts+0x1c>
    14f8:	8a e0       	ldi	r24, 0x0A	; 10
    14fa:	09 95       	icall
    14fc:	89 2b       	or	r24, r25
    14fe:	19 f0       	breq	.+6      	; 0x1506 <puts+0x52>
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	9f ef       	ldi	r25, 0xFF	; 255
    1504:	02 c0       	rjmp	.+4      	; 0x150a <puts+0x56>
    1506:	8d 2f       	mov	r24, r29
    1508:	9c 2f       	mov	r25, r28
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <vfprintf>:
    1514:	ab e0       	ldi	r26, 0x0B	; 11
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e0 e9       	ldi	r30, 0x90	; 144
    151a:	fa e0       	ldi	r31, 0x0A	; 10
    151c:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__prologue_saves__>
    1520:	6c 01       	movw	r12, r24
    1522:	7b 01       	movw	r14, r22
    1524:	8a 01       	movw	r16, r20
    1526:	fc 01       	movw	r30, r24
    1528:	17 82       	std	Z+7, r1	; 0x07
    152a:	16 82       	std	Z+6, r1	; 0x06
    152c:	83 81       	ldd	r24, Z+3	; 0x03
    152e:	81 ff       	sbrs	r24, 1
    1530:	cc c1       	rjmp	.+920    	; 0x18ca <vfprintf+0x3b6>
    1532:	ce 01       	movw	r24, r28
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	3c 01       	movw	r6, r24
    1538:	f6 01       	movw	r30, r12
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	f7 01       	movw	r30, r14
    153e:	93 fd       	sbrc	r25, 3
    1540:	85 91       	lpm	r24, Z+
    1542:	93 ff       	sbrs	r25, 3
    1544:	81 91       	ld	r24, Z+
    1546:	7f 01       	movw	r14, r30
    1548:	88 23       	and	r24, r24
    154a:	09 f4       	brne	.+2      	; 0x154e <vfprintf+0x3a>
    154c:	ba c1       	rjmp	.+884    	; 0x18c2 <vfprintf+0x3ae>
    154e:	85 32       	cpi	r24, 0x25	; 37
    1550:	39 f4       	brne	.+14     	; 0x1560 <vfprintf+0x4c>
    1552:	93 fd       	sbrc	r25, 3
    1554:	85 91       	lpm	r24, Z+
    1556:	93 ff       	sbrs	r25, 3
    1558:	81 91       	ld	r24, Z+
    155a:	7f 01       	movw	r14, r30
    155c:	85 32       	cpi	r24, 0x25	; 37
    155e:	29 f4       	brne	.+10     	; 0x156a <vfprintf+0x56>
    1560:	b6 01       	movw	r22, r12
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1568:	e7 cf       	rjmp	.-50     	; 0x1538 <vfprintf+0x24>
    156a:	91 2c       	mov	r9, r1
    156c:	21 2c       	mov	r2, r1
    156e:	31 2c       	mov	r3, r1
    1570:	ff e1       	ldi	r31, 0x1F	; 31
    1572:	f3 15       	cp	r31, r3
    1574:	d8 f0       	brcs	.+54     	; 0x15ac <vfprintf+0x98>
    1576:	8b 32       	cpi	r24, 0x2B	; 43
    1578:	79 f0       	breq	.+30     	; 0x1598 <vfprintf+0x84>
    157a:	38 f4       	brcc	.+14     	; 0x158a <vfprintf+0x76>
    157c:	80 32       	cpi	r24, 0x20	; 32
    157e:	79 f0       	breq	.+30     	; 0x159e <vfprintf+0x8a>
    1580:	83 32       	cpi	r24, 0x23	; 35
    1582:	a1 f4       	brne	.+40     	; 0x15ac <vfprintf+0x98>
    1584:	23 2d       	mov	r18, r3
    1586:	20 61       	ori	r18, 0x10	; 16
    1588:	1d c0       	rjmp	.+58     	; 0x15c4 <vfprintf+0xb0>
    158a:	8d 32       	cpi	r24, 0x2D	; 45
    158c:	61 f0       	breq	.+24     	; 0x15a6 <vfprintf+0x92>
    158e:	80 33       	cpi	r24, 0x30	; 48
    1590:	69 f4       	brne	.+26     	; 0x15ac <vfprintf+0x98>
    1592:	23 2d       	mov	r18, r3
    1594:	21 60       	ori	r18, 0x01	; 1
    1596:	16 c0       	rjmp	.+44     	; 0x15c4 <vfprintf+0xb0>
    1598:	83 2d       	mov	r24, r3
    159a:	82 60       	ori	r24, 0x02	; 2
    159c:	38 2e       	mov	r3, r24
    159e:	e3 2d       	mov	r30, r3
    15a0:	e4 60       	ori	r30, 0x04	; 4
    15a2:	3e 2e       	mov	r3, r30
    15a4:	2a c0       	rjmp	.+84     	; 0x15fa <vfprintf+0xe6>
    15a6:	f3 2d       	mov	r31, r3
    15a8:	f8 60       	ori	r31, 0x08	; 8
    15aa:	1d c0       	rjmp	.+58     	; 0x15e6 <vfprintf+0xd2>
    15ac:	37 fc       	sbrc	r3, 7
    15ae:	2d c0       	rjmp	.+90     	; 0x160a <vfprintf+0xf6>
    15b0:	20 ed       	ldi	r18, 0xD0	; 208
    15b2:	28 0f       	add	r18, r24
    15b4:	2a 30       	cpi	r18, 0x0A	; 10
    15b6:	40 f0       	brcs	.+16     	; 0x15c8 <vfprintf+0xb4>
    15b8:	8e 32       	cpi	r24, 0x2E	; 46
    15ba:	b9 f4       	brne	.+46     	; 0x15ea <vfprintf+0xd6>
    15bc:	36 fc       	sbrc	r3, 6
    15be:	81 c1       	rjmp	.+770    	; 0x18c2 <vfprintf+0x3ae>
    15c0:	23 2d       	mov	r18, r3
    15c2:	20 64       	ori	r18, 0x40	; 64
    15c4:	32 2e       	mov	r3, r18
    15c6:	19 c0       	rjmp	.+50     	; 0x15fa <vfprintf+0xe6>
    15c8:	36 fe       	sbrs	r3, 6
    15ca:	06 c0       	rjmp	.+12     	; 0x15d8 <vfprintf+0xc4>
    15cc:	8a e0       	ldi	r24, 0x0A	; 10
    15ce:	98 9e       	mul	r9, r24
    15d0:	20 0d       	add	r18, r0
    15d2:	11 24       	eor	r1, r1
    15d4:	92 2e       	mov	r9, r18
    15d6:	11 c0       	rjmp	.+34     	; 0x15fa <vfprintf+0xe6>
    15d8:	ea e0       	ldi	r30, 0x0A	; 10
    15da:	2e 9e       	mul	r2, r30
    15dc:	20 0d       	add	r18, r0
    15de:	11 24       	eor	r1, r1
    15e0:	22 2e       	mov	r2, r18
    15e2:	f3 2d       	mov	r31, r3
    15e4:	f0 62       	ori	r31, 0x20	; 32
    15e6:	3f 2e       	mov	r3, r31
    15e8:	08 c0       	rjmp	.+16     	; 0x15fa <vfprintf+0xe6>
    15ea:	8c 36       	cpi	r24, 0x6C	; 108
    15ec:	21 f4       	brne	.+8      	; 0x15f6 <vfprintf+0xe2>
    15ee:	83 2d       	mov	r24, r3
    15f0:	80 68       	ori	r24, 0x80	; 128
    15f2:	38 2e       	mov	r3, r24
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <vfprintf+0xe6>
    15f6:	88 36       	cpi	r24, 0x68	; 104
    15f8:	41 f4       	brne	.+16     	; 0x160a <vfprintf+0xf6>
    15fa:	f7 01       	movw	r30, r14
    15fc:	93 fd       	sbrc	r25, 3
    15fe:	85 91       	lpm	r24, Z+
    1600:	93 ff       	sbrs	r25, 3
    1602:	81 91       	ld	r24, Z+
    1604:	7f 01       	movw	r14, r30
    1606:	81 11       	cpse	r24, r1
    1608:	b3 cf       	rjmp	.-154    	; 0x1570 <vfprintf+0x5c>
    160a:	98 2f       	mov	r25, r24
    160c:	9f 7d       	andi	r25, 0xDF	; 223
    160e:	95 54       	subi	r25, 0x45	; 69
    1610:	93 30       	cpi	r25, 0x03	; 3
    1612:	28 f4       	brcc	.+10     	; 0x161e <vfprintf+0x10a>
    1614:	0c 5f       	subi	r16, 0xFC	; 252
    1616:	1f 4f       	sbci	r17, 0xFF	; 255
    1618:	9f e3       	ldi	r25, 0x3F	; 63
    161a:	99 83       	std	Y+1, r25	; 0x01
    161c:	0d c0       	rjmp	.+26     	; 0x1638 <vfprintf+0x124>
    161e:	83 36       	cpi	r24, 0x63	; 99
    1620:	31 f0       	breq	.+12     	; 0x162e <vfprintf+0x11a>
    1622:	83 37       	cpi	r24, 0x73	; 115
    1624:	71 f0       	breq	.+28     	; 0x1642 <vfprintf+0x12e>
    1626:	83 35       	cpi	r24, 0x53	; 83
    1628:	09 f0       	breq	.+2      	; 0x162c <vfprintf+0x118>
    162a:	59 c0       	rjmp	.+178    	; 0x16de <vfprintf+0x1ca>
    162c:	21 c0       	rjmp	.+66     	; 0x1670 <vfprintf+0x15c>
    162e:	f8 01       	movw	r30, r16
    1630:	80 81       	ld	r24, Z
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	0e 5f       	subi	r16, 0xFE	; 254
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	88 24       	eor	r8, r8
    163a:	83 94       	inc	r8
    163c:	91 2c       	mov	r9, r1
    163e:	53 01       	movw	r10, r6
    1640:	13 c0       	rjmp	.+38     	; 0x1668 <vfprintf+0x154>
    1642:	28 01       	movw	r4, r16
    1644:	f2 e0       	ldi	r31, 0x02	; 2
    1646:	4f 0e       	add	r4, r31
    1648:	51 1c       	adc	r5, r1
    164a:	f8 01       	movw	r30, r16
    164c:	a0 80       	ld	r10, Z
    164e:	b1 80       	ldd	r11, Z+1	; 0x01
    1650:	36 fe       	sbrs	r3, 6
    1652:	03 c0       	rjmp	.+6      	; 0x165a <vfprintf+0x146>
    1654:	69 2d       	mov	r22, r9
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	02 c0       	rjmp	.+4      	; 0x165e <vfprintf+0x14a>
    165a:	6f ef       	ldi	r22, 0xFF	; 255
    165c:	7f ef       	ldi	r23, 0xFF	; 255
    165e:	c5 01       	movw	r24, r10
    1660:	0e 94 76 0c 	call	0x18ec	; 0x18ec <strnlen>
    1664:	4c 01       	movw	r8, r24
    1666:	82 01       	movw	r16, r4
    1668:	f3 2d       	mov	r31, r3
    166a:	ff 77       	andi	r31, 0x7F	; 127
    166c:	3f 2e       	mov	r3, r31
    166e:	16 c0       	rjmp	.+44     	; 0x169c <vfprintf+0x188>
    1670:	28 01       	movw	r4, r16
    1672:	22 e0       	ldi	r18, 0x02	; 2
    1674:	42 0e       	add	r4, r18
    1676:	51 1c       	adc	r5, r1
    1678:	f8 01       	movw	r30, r16
    167a:	a0 80       	ld	r10, Z
    167c:	b1 80       	ldd	r11, Z+1	; 0x01
    167e:	36 fe       	sbrs	r3, 6
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <vfprintf+0x174>
    1682:	69 2d       	mov	r22, r9
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	02 c0       	rjmp	.+4      	; 0x168c <vfprintf+0x178>
    1688:	6f ef       	ldi	r22, 0xFF	; 255
    168a:	7f ef       	ldi	r23, 0xFF	; 255
    168c:	c5 01       	movw	r24, r10
    168e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <strnlen_P>
    1692:	4c 01       	movw	r8, r24
    1694:	f3 2d       	mov	r31, r3
    1696:	f0 68       	ori	r31, 0x80	; 128
    1698:	3f 2e       	mov	r3, r31
    169a:	82 01       	movw	r16, r4
    169c:	33 fc       	sbrc	r3, 3
    169e:	1b c0       	rjmp	.+54     	; 0x16d6 <vfprintf+0x1c2>
    16a0:	82 2d       	mov	r24, r2
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	88 16       	cp	r8, r24
    16a6:	99 06       	cpc	r9, r25
    16a8:	b0 f4       	brcc	.+44     	; 0x16d6 <vfprintf+0x1c2>
    16aa:	b6 01       	movw	r22, r12
    16ac:	80 e2       	ldi	r24, 0x20	; 32
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    16b4:	2a 94       	dec	r2
    16b6:	f4 cf       	rjmp	.-24     	; 0x16a0 <vfprintf+0x18c>
    16b8:	f5 01       	movw	r30, r10
    16ba:	37 fc       	sbrc	r3, 7
    16bc:	85 91       	lpm	r24, Z+
    16be:	37 fe       	sbrs	r3, 7
    16c0:	81 91       	ld	r24, Z+
    16c2:	5f 01       	movw	r10, r30
    16c4:	b6 01       	movw	r22, r12
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    16cc:	21 10       	cpse	r2, r1
    16ce:	2a 94       	dec	r2
    16d0:	21 e0       	ldi	r18, 0x01	; 1
    16d2:	82 1a       	sub	r8, r18
    16d4:	91 08       	sbc	r9, r1
    16d6:	81 14       	cp	r8, r1
    16d8:	91 04       	cpc	r9, r1
    16da:	71 f7       	brne	.-36     	; 0x16b8 <vfprintf+0x1a4>
    16dc:	e8 c0       	rjmp	.+464    	; 0x18ae <vfprintf+0x39a>
    16de:	84 36       	cpi	r24, 0x64	; 100
    16e0:	11 f0       	breq	.+4      	; 0x16e6 <vfprintf+0x1d2>
    16e2:	89 36       	cpi	r24, 0x69	; 105
    16e4:	41 f5       	brne	.+80     	; 0x1736 <vfprintf+0x222>
    16e6:	f8 01       	movw	r30, r16
    16e8:	37 fe       	sbrs	r3, 7
    16ea:	07 c0       	rjmp	.+14     	; 0x16fa <vfprintf+0x1e6>
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	0c 5f       	subi	r16, 0xFC	; 252
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	08 c0       	rjmp	.+16     	; 0x170a <vfprintf+0x1f6>
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	07 2e       	mov	r0, r23
    1700:	00 0c       	add	r0, r0
    1702:	88 0b       	sbc	r24, r24
    1704:	99 0b       	sbc	r25, r25
    1706:	0e 5f       	subi	r16, 0xFE	; 254
    1708:	1f 4f       	sbci	r17, 0xFF	; 255
    170a:	f3 2d       	mov	r31, r3
    170c:	ff 76       	andi	r31, 0x6F	; 111
    170e:	3f 2e       	mov	r3, r31
    1710:	97 ff       	sbrs	r25, 7
    1712:	09 c0       	rjmp	.+18     	; 0x1726 <vfprintf+0x212>
    1714:	90 95       	com	r25
    1716:	80 95       	com	r24
    1718:	70 95       	com	r23
    171a:	61 95       	neg	r22
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	8f 4f       	sbci	r24, 0xFF	; 255
    1720:	9f 4f       	sbci	r25, 0xFF	; 255
    1722:	f0 68       	ori	r31, 0x80	; 128
    1724:	3f 2e       	mov	r3, r31
    1726:	2a e0       	ldi	r18, 0x0A	; 10
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	a3 01       	movw	r20, r6
    172c:	0e 94 bd 0c 	call	0x197a	; 0x197a <__ultoa_invert>
    1730:	88 2e       	mov	r8, r24
    1732:	86 18       	sub	r8, r6
    1734:	45 c0       	rjmp	.+138    	; 0x17c0 <vfprintf+0x2ac>
    1736:	85 37       	cpi	r24, 0x75	; 117
    1738:	31 f4       	brne	.+12     	; 0x1746 <vfprintf+0x232>
    173a:	23 2d       	mov	r18, r3
    173c:	2f 7e       	andi	r18, 0xEF	; 239
    173e:	b2 2e       	mov	r11, r18
    1740:	2a e0       	ldi	r18, 0x0A	; 10
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	25 c0       	rjmp	.+74     	; 0x1790 <vfprintf+0x27c>
    1746:	93 2d       	mov	r25, r3
    1748:	99 7f       	andi	r25, 0xF9	; 249
    174a:	b9 2e       	mov	r11, r25
    174c:	8f 36       	cpi	r24, 0x6F	; 111
    174e:	c1 f0       	breq	.+48     	; 0x1780 <vfprintf+0x26c>
    1750:	18 f4       	brcc	.+6      	; 0x1758 <vfprintf+0x244>
    1752:	88 35       	cpi	r24, 0x58	; 88
    1754:	79 f0       	breq	.+30     	; 0x1774 <vfprintf+0x260>
    1756:	b5 c0       	rjmp	.+362    	; 0x18c2 <vfprintf+0x3ae>
    1758:	80 37       	cpi	r24, 0x70	; 112
    175a:	19 f0       	breq	.+6      	; 0x1762 <vfprintf+0x24e>
    175c:	88 37       	cpi	r24, 0x78	; 120
    175e:	21 f0       	breq	.+8      	; 0x1768 <vfprintf+0x254>
    1760:	b0 c0       	rjmp	.+352    	; 0x18c2 <vfprintf+0x3ae>
    1762:	e9 2f       	mov	r30, r25
    1764:	e0 61       	ori	r30, 0x10	; 16
    1766:	be 2e       	mov	r11, r30
    1768:	b4 fe       	sbrs	r11, 4
    176a:	0d c0       	rjmp	.+26     	; 0x1786 <vfprintf+0x272>
    176c:	fb 2d       	mov	r31, r11
    176e:	f4 60       	ori	r31, 0x04	; 4
    1770:	bf 2e       	mov	r11, r31
    1772:	09 c0       	rjmp	.+18     	; 0x1786 <vfprintf+0x272>
    1774:	34 fe       	sbrs	r3, 4
    1776:	0a c0       	rjmp	.+20     	; 0x178c <vfprintf+0x278>
    1778:	29 2f       	mov	r18, r25
    177a:	26 60       	ori	r18, 0x06	; 6
    177c:	b2 2e       	mov	r11, r18
    177e:	06 c0       	rjmp	.+12     	; 0x178c <vfprintf+0x278>
    1780:	28 e0       	ldi	r18, 0x08	; 8
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	05 c0       	rjmp	.+10     	; 0x1790 <vfprintf+0x27c>
    1786:	20 e1       	ldi	r18, 0x10	; 16
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <vfprintf+0x27c>
    178c:	20 e1       	ldi	r18, 0x10	; 16
    178e:	32 e0       	ldi	r19, 0x02	; 2
    1790:	f8 01       	movw	r30, r16
    1792:	b7 fe       	sbrs	r11, 7
    1794:	07 c0       	rjmp	.+14     	; 0x17a4 <vfprintf+0x290>
    1796:	60 81       	ld	r22, Z
    1798:	71 81       	ldd	r23, Z+1	; 0x01
    179a:	82 81       	ldd	r24, Z+2	; 0x02
    179c:	93 81       	ldd	r25, Z+3	; 0x03
    179e:	0c 5f       	subi	r16, 0xFC	; 252
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	06 c0       	rjmp	.+12     	; 0x17b0 <vfprintf+0x29c>
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 5f       	subi	r16, 0xFE	; 254
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	a3 01       	movw	r20, r6
    17b2:	0e 94 bd 0c 	call	0x197a	; 0x197a <__ultoa_invert>
    17b6:	88 2e       	mov	r8, r24
    17b8:	86 18       	sub	r8, r6
    17ba:	fb 2d       	mov	r31, r11
    17bc:	ff 77       	andi	r31, 0x7F	; 127
    17be:	3f 2e       	mov	r3, r31
    17c0:	36 fe       	sbrs	r3, 6
    17c2:	0d c0       	rjmp	.+26     	; 0x17de <vfprintf+0x2ca>
    17c4:	23 2d       	mov	r18, r3
    17c6:	2e 7f       	andi	r18, 0xFE	; 254
    17c8:	a2 2e       	mov	r10, r18
    17ca:	89 14       	cp	r8, r9
    17cc:	58 f4       	brcc	.+22     	; 0x17e4 <vfprintf+0x2d0>
    17ce:	34 fe       	sbrs	r3, 4
    17d0:	0b c0       	rjmp	.+22     	; 0x17e8 <vfprintf+0x2d4>
    17d2:	32 fc       	sbrc	r3, 2
    17d4:	09 c0       	rjmp	.+18     	; 0x17e8 <vfprintf+0x2d4>
    17d6:	83 2d       	mov	r24, r3
    17d8:	8e 7e       	andi	r24, 0xEE	; 238
    17da:	a8 2e       	mov	r10, r24
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <vfprintf+0x2d4>
    17de:	b8 2c       	mov	r11, r8
    17e0:	a3 2c       	mov	r10, r3
    17e2:	03 c0       	rjmp	.+6      	; 0x17ea <vfprintf+0x2d6>
    17e4:	b8 2c       	mov	r11, r8
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <vfprintf+0x2d6>
    17e8:	b9 2c       	mov	r11, r9
    17ea:	a4 fe       	sbrs	r10, 4
    17ec:	0f c0       	rjmp	.+30     	; 0x180c <vfprintf+0x2f8>
    17ee:	fe 01       	movw	r30, r28
    17f0:	e8 0d       	add	r30, r8
    17f2:	f1 1d       	adc	r31, r1
    17f4:	80 81       	ld	r24, Z
    17f6:	80 33       	cpi	r24, 0x30	; 48
    17f8:	21 f4       	brne	.+8      	; 0x1802 <vfprintf+0x2ee>
    17fa:	9a 2d       	mov	r25, r10
    17fc:	99 7e       	andi	r25, 0xE9	; 233
    17fe:	a9 2e       	mov	r10, r25
    1800:	09 c0       	rjmp	.+18     	; 0x1814 <vfprintf+0x300>
    1802:	a2 fe       	sbrs	r10, 2
    1804:	06 c0       	rjmp	.+12     	; 0x1812 <vfprintf+0x2fe>
    1806:	b3 94       	inc	r11
    1808:	b3 94       	inc	r11
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <vfprintf+0x300>
    180c:	8a 2d       	mov	r24, r10
    180e:	86 78       	andi	r24, 0x86	; 134
    1810:	09 f0       	breq	.+2      	; 0x1814 <vfprintf+0x300>
    1812:	b3 94       	inc	r11
    1814:	a3 fc       	sbrc	r10, 3
    1816:	11 c0       	rjmp	.+34     	; 0x183a <vfprintf+0x326>
    1818:	a0 fe       	sbrs	r10, 0
    181a:	06 c0       	rjmp	.+12     	; 0x1828 <vfprintf+0x314>
    181c:	b2 14       	cp	r11, r2
    181e:	88 f4       	brcc	.+34     	; 0x1842 <vfprintf+0x32e>
    1820:	28 0c       	add	r2, r8
    1822:	92 2c       	mov	r9, r2
    1824:	9b 18       	sub	r9, r11
    1826:	0e c0       	rjmp	.+28     	; 0x1844 <vfprintf+0x330>
    1828:	b2 14       	cp	r11, r2
    182a:	60 f4       	brcc	.+24     	; 0x1844 <vfprintf+0x330>
    182c:	b6 01       	movw	r22, r12
    182e:	80 e2       	ldi	r24, 0x20	; 32
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1836:	b3 94       	inc	r11
    1838:	f7 cf       	rjmp	.-18     	; 0x1828 <vfprintf+0x314>
    183a:	b2 14       	cp	r11, r2
    183c:	18 f4       	brcc	.+6      	; 0x1844 <vfprintf+0x330>
    183e:	2b 18       	sub	r2, r11
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <vfprintf+0x332>
    1842:	98 2c       	mov	r9, r8
    1844:	21 2c       	mov	r2, r1
    1846:	a4 fe       	sbrs	r10, 4
    1848:	10 c0       	rjmp	.+32     	; 0x186a <vfprintf+0x356>
    184a:	b6 01       	movw	r22, r12
    184c:	80 e3       	ldi	r24, 0x30	; 48
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1854:	a2 fe       	sbrs	r10, 2
    1856:	17 c0       	rjmp	.+46     	; 0x1886 <vfprintf+0x372>
    1858:	a1 fc       	sbrc	r10, 1
    185a:	03 c0       	rjmp	.+6      	; 0x1862 <vfprintf+0x34e>
    185c:	88 e7       	ldi	r24, 0x78	; 120
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <vfprintf+0x352>
    1862:	88 e5       	ldi	r24, 0x58	; 88
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	b6 01       	movw	r22, r12
    1868:	0c c0       	rjmp	.+24     	; 0x1882 <vfprintf+0x36e>
    186a:	8a 2d       	mov	r24, r10
    186c:	86 78       	andi	r24, 0x86	; 134
    186e:	59 f0       	breq	.+22     	; 0x1886 <vfprintf+0x372>
    1870:	a1 fe       	sbrs	r10, 1
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <vfprintf+0x364>
    1874:	8b e2       	ldi	r24, 0x2B	; 43
    1876:	01 c0       	rjmp	.+2      	; 0x187a <vfprintf+0x366>
    1878:	80 e2       	ldi	r24, 0x20	; 32
    187a:	a7 fc       	sbrc	r10, 7
    187c:	8d e2       	ldi	r24, 0x2D	; 45
    187e:	b6 01       	movw	r22, r12
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1886:	89 14       	cp	r8, r9
    1888:	38 f4       	brcc	.+14     	; 0x1898 <vfprintf+0x384>
    188a:	b6 01       	movw	r22, r12
    188c:	80 e3       	ldi	r24, 0x30	; 48
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    1894:	9a 94       	dec	r9
    1896:	f7 cf       	rjmp	.-18     	; 0x1886 <vfprintf+0x372>
    1898:	8a 94       	dec	r8
    189a:	f3 01       	movw	r30, r6
    189c:	e8 0d       	add	r30, r8
    189e:	f1 1d       	adc	r31, r1
    18a0:	80 81       	ld	r24, Z
    18a2:	b6 01       	movw	r22, r12
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    18aa:	81 10       	cpse	r8, r1
    18ac:	f5 cf       	rjmp	.-22     	; 0x1898 <vfprintf+0x384>
    18ae:	22 20       	and	r2, r2
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <vfprintf+0x3a0>
    18b2:	42 ce       	rjmp	.-892    	; 0x1538 <vfprintf+0x24>
    18b4:	b6 01       	movw	r22, r12
    18b6:	80 e2       	ldi	r24, 0x20	; 32
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 94 81 0c 	call	0x1902	; 0x1902 <fputc>
    18be:	2a 94       	dec	r2
    18c0:	f6 cf       	rjmp	.-20     	; 0x18ae <vfprintf+0x39a>
    18c2:	f6 01       	movw	r30, r12
    18c4:	86 81       	ldd	r24, Z+6	; 0x06
    18c6:	97 81       	ldd	r25, Z+7	; 0x07
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <vfprintf+0x3ba>
    18ca:	8f ef       	ldi	r24, 0xFF	; 255
    18cc:	9f ef       	ldi	r25, 0xFF	; 255
    18ce:	2b 96       	adiw	r28, 0x0b	; 11
    18d0:	e2 e1       	ldi	r30, 0x12	; 18
    18d2:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__epilogue_restores__>

000018d6 <strnlen_P>:
    18d6:	fc 01       	movw	r30, r24
    18d8:	05 90       	lpm	r0, Z+
    18da:	61 50       	subi	r22, 0x01	; 1
    18dc:	70 40       	sbci	r23, 0x00	; 0
    18de:	01 10       	cpse	r0, r1
    18e0:	d8 f7       	brcc	.-10     	; 0x18d8 <strnlen_P+0x2>
    18e2:	80 95       	com	r24
    18e4:	90 95       	com	r25
    18e6:	8e 0f       	add	r24, r30
    18e8:	9f 1f       	adc	r25, r31
    18ea:	08 95       	ret

000018ec <strnlen>:
    18ec:	fc 01       	movw	r30, r24
    18ee:	61 50       	subi	r22, 0x01	; 1
    18f0:	70 40       	sbci	r23, 0x00	; 0
    18f2:	01 90       	ld	r0, Z+
    18f4:	01 10       	cpse	r0, r1
    18f6:	d8 f7       	brcc	.-10     	; 0x18ee <strnlen+0x2>
    18f8:	80 95       	com	r24
    18fa:	90 95       	com	r25
    18fc:	8e 0f       	add	r24, r30
    18fe:	9f 1f       	adc	r25, r31
    1900:	08 95       	ret

00001902 <fputc>:
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	fb 01       	movw	r30, r22
    190c:	23 81       	ldd	r18, Z+3	; 0x03
    190e:	21 fd       	sbrc	r18, 1
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <fputc+0x16>
    1912:	8f ef       	ldi	r24, 0xFF	; 255
    1914:	9f ef       	ldi	r25, 0xFF	; 255
    1916:	2c c0       	rjmp	.+88     	; 0x1970 <fputc+0x6e>
    1918:	22 ff       	sbrs	r18, 2
    191a:	16 c0       	rjmp	.+44     	; 0x1948 <fputc+0x46>
    191c:	46 81       	ldd	r20, Z+6	; 0x06
    191e:	57 81       	ldd	r21, Z+7	; 0x07
    1920:	24 81       	ldd	r18, Z+4	; 0x04
    1922:	35 81       	ldd	r19, Z+5	; 0x05
    1924:	42 17       	cp	r20, r18
    1926:	53 07       	cpc	r21, r19
    1928:	44 f4       	brge	.+16     	; 0x193a <fputc+0x38>
    192a:	a0 81       	ld	r26, Z
    192c:	b1 81       	ldd	r27, Z+1	; 0x01
    192e:	9d 01       	movw	r18, r26
    1930:	2f 5f       	subi	r18, 0xFF	; 255
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	31 83       	std	Z+1, r19	; 0x01
    1936:	20 83       	st	Z, r18
    1938:	8c 93       	st	X, r24
    193a:	26 81       	ldd	r18, Z+6	; 0x06
    193c:	37 81       	ldd	r19, Z+7	; 0x07
    193e:	2f 5f       	subi	r18, 0xFF	; 255
    1940:	3f 4f       	sbci	r19, 0xFF	; 255
    1942:	37 83       	std	Z+7, r19	; 0x07
    1944:	26 83       	std	Z+6, r18	; 0x06
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <fputc+0x6e>
    1948:	8b 01       	movw	r16, r22
    194a:	ec 01       	movw	r28, r24
    194c:	fb 01       	movw	r30, r22
    194e:	00 84       	ldd	r0, Z+8	; 0x08
    1950:	f1 85       	ldd	r31, Z+9	; 0x09
    1952:	e0 2d       	mov	r30, r0
    1954:	09 95       	icall
    1956:	89 2b       	or	r24, r25
    1958:	e1 f6       	brne	.-72     	; 0x1912 <fputc+0x10>
    195a:	d8 01       	movw	r26, r16
    195c:	16 96       	adiw	r26, 0x06	; 6
    195e:	8d 91       	ld	r24, X+
    1960:	9c 91       	ld	r25, X
    1962:	17 97       	sbiw	r26, 0x07	; 7
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	17 96       	adiw	r26, 0x07	; 7
    1968:	9c 93       	st	X, r25
    196a:	8e 93       	st	-X, r24
    196c:	16 97       	sbiw	r26, 0x06	; 6
    196e:	ce 01       	movw	r24, r28
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	08 95       	ret

0000197a <__ultoa_invert>:
    197a:	fa 01       	movw	r30, r20
    197c:	aa 27       	eor	r26, r26
    197e:	28 30       	cpi	r18, 0x08	; 8
    1980:	51 f1       	breq	.+84     	; 0x19d6 <__ultoa_invert+0x5c>
    1982:	20 31       	cpi	r18, 0x10	; 16
    1984:	81 f1       	breq	.+96     	; 0x19e6 <__ultoa_invert+0x6c>
    1986:	e8 94       	clt
    1988:	6f 93       	push	r22
    198a:	6e 7f       	andi	r22, 0xFE	; 254
    198c:	6e 5f       	subi	r22, 0xFE	; 254
    198e:	7f 4f       	sbci	r23, 0xFF	; 255
    1990:	8f 4f       	sbci	r24, 0xFF	; 255
    1992:	9f 4f       	sbci	r25, 0xFF	; 255
    1994:	af 4f       	sbci	r26, 0xFF	; 255
    1996:	b1 e0       	ldi	r27, 0x01	; 1
    1998:	3e d0       	rcall	.+124    	; 0x1a16 <__ultoa_invert+0x9c>
    199a:	b4 e0       	ldi	r27, 0x04	; 4
    199c:	3c d0       	rcall	.+120    	; 0x1a16 <__ultoa_invert+0x9c>
    199e:	67 0f       	add	r22, r23
    19a0:	78 1f       	adc	r23, r24
    19a2:	89 1f       	adc	r24, r25
    19a4:	9a 1f       	adc	r25, r26
    19a6:	a1 1d       	adc	r26, r1
    19a8:	68 0f       	add	r22, r24
    19aa:	79 1f       	adc	r23, r25
    19ac:	8a 1f       	adc	r24, r26
    19ae:	91 1d       	adc	r25, r1
    19b0:	a1 1d       	adc	r26, r1
    19b2:	6a 0f       	add	r22, r26
    19b4:	71 1d       	adc	r23, r1
    19b6:	81 1d       	adc	r24, r1
    19b8:	91 1d       	adc	r25, r1
    19ba:	a1 1d       	adc	r26, r1
    19bc:	20 d0       	rcall	.+64     	; 0x19fe <__ultoa_invert+0x84>
    19be:	09 f4       	brne	.+2      	; 0x19c2 <__ultoa_invert+0x48>
    19c0:	68 94       	set
    19c2:	3f 91       	pop	r19
    19c4:	2a e0       	ldi	r18, 0x0A	; 10
    19c6:	26 9f       	mul	r18, r22
    19c8:	11 24       	eor	r1, r1
    19ca:	30 19       	sub	r19, r0
    19cc:	30 5d       	subi	r19, 0xD0	; 208
    19ce:	31 93       	st	Z+, r19
    19d0:	de f6       	brtc	.-74     	; 0x1988 <__ultoa_invert+0xe>
    19d2:	cf 01       	movw	r24, r30
    19d4:	08 95       	ret
    19d6:	46 2f       	mov	r20, r22
    19d8:	47 70       	andi	r20, 0x07	; 7
    19da:	40 5d       	subi	r20, 0xD0	; 208
    19dc:	41 93       	st	Z+, r20
    19de:	b3 e0       	ldi	r27, 0x03	; 3
    19e0:	0f d0       	rcall	.+30     	; 0x1a00 <__ultoa_invert+0x86>
    19e2:	c9 f7       	brne	.-14     	; 0x19d6 <__ultoa_invert+0x5c>
    19e4:	f6 cf       	rjmp	.-20     	; 0x19d2 <__ultoa_invert+0x58>
    19e6:	46 2f       	mov	r20, r22
    19e8:	4f 70       	andi	r20, 0x0F	; 15
    19ea:	40 5d       	subi	r20, 0xD0	; 208
    19ec:	4a 33       	cpi	r20, 0x3A	; 58
    19ee:	18 f0       	brcs	.+6      	; 0x19f6 <__ultoa_invert+0x7c>
    19f0:	49 5d       	subi	r20, 0xD9	; 217
    19f2:	31 fd       	sbrc	r19, 1
    19f4:	40 52       	subi	r20, 0x20	; 32
    19f6:	41 93       	st	Z+, r20
    19f8:	02 d0       	rcall	.+4      	; 0x19fe <__ultoa_invert+0x84>
    19fa:	a9 f7       	brne	.-22     	; 0x19e6 <__ultoa_invert+0x6c>
    19fc:	ea cf       	rjmp	.-44     	; 0x19d2 <__ultoa_invert+0x58>
    19fe:	b4 e0       	ldi	r27, 0x04	; 4
    1a00:	a6 95       	lsr	r26
    1a02:	97 95       	ror	r25
    1a04:	87 95       	ror	r24
    1a06:	77 95       	ror	r23
    1a08:	67 95       	ror	r22
    1a0a:	ba 95       	dec	r27
    1a0c:	c9 f7       	brne	.-14     	; 0x1a00 <__ultoa_invert+0x86>
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	61 05       	cpc	r22, r1
    1a12:	71 05       	cpc	r23, r1
    1a14:	08 95       	ret
    1a16:	9b 01       	movw	r18, r22
    1a18:	ac 01       	movw	r20, r24
    1a1a:	0a 2e       	mov	r0, r26
    1a1c:	06 94       	lsr	r0
    1a1e:	57 95       	ror	r21
    1a20:	47 95       	ror	r20
    1a22:	37 95       	ror	r19
    1a24:	27 95       	ror	r18
    1a26:	ba 95       	dec	r27
    1a28:	c9 f7       	brne	.-14     	; 0x1a1c <__ultoa_invert+0xa2>
    1a2a:	62 0f       	add	r22, r18
    1a2c:	73 1f       	adc	r23, r19
    1a2e:	84 1f       	adc	r24, r20
    1a30:	95 1f       	adc	r25, r21
    1a32:	a0 1d       	adc	r26, r0
    1a34:	08 95       	ret

00001a36 <__divmodsi4>:
    1a36:	05 2e       	mov	r0, r21
    1a38:	97 fb       	bst	r25, 7
    1a3a:	1e f4       	brtc	.+6      	; 0x1a42 <__divmodsi4+0xc>
    1a3c:	00 94       	com	r0
    1a3e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <__negsi2>
    1a42:	57 fd       	sbrc	r21, 7
    1a44:	07 d0       	rcall	.+14     	; 0x1a54 <__divmodsi4_neg2>
    1a46:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__udivmodsi4>
    1a4a:	07 fc       	sbrc	r0, 7
    1a4c:	03 d0       	rcall	.+6      	; 0x1a54 <__divmodsi4_neg2>
    1a4e:	4e f4       	brtc	.+18     	; 0x1a62 <__divmodsi4_exit>
    1a50:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__negsi2>

00001a54 <__divmodsi4_neg2>:
    1a54:	50 95       	com	r21
    1a56:	40 95       	com	r20
    1a58:	30 95       	com	r19
    1a5a:	21 95       	neg	r18
    1a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5e:	4f 4f       	sbci	r20, 0xFF	; 255
    1a60:	5f 4f       	sbci	r21, 0xFF	; 255

00001a62 <__divmodsi4_exit>:
    1a62:	08 95       	ret

00001a64 <__negsi2>:
    1a64:	90 95       	com	r25
    1a66:	80 95       	com	r24
    1a68:	70 95       	com	r23
    1a6a:	61 95       	neg	r22
    1a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a70:	9f 4f       	sbci	r25, 0xFF	; 255
    1a72:	08 95       	ret

00001a74 <__muluhisi3>:
    1a74:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__umulhisi3>
    1a78:	a5 9f       	mul	r26, r21
    1a7a:	90 0d       	add	r25, r0
    1a7c:	b4 9f       	mul	r27, r20
    1a7e:	90 0d       	add	r25, r0
    1a80:	a4 9f       	mul	r26, r20
    1a82:	80 0d       	add	r24, r0
    1a84:	91 1d       	adc	r25, r1
    1a86:	11 24       	eor	r1, r1
    1a88:	08 95       	ret

00001a8a <__mulshisi3>:
    1a8a:	b7 ff       	sbrs	r27, 7
    1a8c:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__muluhisi3>

00001a90 <__mulohisi3>:
    1a90:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__muluhisi3>
    1a94:	82 1b       	sub	r24, r18
    1a96:	93 0b       	sbc	r25, r19
    1a98:	08 95       	ret

00001a9a <__prologue_saves__>:
    1a9a:	2f 92       	push	r2
    1a9c:	3f 92       	push	r3
    1a9e:	4f 92       	push	r4
    1aa0:	5f 92       	push	r5
    1aa2:	6f 92       	push	r6
    1aa4:	7f 92       	push	r7
    1aa6:	8f 92       	push	r8
    1aa8:	9f 92       	push	r9
    1aaa:	af 92       	push	r10
    1aac:	bf 92       	push	r11
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	ca 1b       	sub	r28, r26
    1ac4:	db 0b       	sbc	r29, r27
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	09 94       	ijmp

00001ad2 <__epilogue_restores__>:
    1ad2:	2a 88       	ldd	r2, Y+18	; 0x12
    1ad4:	39 88       	ldd	r3, Y+17	; 0x11
    1ad6:	48 88       	ldd	r4, Y+16	; 0x10
    1ad8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ada:	6e 84       	ldd	r6, Y+14	; 0x0e
    1adc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ade:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ae0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ae2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ae4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ae6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ae8:	df 80       	ldd	r13, Y+7	; 0x07
    1aea:	ee 80       	ldd	r14, Y+6	; 0x06
    1aec:	fd 80       	ldd	r15, Y+5	; 0x05
    1aee:	0c 81       	ldd	r16, Y+4	; 0x04
    1af0:	1b 81       	ldd	r17, Y+3	; 0x03
    1af2:	aa 81       	ldd	r26, Y+2	; 0x02
    1af4:	b9 81       	ldd	r27, Y+1	; 0x01
    1af6:	ce 0f       	add	r28, r30
    1af8:	d1 1d       	adc	r29, r1
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	ed 01       	movw	r28, r26
    1b06:	08 95       	ret

00001b08 <__udivmodsi4>:
    1b08:	a1 e2       	ldi	r26, 0x21	; 33
    1b0a:	1a 2e       	mov	r1, r26
    1b0c:	aa 1b       	sub	r26, r26
    1b0e:	bb 1b       	sub	r27, r27
    1b10:	fd 01       	movw	r30, r26
    1b12:	0d c0       	rjmp	.+26     	; 0x1b2e <__udivmodsi4_ep>

00001b14 <__udivmodsi4_loop>:
    1b14:	aa 1f       	adc	r26, r26
    1b16:	bb 1f       	adc	r27, r27
    1b18:	ee 1f       	adc	r30, r30
    1b1a:	ff 1f       	adc	r31, r31
    1b1c:	a2 17       	cp	r26, r18
    1b1e:	b3 07       	cpc	r27, r19
    1b20:	e4 07       	cpc	r30, r20
    1b22:	f5 07       	cpc	r31, r21
    1b24:	20 f0       	brcs	.+8      	; 0x1b2e <__udivmodsi4_ep>
    1b26:	a2 1b       	sub	r26, r18
    1b28:	b3 0b       	sbc	r27, r19
    1b2a:	e4 0b       	sbc	r30, r20
    1b2c:	f5 0b       	sbc	r31, r21

00001b2e <__udivmodsi4_ep>:
    1b2e:	66 1f       	adc	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	88 1f       	adc	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	1a 94       	dec	r1
    1b38:	69 f7       	brne	.-38     	; 0x1b14 <__udivmodsi4_loop>
    1b3a:	60 95       	com	r22
    1b3c:	70 95       	com	r23
    1b3e:	80 95       	com	r24
    1b40:	90 95       	com	r25
    1b42:	9b 01       	movw	r18, r22
    1b44:	ac 01       	movw	r20, r24
    1b46:	bd 01       	movw	r22, r26
    1b48:	cf 01       	movw	r24, r30
    1b4a:	08 95       	ret

00001b4c <__umulhisi3>:
    1b4c:	a2 9f       	mul	r26, r18
    1b4e:	b0 01       	movw	r22, r0
    1b50:	b3 9f       	mul	r27, r19
    1b52:	c0 01       	movw	r24, r0
    1b54:	a3 9f       	mul	r26, r19
    1b56:	70 0d       	add	r23, r0
    1b58:	81 1d       	adc	r24, r1
    1b5a:	11 24       	eor	r1, r1
    1b5c:	91 1d       	adc	r25, r1
    1b5e:	b2 9f       	mul	r27, r18
    1b60:	70 0d       	add	r23, r0
    1b62:	81 1d       	adc	r24, r1
    1b64:	11 24       	eor	r1, r1
    1b66:	91 1d       	adc	r25, r1
    1b68:	08 95       	ret

00001b6a <_exit>:
    1b6a:	f8 94       	cli

00001b6c <__stop_program>:
    1b6c:	ff cf       	rjmp	.-2      	; 0x1b6c <__stop_program>
