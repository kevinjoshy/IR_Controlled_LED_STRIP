
FinalProj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  000019e2  00001a76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001db  00800196  00800196  00001b0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002123  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dfe  00000000  00000000  00003ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f05  00000000  00000000  00004bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  00005ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073e  00000000  00000000  00005f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018bb  00000000  00000000  0000665e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00007f19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_1>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__vector_19>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e2 ee       	ldi	r30, 0xE2	; 226
      c8:	f9 e1       	ldi	r31, 0x19	; 25
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a6 39       	cpi	r26, 0x96	; 150
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	23 e0       	ldi	r18, 0x03	; 3
      d8:	a6 e9       	ldi	r26, 0x96	; 150
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a1 37       	cpi	r26, 0x71	; 113
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 c0 05 	call	0xb80	; 0xb80 <main>
      ea:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <SPI_LEDtransmit>:
			store_LED(LEDSTRIP, i, Brightness, 0, 0, 0);	// Clears LED[i]
		}
	}

	LED_Display(LEDSTRIP, NUM_LEDS);
}
      f2:	8e bd       	out	0x2e, r24	; 46
      f4:	0d b4       	in	r0, 0x2d	; 45
      f6:	07 fe       	sbrs	r0, 7
      f8:	fd cf       	rjmp	.-6      	; 0xf4 <SPI_LEDtransmit+0x2>
      fa:	08 95       	ret

000000fc <strip_init>:
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	0e c0       	rjmp	.+28     	; 0x11e <strip_init+0x22>
     102:	fc 01       	movw	r30, r24
     104:	e2 0f       	add	r30, r18
     106:	f3 1f       	adc	r31, r19
     108:	10 82       	st	Z, r1
     10a:	14 ae       	std	Z+60, r1	; 0x3c
     10c:	df 01       	movw	r26, r30
     10e:	a8 58       	subi	r26, 0x88	; 136
     110:	bf 4f       	sbci	r27, 0xFF	; 255
     112:	1c 92       	st	X, r1
     114:	ec 54       	subi	r30, 0x4C	; 76
     116:	ff 4f       	sbci	r31, 0xFF	; 255
     118:	10 82       	st	Z, r1
     11a:	2f 5f       	subi	r18, 0xFF	; 255
     11c:	3f 4f       	sbci	r19, 0xFF	; 255
     11e:	26 17       	cp	r18, r22
     120:	37 07       	cpc	r19, r23
     122:	7c f3       	brlt	.-34     	; 0x102 <strip_init+0x6>
     124:	08 95       	ret

00000126 <LED_StartSignal>:
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     13e:	08 95       	ret

00000140 <LED_EndSignal>:
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     146:	8f ef       	ldi	r24, 0xFF	; 255
     148:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     158:	08 95       	ret

0000015a <LED_ByteSend>:
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	c6 2f       	mov	r28, r22
     162:	d4 2f       	mov	r29, r20
     164:	12 2f       	mov	r17, r18
     166:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     16a:	81 2f       	mov	r24, r17
     16c:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     170:	8d 2f       	mov	r24, r29
     172:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     176:	8c 2f       	mov	r24, r28
     178:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	1f 91       	pop	r17
     182:	08 95       	ret

00000184 <StripCLR>:
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	ec 01       	movw	r28, r24
     18e:	8b 01       	movw	r16, r22
     190:	0e 94 93 00 	call	0x126	; 0x126 <LED_StartSignal>
     194:	b8 01       	movw	r22, r16
     196:	ce 01       	movw	r24, r28
     198:	0e 94 7e 00 	call	0xfc	; 0xfc <strip_init>
     19c:	c0 e0       	ldi	r28, 0x00	; 0
     19e:	d0 e0       	ldi	r29, 0x00	; 0
     1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <StripCLR+0x2c>
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_ByteSend>
     1ae:	21 96       	adiw	r28, 0x01	; 1
     1b0:	c0 17       	cp	r28, r16
     1b2:	d1 07       	cpc	r29, r17
     1b4:	b4 f3       	brlt	.-20     	; 0x1a2 <StripCLR+0x1e>
     1b6:	0e 94 a0 00 	call	0x140	; 0x140 <LED_EndSignal>
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	1f 91       	pop	r17
     1c0:	0f 91       	pop	r16
     1c2:	08 95       	ret

000001c4 <store_LED>:
     1c4:	ef 92       	push	r14
     1c6:	0f 93       	push	r16
     1c8:	6c 33       	cpi	r22, 0x3C	; 60
     1ca:	71 05       	cpc	r23, r1
     1cc:	68 f4       	brcc	.+26     	; 0x1e8 <store_LED+0x24>
     1ce:	fc 01       	movw	r30, r24
     1d0:	e6 0f       	add	r30, r22
     1d2:	f7 1f       	adc	r31, r23
     1d4:	40 83       	st	Z, r20
     1d6:	24 af       	std	Z+60, r18	; 0x3c
     1d8:	df 01       	movw	r26, r30
     1da:	a8 58       	subi	r26, 0x88	; 136
     1dc:	bf 4f       	sbci	r27, 0xFF	; 255
     1de:	0c 93       	st	X, r16
     1e0:	ec 54       	subi	r30, 0x4C	; 76
     1e2:	ff 4f       	sbci	r31, 0xFF	; 255
     1e4:	e0 82       	st	Z, r14
     1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <store_LED+0x2c>
     1e8:	8a e1       	ldi	r24, 0x1A	; 26
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	0e 94 94 09 	call	0x1328	; 0x1328 <puts>
     1f0:	0f 91       	pop	r16
     1f2:	ef 90       	pop	r14
     1f4:	08 95       	ret

000001f6 <LED_Display>:
     1f6:	cf 92       	push	r12
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	8c 01       	movw	r16, r24
     208:	7b 01       	movw	r14, r22
     20a:	0e 94 93 00 	call	0x126	; 0x126 <LED_StartSignal>
     20e:	c0 e0       	ldi	r28, 0x00	; 0
     210:	d0 e0       	ldi	r29, 0x00	; 0
     212:	c1 2c       	mov	r12, r1
     214:	d1 2c       	mov	r13, r1
     216:	21 c0       	rjmp	.+66     	; 0x25a <LED_Display+0x64>
     218:	f8 01       	movw	r30, r16
     21a:	ec 0f       	add	r30, r28
     21c:	fd 1f       	adc	r31, r29
     21e:	80 81       	ld	r24, Z
     220:	88 23       	and	r24, r24
     222:	a1 f0       	breq	.+40     	; 0x24c <LED_Display+0x56>
     224:	f8 01       	movw	r30, r16
     226:	ec 0f       	add	r30, r28
     228:	fd 1f       	adc	r31, r29
     22a:	9f 01       	movw	r18, r30
     22c:	2c 54       	subi	r18, 0x4C	; 76
     22e:	3f 4f       	sbci	r19, 0xFF	; 255
     230:	af 01       	movw	r20, r30
     232:	48 58       	subi	r20, 0x88	; 136
     234:	5f 4f       	sbci	r21, 0xFF	; 255
     236:	d9 01       	movw	r26, r18
     238:	2c 91       	ld	r18, X
     23a:	da 01       	movw	r26, r20
     23c:	4c 91       	ld	r20, X
     23e:	64 ad       	ldd	r22, Z+60	; 0x3c
     240:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_ByteSend>
     244:	cc 24       	eor	r12, r12
     246:	c3 94       	inc	r12
     248:	d1 2c       	mov	r13, r1
     24a:	06 c0       	rjmp	.+12     	; 0x258 <LED_Display+0x62>
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_ByteSend>
     258:	21 96       	adiw	r28, 0x01	; 1
     25a:	ce 15       	cp	r28, r14
     25c:	df 05       	cpc	r29, r15
     25e:	e4 f2       	brlt	.-72     	; 0x218 <LED_Display+0x22>
     260:	cd 28       	or	r12, r13
     262:	11 f0       	breq	.+4      	; 0x268 <LED_Display+0x72>
     264:	0e 94 a0 00 	call	0x140	; 0x140 <LED_EndSignal>
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	1f 91       	pop	r17
     26e:	0f 91       	pop	r16
     270:	ff 90       	pop	r15
     272:	ef 90       	pop	r14
     274:	df 90       	pop	r13
     276:	cf 90       	pop	r12
     278:	08 95       	ret

0000027a <rand_Pixel>:
// Returns a Random Pixel Value
uint8_t rand_Pixel(void) {
	uint8_t Pixel = rand() % (0xFF + 1);
     27a:	0e 94 3a 09 	call	0x1274	; 0x1274 <rand>
     27e:	90 78       	andi	r25, 0x80	; 128
     280:	99 23       	and	r25, r25
     282:	1c f4       	brge	.+6      	; 0x28a <rand_Pixel+0x10>
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	9f 6f       	ori	r25, 0xFF	; 255
     288:	01 96       	adiw	r24, 0x01	; 1
	return Pixel;
}
     28a:	08 95       	ret

0000028c <LED_Bounce_Pattern>:
// Creates Bouncing pattern between st and en (LED index 0 -> (NUM_LEDS - 1)). s-len::Snake Length
void LED_Bounce_Pattern(strip* LEDSTRIP, int st, int en, int s_len, int strip_len) {
     28c:	2f 92       	push	r2
     28e:	3f 92       	push	r3
     290:	4f 92       	push	r4
     292:	5f 92       	push	r5
     294:	6f 92       	push	r6
     296:	7f 92       	push	r7
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	00 d0       	rcall	.+0      	; 0x2b2 <LED_Bounce_Pattern+0x26>
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <LED_Bounce_Pattern+0x28>
     2b4:	1f 92       	push	r1
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	2c 01       	movw	r4, r24
     2bc:	5b 01       	movw	r10, r22
     2be:	4a 01       	movw	r8, r20
     2c0:	69 01       	movw	r12, r18
     2c2:	1b 83       	std	Y+3, r17	; 0x03
     2c4:	0a 83       	std	Y+2, r16	; 0x02
	int Brightness = 0xFF;
	int R = rand_Pixel();
     2c6:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     2ca:	89 83       	std	Y+1, r24	; 0x01
	int G = rand_Pixel();
     2cc:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     2d0:	f8 2e       	mov	r15, r24
	int B = rand_Pixel();
     2d2:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     2d6:	18 2f       	mov	r17, r24
	int path_len = en - st;
     2d8:	14 01       	movw	r2, r8
     2da:	2a 18       	sub	r2, r10
     2dc:	3b 08       	sbc	r3, r11
	int delay = 10;
	// Get snake moving forward
	for (int i = 0; i < path_len; i++) {
     2de:	61 2c       	mov	r6, r1
     2e0:	71 2c       	mov	r7, r1
     2e2:	39 c0       	rjmp	.+114    	; 0x356 <LED_Bounce_Pattern+0xca>
		// Populating Snake
		for (int j = 0; j < s_len; j++) {
			if ((j+i+st) <= en) {
     2e4:	6c 81       	ldd	r22, Y+4	; 0x04
     2e6:	7d 81       	ldd	r23, Y+5	; 0x05
     2e8:	66 0d       	add	r22, r6
     2ea:	77 1d       	adc	r23, r7
     2ec:	6a 0d       	add	r22, r10
     2ee:	7b 1d       	adc	r23, r11
     2f0:	86 16       	cp	r8, r22
     2f2:	97 06       	cpc	r9, r23
     2f4:	3c f0       	brlt	.+14     	; 0x304 <LED_Bounce_Pattern+0x78>
				store_LED(LEDSTRIP, i+j+st, Brightness, R, G, B);	// Start at st and goes to that en
     2f6:	e1 2e       	mov	r14, r17
     2f8:	0f 2d       	mov	r16, r15
     2fa:	29 81       	ldd	r18, Y+1	; 0x01
     2fc:	4f ef       	ldi	r20, 0xFF	; 255
     2fe:	c2 01       	movw	r24, r4
     300:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
	int path_len = en - st;
	int delay = 10;
	// Get snake moving forward
	for (int i = 0; i < path_len; i++) {
		// Populating Snake
		for (int j = 0; j < s_len; j++) {
     304:	8c 81       	ldd	r24, Y+4	; 0x04
     306:	9d 81       	ldd	r25, Y+5	; 0x05
     308:	01 96       	adiw	r24, 0x01	; 1
     30a:	9d 83       	std	Y+5, r25	; 0x05
     30c:	8c 83       	std	Y+4, r24	; 0x04
     30e:	02 c0       	rjmp	.+4      	; 0x314 <LED_Bounce_Pattern+0x88>
     310:	1d 82       	std	Y+5, r1	; 0x05
     312:	1c 82       	std	Y+4, r1	; 0x04
     314:	8c 81       	ldd	r24, Y+4	; 0x04
     316:	9d 81       	ldd	r25, Y+5	; 0x05
     318:	8c 15       	cp	r24, r12
     31a:	9d 05       	cpc	r25, r13
     31c:	1c f3       	brlt	.-58     	; 0x2e4 <LED_Bounce_Pattern+0x58>
			if ((j+i+st) <= en) {
				store_LED(LEDSTRIP, i+j+st, Brightness, R, G, B);	// Start at st and goes to that en
			}
		}
		LED_Display(LEDSTRIP, strip_len);
     31e:	6a 81       	ldd	r22, Y+2	; 0x02
     320:	7b 81       	ldd	r23, Y+3	; 0x03
     322:	c2 01       	movw	r24, r4
     324:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     328:	80 e4       	ldi	r24, 0x40	; 64
     32a:	9c e9       	ldi	r25, 0x9C	; 156
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <LED_Bounce_Pattern+0xa0>
		_delay_ms(delay);
		// End of Snake
		if ((i + st) <= (en - s_len)) {
     330:	b3 01       	movw	r22, r6
     332:	6a 0d       	add	r22, r10
     334:	7b 1d       	adc	r23, r11
     336:	c4 01       	movw	r24, r8
     338:	8c 19       	sub	r24, r12
     33a:	9d 09       	sbc	r25, r13
     33c:	86 17       	cp	r24, r22
     33e:	97 07       	cpc	r25, r23
     340:	3c f0       	brlt	.+14     	; 0x350 <LED_Bounce_Pattern+0xc4>
			store_LED(LEDSTRIP, i+st, Brightness, 0, 0, 0);
     342:	e1 2c       	mov	r14, r1
     344:	00 e0       	ldi	r16, 0x00	; 0
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	4f ef       	ldi	r20, 0xFF	; 255
     34a:	c2 01       	movw	r24, r4
     34c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
	int G = rand_Pixel();
	int B = rand_Pixel();
	int path_len = en - st;
	int delay = 10;
	// Get snake moving forward
	for (int i = 0; i < path_len; i++) {
     350:	9f ef       	ldi	r25, 0xFF	; 255
     352:	69 1a       	sub	r6, r25
     354:	79 0a       	sbc	r7, r25
     356:	62 14       	cp	r6, r2
     358:	73 04       	cpc	r7, r3
     35a:	d4 f2       	brlt	.-76     	; 0x310 <LED_Bounce_Pattern+0x84>
     35c:	61 2c       	mov	r6, r1
     35e:	71 2c       	mov	r7, r1
     360:	3c c0       	rjmp	.+120    	; 0x3da <LED_Bounce_Pattern+0x14e>
	}
	// Get snake moving backward
	for (int i = 0; (-1)*i < path_len; i--) {
		// Populating Snake
		for (int j = 0; (-1)*j < s_len; j--) {
			if (i+j+en >= st) {
     362:	6c 81       	ldd	r22, Y+4	; 0x04
     364:	7d 81       	ldd	r23, Y+5	; 0x05
     366:	66 0d       	add	r22, r6
     368:	77 1d       	adc	r23, r7
     36a:	68 0d       	add	r22, r8
     36c:	79 1d       	adc	r23, r9
     36e:	6a 15       	cp	r22, r10
     370:	7b 05       	cpc	r23, r11
     372:	3c f0       	brlt	.+14     	; 0x382 <LED_Bounce_Pattern+0xf6>
				store_LED(LEDSTRIP, i+j+en, Brightness, R, G, B);	// Start at en and goes to that st
     374:	e1 2e       	mov	r14, r17
     376:	0f 2d       	mov	r16, r15
     378:	29 81       	ldd	r18, Y+1	; 0x01
     37a:	4f ef       	ldi	r20, 0xFF	; 255
     37c:	c2 01       	movw	r24, r4
     37e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		}
	}
	// Get snake moving backward
	for (int i = 0; (-1)*i < path_len; i--) {
		// Populating Snake
		for (int j = 0; (-1)*j < s_len; j--) {
     382:	8c 81       	ldd	r24, Y+4	; 0x04
     384:	9d 81       	ldd	r25, Y+5	; 0x05
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	9d 83       	std	Y+5, r25	; 0x05
     38a:	8c 83       	std	Y+4, r24	; 0x04
     38c:	02 c0       	rjmp	.+4      	; 0x392 <LED_Bounce_Pattern+0x106>
     38e:	1d 82       	std	Y+5, r1	; 0x05
     390:	1c 82       	std	Y+4, r1	; 0x04
     392:	8c 81       	ldd	r24, Y+4	; 0x04
     394:	9d 81       	ldd	r25, Y+5	; 0x05
     396:	91 95       	neg	r25
     398:	81 95       	neg	r24
     39a:	91 09       	sbc	r25, r1
     39c:	8c 15       	cp	r24, r12
     39e:	9d 05       	cpc	r25, r13
     3a0:	04 f3       	brlt	.-64     	; 0x362 <LED_Bounce_Pattern+0xd6>
			if (i+j+en >= st) {
				store_LED(LEDSTRIP, i+j+en, Brightness, R, G, B);	// Start at en and goes to that st
			}
		}
		LED_Display(LEDSTRIP, strip_len);
     3a2:	6a 81       	ldd	r22, Y+2	; 0x02
     3a4:	7b 81       	ldd	r23, Y+3	; 0x03
     3a6:	c2 01       	movw	r24, r4
     3a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
     3ac:	80 e4       	ldi	r24, 0x40	; 64
     3ae:	9c e9       	ldi	r25, 0x9C	; 156
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LED_Bounce_Pattern+0x124>
		_delay_ms(delay);
		// End of Snake
		if ((i + en) >= (st + s_len)) {
     3b4:	b3 01       	movw	r22, r6
     3b6:	68 0d       	add	r22, r8
     3b8:	79 1d       	adc	r23, r9
     3ba:	c5 01       	movw	r24, r10
     3bc:	8c 0d       	add	r24, r12
     3be:	9d 1d       	adc	r25, r13
     3c0:	68 17       	cp	r22, r24
     3c2:	79 07       	cpc	r23, r25
     3c4:	3c f0       	brlt	.+14     	; 0x3d4 <LED_Bounce_Pattern+0x148>
			store_LED(LEDSTRIP, i+en, Brightness, 0, 0, 0);
     3c6:	e1 2c       	mov	r14, r1
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	4f ef       	ldi	r20, 0xFF	; 255
     3ce:	c2 01       	movw	r24, r4
     3d0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		if ((i + st) <= (en - s_len)) {
			store_LED(LEDSTRIP, i+st, Brightness, 0, 0, 0);
		}
	}
	// Get snake moving backward
	for (int i = 0; (-1)*i < path_len; i--) {
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	69 1a       	sub	r6, r25
     3d8:	71 08       	sbc	r7, r1
     3da:	88 27       	eor	r24, r24
     3dc:	99 27       	eor	r25, r25
     3de:	86 19       	sub	r24, r6
     3e0:	97 09       	sbc	r25, r7
     3e2:	82 15       	cp	r24, r2
     3e4:	93 05       	cpc	r25, r3
     3e6:	9c f2       	brlt	.-90     	; 0x38e <LED_Bounce_Pattern+0x102>
		if ((i + en) >= (st + s_len)) {
			store_LED(LEDSTRIP, i+en, Brightness, 0, 0, 0);
		}
	}
	
}
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	ff 90       	pop	r15
     3fc:	ef 90       	pop	r14
     3fe:	df 90       	pop	r13
     400:	cf 90       	pop	r12
     402:	bf 90       	pop	r11
     404:	af 90       	pop	r10
     406:	9f 90       	pop	r9
     408:	8f 90       	pop	r8
     40a:	7f 90       	pop	r7
     40c:	6f 90       	pop	r6
     40e:	5f 90       	pop	r5
     410:	4f 90       	pop	r4
     412:	3f 90       	pop	r3
     414:	2f 90       	pop	r2
     416:	08 95       	ret

00000418 <LED_Rand_Pattern>:
// Creates Completely Random Pattern on LEDSTRIP
void LED_Rand_Pattern(strip* LEDSTRIP, int strip_len, int delay) {
     418:	8f 92       	push	r8
     41a:	9f 92       	push	r9
     41c:	af 92       	push	r10
     41e:	bf 92       	push	r11
     420:	cf 92       	push	r12
     422:	df 92       	push	r13
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	0f 93       	push	r16
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	6c 01       	movw	r12, r24
     432:	7b 01       	movw	r14, r22
     434:	5a 01       	movw	r10, r20
	for (int i = 0; i < strip_len; i++) {
     436:	00 e0       	ldi	r16, 0x00	; 0
     438:	10 e0       	ldi	r17, 0x00	; 0
     43a:	16 c0       	rjmp	.+44     	; 0x468 <LED_Rand_Pattern+0x50>
		LEDSTRIP->Brightness[i] = rand_Pixel();
     43c:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     440:	e6 01       	movw	r28, r12
     442:	c0 0f       	add	r28, r16
     444:	d1 1f       	adc	r29, r17
     446:	88 83       	st	Y, r24
		LEDSTRIP->R[i]			= rand_Pixel();
     448:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     44c:	8c af       	std	Y+60, r24	; 0x3c
		LEDSTRIP->G[i]			= rand_Pixel();
     44e:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     452:	fe 01       	movw	r30, r28
     454:	e8 58       	subi	r30, 0x88	; 136
     456:	ff 4f       	sbci	r31, 0xFF	; 255
     458:	80 83       	st	Z, r24
		LEDSTRIP->B[i]			= rand_Pixel();
     45a:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     45e:	cc 54       	subi	r28, 0x4C	; 76
     460:	df 4f       	sbci	r29, 0xFF	; 255
     462:	88 83       	st	Y, r24
	}
	
}
// Creates Completely Random Pattern on LEDSTRIP
void LED_Rand_Pattern(strip* LEDSTRIP, int strip_len, int delay) {
	for (int i = 0; i < strip_len; i++) {
     464:	0f 5f       	subi	r16, 0xFF	; 255
     466:	1f 4f       	sbci	r17, 0xFF	; 255
     468:	0e 15       	cp	r16, r14
     46a:	1f 05       	cpc	r17, r15
     46c:	3c f3       	brlt	.-50     	; 0x43c <LED_Rand_Pattern+0x24>
		LEDSTRIP->Brightness[i] = rand_Pixel();
		LEDSTRIP->R[i]			= rand_Pixel();
		LEDSTRIP->G[i]			= rand_Pixel();
		LEDSTRIP->B[i]			= rand_Pixel();
	}
	LED_Display(LEDSTRIP, strip_len);
     46e:	b7 01       	movw	r22, r14
     470:	c6 01       	movw	r24, r12
     472:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
	_delay_ms(delay);
     476:	b5 01       	movw	r22, r10
     478:	bb 0c       	add	r11, r11
     47a:	88 0b       	sbc	r24, r24
     47c:	99 0b       	sbc	r25, r25
     47e:	0e 94 cc 07 	call	0xf98	; 0xf98 <__floatsisf>
     482:	4b 01       	movw	r8, r22
     484:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	4a e7       	ldi	r20, 0x7A	; 122
     48c:	55 e4       	ldi	r21, 0x45	; 69
     48e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__mulsf3>
     492:	6b 01       	movw	r12, r22
     494:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	40 e8       	ldi	r20, 0x80	; 128
     49c:	5f e3       	ldi	r21, 0x3F	; 63
     49e:	0e 94 96 07 	call	0xf2c	; 0xf2c <__cmpsf2>
     4a2:	88 23       	and	r24, r24
     4a4:	24 f1       	brlt	.+72     	; 0x4ee <LED_Rand_Pattern+0xd6>
		__ticks = 1;
	else if (__tmp > 65535)
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	3f ef       	ldi	r19, 0xFF	; 255
     4aa:	4f e7       	ldi	r20, 0x7F	; 127
     4ac:	57 e4       	ldi	r21, 0x47	; 71
     4ae:	c7 01       	movw	r24, r14
     4b0:	b6 01       	movw	r22, r12
     4b2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__gesf2>
     4b6:	18 16       	cp	r1, r24
     4b8:	ac f4       	brge	.+42     	; 0x4e4 <LED_Rand_Pattern+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	40 e2       	ldi	r20, 0x20	; 32
     4c0:	51 e4       	ldi	r21, 0x41	; 65
     4c2:	c5 01       	movw	r24, r10
     4c4:	b4 01       	movw	r22, r8
     4c6:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__mulsf3>
     4ca:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixunssfsi>
     4ce:	06 c0       	rjmp	.+12     	; 0x4dc <LED_Rand_Pattern+0xc4>
     4d0:	80 e9       	ldi	r24, 0x90	; 144
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LED_Rand_Pattern+0xbc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d8:	61 50       	subi	r22, 0x01	; 1
     4da:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	b9 f7       	brne	.-18     	; 0x4d0 <LED_Rand_Pattern+0xb8>
     4e2:	0a c0       	rjmp	.+20     	; 0x4f8 <LED_Rand_Pattern+0xe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4e4:	c7 01       	movw	r24, r14
     4e6:	b6 01       	movw	r22, r12
     4e8:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixunssfsi>
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <LED_Rand_Pattern+0xda>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	cb 01       	movw	r24, r22
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LED_Rand_Pattern+0xdc>
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	df 90       	pop	r13
     506:	cf 90       	pop	r12
     508:	bf 90       	pop	r11
     50a:	af 90       	pop	r10
     50c:	9f 90       	pop	r9
     50e:	8f 90       	pop	r8
     510:	08 95       	ret

00000512 <LED_Out2InPattern>:
// Out to in pattern
void LED_Out2InPattern(strip* LEDSTRIP, int strip_len, int delay) {
     512:	2f 92       	push	r2
     514:	3f 92       	push	r3
     516:	4f 92       	push	r4
     518:	5f 92       	push	r5
     51a:	6f 92       	push	r6
     51c:	7f 92       	push	r7
     51e:	8f 92       	push	r8
     520:	9f 92       	push	r9
     522:	af 92       	push	r10
     524:	bf 92       	push	r11
     526:	cf 92       	push	r12
     528:	df 92       	push	r13
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	27 97       	sbiw	r28, 0x07	; 7
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	6c 01       	movw	r12, r24
     548:	1b 01       	movw	r2, r22
     54a:	5a 01       	movw	r10, r20
	int left  =  0;
	int right = 59;
	uint8_t Brightness = 0xFF;
	uint8_t R = rand_Pixel();
     54c:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     550:	18 2f       	mov	r17, r24
	uint8_t G = rand_Pixel();
     552:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     556:	f8 2e       	mov	r15, r24
	uint8_t B = rand_Pixel();
     558:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     55c:	8d 83       	std	Y+5, r24	; 0x05
	_delay_ms(delay);
}
// Out to in pattern
void LED_Out2InPattern(strip* LEDSTRIP, int strip_len, int delay) {
	int left  =  0;
	int right = 59;
     55e:	0f 2e       	mov	r0, r31
     560:	fb e3       	ldi	r31, 0x3B	; 59
     562:	8f 2e       	mov	r8, r31
     564:	91 2c       	mov	r9, r1
     566:	f0 2d       	mov	r31, r0
	LED_Display(LEDSTRIP, strip_len);
	_delay_ms(delay);
}
// Out to in pattern
void LED_Out2InPattern(strip* LEDSTRIP, int strip_len, int delay) {
	int left  =  0;
     568:	1f 82       	std	Y+7, r1	; 0x07
     56a:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t Brightness = 0xFF;
	uint8_t R = rand_Pixel();
	uint8_t G = rand_Pixel();
	uint8_t B = rand_Pixel();
	while (1) {	// Out 2 In
		store_LED(LEDSTRIP, left, Brightness, R,  G,  B);
     56c:	ed 80       	ldd	r14, Y+5	; 0x05
     56e:	0f 2d       	mov	r16, r15
     570:	21 2f       	mov	r18, r17
     572:	4f ef       	ldi	r20, 0xFF	; 255
     574:	6e 81       	ldd	r22, Y+6	; 0x06
     576:	7f 81       	ldd	r23, Y+7	; 0x07
     578:	c6 01       	movw	r24, r12
     57a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		store_LED(LEDSTRIP, right, Brightness,  R,  G,  B);
     57e:	ed 80       	ldd	r14, Y+5	; 0x05
     580:	21 2f       	mov	r18, r17
     582:	4f ef       	ldi	r20, 0xFF	; 255
     584:	b4 01       	movw	r22, r8
     586:	c6 01       	movw	r24, r12
     588:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		left++;
     58c:	8e 81       	ldd	r24, Y+6	; 0x06
     58e:	9f 81       	ldd	r25, Y+7	; 0x07
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	9f 83       	std	Y+7, r25	; 0x07
     594:	8e 83       	std	Y+6, r24	; 0x06
		right--;
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	89 1a       	sub	r8, r25
     59a:	91 08       	sbc	r9, r1
		LED_Display(LEDSTRIP, strip_len);
     59c:	b1 01       	movw	r22, r2
     59e:	c6 01       	movw	r24, r12
     5a0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
		if (left == 29) break;
     5a4:	8e 81       	ldd	r24, Y+6	; 0x06
     5a6:	9f 81       	ldd	r25, Y+7	; 0x07
     5a8:	4d 97       	sbiw	r24, 0x1d	; 29
     5aa:	09 f4       	brne	.+2      	; 0x5ae <LED_Out2InPattern+0x9c>
     5ac:	47 c0       	rjmp	.+142    	; 0x63c <LED_Out2InPattern+0x12a>
		_delay_ms(delay);
     5ae:	b5 01       	movw	r22, r10
     5b0:	0b 2c       	mov	r0, r11
     5b2:	00 0c       	add	r0, r0
     5b4:	88 0b       	sbc	r24, r24
     5b6:	99 0b       	sbc	r25, r25
     5b8:	0e 94 cc 07 	call	0xf98	; 0xf98 <__floatsisf>
     5bc:	69 83       	std	Y+1, r22	; 0x01
     5be:	7a 83       	std	Y+2, r23	; 0x02
     5c0:	8b 83       	std	Y+3, r24	; 0x03
     5c2:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	4a e7       	ldi	r20, 0x7A	; 122
     5ca:	55 e4       	ldi	r21, 0x45	; 69
     5cc:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__mulsf3>
     5d0:	2b 01       	movw	r4, r22
     5d2:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 e8       	ldi	r20, 0x80	; 128
     5da:	5f e3       	ldi	r21, 0x3F	; 63
     5dc:	0e 94 96 07 	call	0xf2c	; 0xf2c <__cmpsf2>
     5e0:	88 23       	and	r24, r24
     5e2:	34 f1       	brlt	.+76     	; 0x630 <LED_Out2InPattern+0x11e>
		__ticks = 1;
	else if (__tmp > 65535)
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	3f ef       	ldi	r19, 0xFF	; 255
     5e8:	4f e7       	ldi	r20, 0x7F	; 127
     5ea:	57 e4       	ldi	r21, 0x47	; 71
     5ec:	c3 01       	movw	r24, r6
     5ee:	b2 01       	movw	r22, r4
     5f0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__gesf2>
     5f4:	18 16       	cp	r1, r24
     5f6:	bc f4       	brge	.+46     	; 0x626 <LED_Out2InPattern+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 e2       	ldi	r20, 0x20	; 32
     5fe:	51 e4       	ldi	r21, 0x41	; 65
     600:	69 81       	ldd	r22, Y+1	; 0x01
     602:	7a 81       	ldd	r23, Y+2	; 0x02
     604:	8b 81       	ldd	r24, Y+3	; 0x03
     606:	9c 81       	ldd	r25, Y+4	; 0x04
     608:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__mulsf3>
     60c:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixunssfsi>
     610:	06 c0       	rjmp	.+12     	; 0x61e <LED_Out2InPattern+0x10c>
     612:	80 e9       	ldi	r24, 0x90	; 144
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	01 97       	sbiw	r24, 0x01	; 1
     618:	f1 f7       	brne	.-4      	; 0x616 <LED_Out2InPattern+0x104>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     61a:	61 50       	subi	r22, 0x01	; 1
     61c:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     61e:	61 15       	cp	r22, r1
     620:	71 05       	cpc	r23, r1
     622:	b9 f7       	brne	.-18     	; 0x612 <LED_Out2InPattern+0x100>
     624:	a3 cf       	rjmp	.-186    	; 0x56c <LED_Out2InPattern+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     626:	c3 01       	movw	r24, r6
     628:	b2 01       	movw	r22, r4
     62a:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixunssfsi>
     62e:	02 c0       	rjmp	.+4      	; 0x634 <LED_Out2InPattern+0x122>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	cb 01       	movw	r24, r22
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <LED_Out2InPattern+0x124>
     63a:	98 cf       	rjmp	.-208    	; 0x56c <LED_Out2InPattern+0x5a>
	}
	left  = 29;
	right = 30;
	R = rand_Pixel();
     63c:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     640:	18 2f       	mov	r17, r24
	G = rand_Pixel();
     642:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     646:	f8 2e       	mov	r15, r24
	B = rand_Pixel();
     648:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     64c:	8d 83       	std	Y+5, r24	; 0x05
		LED_Display(LEDSTRIP, strip_len);
		if (left == 29) break;
		_delay_ms(delay);
	}
	left  = 29;
	right = 30;
     64e:	0f 2e       	mov	r0, r31
     650:	fe e1       	ldi	r31, 0x1E	; 30
     652:	8f 2e       	mov	r8, r31
     654:	91 2c       	mov	r9, r1
     656:	f0 2d       	mov	r31, r0
	R = rand_Pixel();
	G = rand_Pixel();
	B = rand_Pixel();
	while (1) {	// In 2 Out
		store_LED(LEDSTRIP, left, Brightness, R,  G,  B);
     658:	ed 80       	ldd	r14, Y+5	; 0x05
     65a:	0f 2d       	mov	r16, r15
     65c:	21 2f       	mov	r18, r17
     65e:	4f ef       	ldi	r20, 0xFF	; 255
     660:	6e 81       	ldd	r22, Y+6	; 0x06
     662:	7f 81       	ldd	r23, Y+7	; 0x07
     664:	c6 01       	movw	r24, r12
     666:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		store_LED(LEDSTRIP, right, Brightness,  R,  G,  B);
     66a:	ed 80       	ldd	r14, Y+5	; 0x05
     66c:	21 2f       	mov	r18, r17
     66e:	4f ef       	ldi	r20, 0xFF	; 255
     670:	b4 01       	movw	r22, r8
     672:	c6 01       	movw	r24, r12
     674:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		left --;
     678:	8e 81       	ldd	r24, Y+6	; 0x06
     67a:	9f 81       	ldd	r25, Y+7	; 0x07
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	9f 83       	std	Y+7, r25	; 0x07
     680:	8e 83       	std	Y+6, r24	; 0x06
		right++;
     682:	9f ef       	ldi	r25, 0xFF	; 255
     684:	89 1a       	sub	r8, r25
     686:	99 0a       	sbc	r9, r25
		LED_Display(LEDSTRIP, strip_len);
     688:	b1 01       	movw	r22, r2
     68a:	c6 01       	movw	r24, r12
     68c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
		if (left == 0) break;
     690:	8e 81       	ldd	r24, Y+6	; 0x06
     692:	9f 81       	ldd	r25, Y+7	; 0x07
     694:	89 2b       	or	r24, r25
     696:	09 f4       	brne	.+2      	; 0x69a <LED_Out2InPattern+0x188>
     698:	47 c0       	rjmp	.+142    	; 0x728 <LED_Out2InPattern+0x216>
		_delay_ms(delay);
     69a:	b5 01       	movw	r22, r10
     69c:	0b 2c       	mov	r0, r11
     69e:	00 0c       	add	r0, r0
     6a0:	88 0b       	sbc	r24, r24
     6a2:	99 0b       	sbc	r25, r25
     6a4:	0e 94 cc 07 	call	0xf98	; 0xf98 <__floatsisf>
     6a8:	69 83       	std	Y+1, r22	; 0x01
     6aa:	7a 83       	std	Y+2, r23	; 0x02
     6ac:	8b 83       	std	Y+3, r24	; 0x03
     6ae:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	4a e7       	ldi	r20, 0x7A	; 122
     6b6:	55 e4       	ldi	r21, 0x45	; 69
     6b8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__mulsf3>
     6bc:	2b 01       	movw	r4, r22
     6be:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e8       	ldi	r20, 0x80	; 128
     6c6:	5f e3       	ldi	r21, 0x3F	; 63
     6c8:	0e 94 96 07 	call	0xf2c	; 0xf2c <__cmpsf2>
     6cc:	88 23       	and	r24, r24
     6ce:	34 f1       	brlt	.+76     	; 0x71c <LED_Out2InPattern+0x20a>
		__ticks = 1;
	else if (__tmp > 65535)
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	3f ef       	ldi	r19, 0xFF	; 255
     6d4:	4f e7       	ldi	r20, 0x7F	; 127
     6d6:	57 e4       	ldi	r21, 0x47	; 71
     6d8:	c3 01       	movw	r24, r6
     6da:	b2 01       	movw	r22, r4
     6dc:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__gesf2>
     6e0:	18 16       	cp	r1, r24
     6e2:	bc f4       	brge	.+46     	; 0x712 <LED_Out2InPattern+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	40 e2       	ldi	r20, 0x20	; 32
     6ea:	51 e4       	ldi	r21, 0x41	; 65
     6ec:	69 81       	ldd	r22, Y+1	; 0x01
     6ee:	7a 81       	ldd	r23, Y+2	; 0x02
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__mulsf3>
     6f8:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixunssfsi>
     6fc:	06 c0       	rjmp	.+12     	; 0x70a <LED_Out2InPattern+0x1f8>
     6fe:	80 e9       	ldi	r24, 0x90	; 144
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	f1 f7       	brne	.-4      	; 0x702 <LED_Out2InPattern+0x1f0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     706:	61 50       	subi	r22, 0x01	; 1
     708:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     70a:	61 15       	cp	r22, r1
     70c:	71 05       	cpc	r23, r1
     70e:	b9 f7       	brne	.-18     	; 0x6fe <LED_Out2InPattern+0x1ec>
     710:	a3 cf       	rjmp	.-186    	; 0x658 <LED_Out2InPattern+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     712:	c3 01       	movw	r24, r6
     714:	b2 01       	movw	r22, r4
     716:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fixunssfsi>
     71a:	02 c0       	rjmp	.+4      	; 0x720 <LED_Out2InPattern+0x20e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	cb 01       	movw	r24, r22
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <LED_Out2InPattern+0x210>
     726:	98 cf       	rjmp	.-208    	; 0x658 <LED_Out2InPattern+0x146>
	}
     728:	27 96       	adiw	r28, 0x07	; 7
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	cf 90       	pop	r12
     744:	bf 90       	pop	r11
     746:	af 90       	pop	r10
     748:	9f 90       	pop	r9
     74a:	8f 90       	pop	r8
     74c:	7f 90       	pop	r7
     74e:	6f 90       	pop	r6
     750:	5f 90       	pop	r5
     752:	4f 90       	pop	r4
     754:	3f 90       	pop	r3
     756:	2f 90       	pop	r2
     758:	08 95       	ret

0000075a <SPI_MasterInit>:
#define SPI_SS		2	// Unused No SS for LEDSTRIP SPI Connection
#define SPI_MOSI	3
#define SPI_MISO	4	// Unused Slave doesn't return data
#define SPI_SCK		5
void SPI_MasterInit(void) {
	SPI_DDR = (1<<SPI_SS) | (1<<SPI_MOSI) | (1<<SPI_SCK);	/* Set SS, MOSI and SCK output, all others input */
     75a:	8c e2       	ldi	r24, 0x2C	; 44
     75c:	84 b9       	out	0x04, r24	; 4
	SPCR0 = (1<<SPE) | (1<<MSTR) | (0<<SPR1) | (0<<SPR0);	/* Enable SPI, Master, set clock rate fclk/4 = 4 MHz */
     75e:	80 e5       	ldi	r24, 0x50	; 80
     760:	8c bd       	out	0x2c, r24	; 44
     762:	08 95       	ret

00000764 <InitTimer1>:
}
// 100us timer to detect period length between signal pulse
void InitTimer1(void) {	// ISR every 100us | 200 * 8 / (1.6 * (10^7) ) thus 200 - 1 = 199 || 100 us = 0.1 ms
	TCCR1B |=   (1<<WGM12);			// Turn on clear-on-match with OCR1A
     764:	e1 e8       	ldi	r30, 0x81	; 129
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	88 60       	ori	r24, 0x08	; 8
     76c:	80 83       	st	Z, r24
	OCR1A   =        65535;			// Max 16 bit timer
     76e:	8f ef       	ldi	r24, 0xFF	; 255
     770:	9f ef       	ldi	r25, 0xFF	; 255
     772:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     776:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |=    (1<<CS11);			// fast PWM with TOP = OCR1A, prescalar = 8
     77a:	80 81       	ld	r24, Z
     77c:	82 60       	ori	r24, 0x02	; 2
     77e:	80 83       	st	Z, r24
     780:	08 95       	ret

00000782 <__vector_1>:
}
// ISR for detecting signal
ISR(INT0_vect) {				// ISR on Falling Edge
     782:	1f 92       	push	r1
     784:	0f 92       	push	r0
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	0f 92       	push	r0
     78a:	11 24       	eor	r1, r1
     78c:	2f 93       	push	r18
     78e:	8f 93       	push	r24
     790:	9f 93       	push	r25
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
	if (recieving) {
     796:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <recieving>
     79a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <recieving+0x1>
     79e:	89 2b       	or	r24, r25
     7a0:	c9 f1       	breq	.+114    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		// Collect Time Spent
		int timespent = TCNT1;		// each counter value is 0.5
     7a2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     7a6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
		
		if (timespent < 3400) RECV_Data[pointer] = 0;		// If less than 1700 us || Bit 0
     7aa:	88 34       	cpi	r24, 0x48	; 72
     7ac:	9d 40       	sbci	r25, 0x0D	; 13
     7ae:	5c f4       	brge	.+22     	; 0x7c6 <__vector_1+0x44>
     7b0:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <__data_end>
     7b4:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <__data_end+0x1>
     7b8:	ee 0f       	add	r30, r30
     7ba:	ff 1f       	adc	r31, r31
     7bc:	ef 5d       	subi	r30, 0xDF	; 223
     7be:	fc 4f       	sbci	r31, 0xFC	; 252
     7c0:	11 82       	std	Z+1, r1	; 0x01
     7c2:	10 82       	st	Z, r1
     7c4:	0c c0       	rjmp	.+24     	; 0x7de <__vector_1+0x5c>
		else				  RECV_Data[pointer] = 1;		// Bit is 1
     7c6:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <__data_end>
     7ca:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <__data_end+0x1>
     7ce:	ee 0f       	add	r30, r30
     7d0:	ff 1f       	adc	r31, r31
     7d2:	ef 5d       	subi	r30, 0xDF	; 223
     7d4:	fc 4f       	sbci	r31, 0xFC	; 252
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	91 83       	std	Z+1, r25	; 0x01
     7dc:	80 83       	st	Z, r24
		pointer++;											// Increment position of RECV_Data
     7de:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
     7e2:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <__data_end+0x1>
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <__data_end+0x1>
     7ec:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
		if (pointer == size_signal - 1) {
     7f0:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
     7f4:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <__data_end+0x1>
     7f8:	84 97       	sbiw	r24, 0x24	; 36
     7fa:	41 f4       	brne	.+16     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			recieving = pointer = 0;						// Done Receiving
     7fc:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <__data_end+0x1>
     800:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
     804:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <recieving+0x1>
     808:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <recieving>
		}
		TCNT1 = 0;											// Reset Timer Counter
     80c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     810:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	}
}
     814:	ff 91       	pop	r31
     816:	ef 91       	pop	r30
     818:	9f 91       	pop	r25
     81a:	8f 91       	pop	r24
     81c:	2f 91       	pop	r18
     81e:	0f 90       	pop	r0
     820:	0f be       	out	0x3f, r0	; 63
     822:	0f 90       	pop	r0
     824:	1f 90       	pop	r1
     826:	18 95       	reti

00000828 <InitINT0>:
void InitINT0(void) {	  // Init the interrupt pin
	DDRD  &= ~(1<<DDRD2); // INT1 is an input
     828:	8a b1       	in	r24, 0x0a	; 10
     82a:	8b 7f       	andi	r24, 0xFB	; 251
     82c:	8a b9       	out	0x0a, r24	; 10
	EIMSK |=  (1<<INT0);  // EXT interrupt enable
     82e:	8d b3       	in	r24, 0x1d	; 29
     830:	81 60       	ori	r24, 0x01	; 1
     832:	8d bb       	out	0x1d, r24	; 29
	EICRA |=  (1<<ISC01); // Falling Edge INT0 
     834:	e9 e6       	ldi	r30, 0x69	; 105
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	82 60       	ori	r24, 0x02	; 2
     83c:	80 83       	st	Z, r24
     83e:	08 95       	ret

00000840 <getMode>:
}
// Gets the mode from the signal
unsigned int getMode(void) {
	int st = 33;									// Smallest value starts at index 33
	unsigned int modeVal = 0;
	for (int i = 0; i < 16; i++) {					// 16 bit signal
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
	EICRA |=  (1<<ISC01); // Falling Edge INT0 
}
// Gets the mode from the signal
unsigned int getMode(void) {
	int st = 33;									// Smallest value starts at index 33
	unsigned int modeVal = 0;
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
	EIMSK |=  (1<<INT0);  // EXT interrupt enable
	EICRA |=  (1<<ISC01); // Falling Edge INT0 
}
// Gets the mode from the signal
unsigned int getMode(void) {
	int st = 33;									// Smallest value starts at index 33
     848:	41 e2       	ldi	r20, 0x21	; 33
     84a:	50 e0       	ldi	r21, 0x00	; 0
	unsigned int modeVal = 0;
	for (int i = 0; i < 16; i++) {					// 16 bit signal
     84c:	18 c0       	rjmp	.+48     	; 0x87e <getMode+0x3e>
		if (RECV_Data[st] == 1) modeVal |= (1<<i);	// Converts Binary list to Value
     84e:	fa 01       	movw	r30, r20
     850:	ee 0f       	add	r30, r30
     852:	ff 1f       	adc	r31, r31
     854:	ef 5d       	subi	r30, 0xDF	; 223
     856:	fc 4f       	sbci	r31, 0xFC	; 252
     858:	60 81       	ld	r22, Z
     85a:	71 81       	ldd	r23, Z+1	; 0x01
     85c:	61 30       	cpi	r22, 0x01	; 1
     85e:	71 05       	cpc	r23, r1
     860:	51 f4       	brne	.+20     	; 0x876 <getMode+0x36>
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	02 2e       	mov	r0, r18
     868:	02 c0       	rjmp	.+4      	; 0x86e <getMode+0x2e>
     86a:	66 0f       	add	r22, r22
     86c:	77 1f       	adc	r23, r23
     86e:	0a 94       	dec	r0
     870:	e2 f7       	brpl	.-8      	; 0x86a <getMode+0x2a>
     872:	86 2b       	or	r24, r22
     874:	97 2b       	or	r25, r23
		st--;
     876:	41 50       	subi	r20, 0x01	; 1
     878:	51 09       	sbc	r21, r1
}
// Gets the mode from the signal
unsigned int getMode(void) {
	int st = 33;									// Smallest value starts at index 33
	unsigned int modeVal = 0;
	for (int i = 0; i < 16; i++) {					// 16 bit signal
     87a:	2f 5f       	subi	r18, 0xFF	; 255
     87c:	3f 4f       	sbci	r19, 0xFF	; 255
     87e:	20 31       	cpi	r18, 0x10	; 16
     880:	31 05       	cpc	r19, r1
     882:	2c f3       	brlt	.-54     	; 0x84e <getMode+0xe>
		if (RECV_Data[st] == 1) modeVal |= (1<<i);	// Converts Binary list to Value
		st--;
	}
	return modeVal;
}
     884:	08 95       	ret

00000886 <dispRECV>:
// Displays Received Signal with UART
void dispRECV(void) {
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
	printf("\n Start Signal \n");
     88a:	88 e2       	ldi	r24, 0x28	; 40
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 94 09 	call	0x1328	; 0x1328 <puts>
	for (int i = 18; i < 34; i++) {
     892:	c2 e1       	ldi	r28, 0x12	; 18
     894:	d0 e0       	ldi	r29, 0x00	; 0
     896:	14 c0       	rjmp	.+40     	; 0x8c0 <dispRECV+0x3a>
		printf("%d ", RECV_Data[i]);
     898:	fe 01       	movw	r30, r28
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	ef 5d       	subi	r30, 0xDF	; 223
     8a0:	fc 4f       	sbci	r31, 0xFC	; 252
     8a2:	80 81       	ld	r24, Z
     8a4:	91 81       	ldd	r25, Z+1	; 0x01
     8a6:	9f 93       	push	r25
     8a8:	8f 93       	push	r24
     8aa:	88 e3       	ldi	r24, 0x38	; 56
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	9f 93       	push	r25
     8b0:	8f 93       	push	r24
     8b2:	0e 94 7e 09 	call	0x12fc	; 0x12fc <printf>
	return modeVal;
}
// Displays Received Signal with UART
void dispRECV(void) {
	printf("\n Start Signal \n");
	for (int i = 18; i < 34; i++) {
     8b6:	21 96       	adiw	r28, 0x01	; 1
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	c2 32       	cpi	r28, 0x22	; 34
     8c2:	d1 05       	cpc	r29, r1
     8c4:	4c f3       	brlt	.-46     	; 0x898 <dispRECV+0x12>
		printf("%d ", RECV_Data[i]);
	}
	printf("\n END Signal \n");
     8c6:	8c e3       	ldi	r24, 0x3C	; 60
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	0e 94 94 09 	call	0x1328	; 0x1328 <puts>
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <runMode>:
// Adjusts the Mode based on received signal
void runMode(void) {
	unsigned int modeVal = getMode();
     8d4:	0e 94 20 04 	call	0x840	; 0x840 <getMode>
	switch (modeVal) {
     8d8:	87 3c       	cpi	r24, 0xC7	; 199
     8da:	28 e3       	ldi	r18, 0x38	; 56
     8dc:	92 07       	cpc	r25, r18
     8de:	09 f4       	brne	.+2      	; 0x8e2 <runMode+0xe>
     8e0:	d8 c0       	rjmp	.+432    	; 0xa92 <__stack+0x193>
     8e2:	a0 f4       	brcc	.+40     	; 0x90c <__stack+0xd>
     8e4:	87 3e       	cpi	r24, 0xE7	; 231
     8e6:	28 e1       	ldi	r18, 0x18	; 24
     8e8:	92 07       	cpc	r25, r18
     8ea:	09 f4       	brne	.+2      	; 0x8ee <runMode+0x1a>
     8ec:	c8 c0       	rjmp	.+400    	; 0xa7e <__stack+0x17f>
     8ee:	28 f4       	brcc	.+10     	; 0x8fa <runMode+0x26>
     8f0:	8d 3f       	cpi	r24, 0xFD	; 253
     8f2:	92 40       	sbci	r25, 0x02	; 2
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <runMode+0x24>
     8f6:	44 c0       	rjmp	.+136    	; 0x980 <__stack+0x81>
     8f8:	30 c1       	rjmp	.+608    	; 0xb5a <__stack+0x25b>
     8fa:	8d 3d       	cpi	r24, 0xDD	; 221
     8fc:	22 e2       	ldi	r18, 0x22	; 34
     8fe:	92 07       	cpc	r25, r18
     900:	a1 f1       	breq	.+104    	; 0x96a <__stack+0x6b>
     902:	8f 3c       	cpi	r24, 0xCF	; 207
     904:	90 43       	sbci	r25, 0x30	; 48
     906:	09 f4       	brne	.+2      	; 0x90a <__stack+0xb>
     908:	b5 c0       	rjmp	.+362    	; 0xa74 <__stack+0x175>
     90a:	27 c1       	rjmp	.+590    	; 0xb5a <__stack+0x25b>
     90c:	85 38       	cpi	r24, 0x85	; 133
     90e:	2a e7       	ldi	r18, 0x7A	; 122
     910:	92 07       	cpc	r25, r18
     912:	09 f4       	brne	.+2      	; 0x916 <__stack+0x17>
     914:	b9 c0       	rjmp	.+370    	; 0xa88 <__stack+0x189>
     916:	20 f4       	brcc	.+8      	; 0x920 <__stack+0x21>
     918:	8d 39       	cpi	r24, 0x9D	; 157
     91a:	92 46       	sbci	r25, 0x62	; 98
     91c:	51 f0       	breq	.+20     	; 0x932 <__stack+0x33>
     91e:	1d c1       	rjmp	.+570    	; 0xb5a <__stack+0x25b>
     920:	87 36       	cpi	r24, 0x67	; 103
     922:	28 e9       	ldi	r18, 0x98	; 152
     924:	92 07       	cpc	r25, r18
     926:	09 f4       	brne	.+2      	; 0x92a <__stack+0x2b>
     928:	41 c0       	rjmp	.+130    	; 0x9ac <__stack+0xad>
     92a:	8d 33       	cpi	r24, 0x3D	; 61
     92c:	92 4c       	sbci	r25, 0xC2	; 194
     92e:	99 f1       	breq	.+102    	; 0x996 <__stack+0x97>
     930:	14 c1       	rjmp	.+552    	; 0xb5a <__stack+0x25b>
		case 0x629D:	// PWR BTN
			printf("POWER ON/OFF\n");
     932:	8a e4       	ldi	r24, 0x4A	; 74
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 94 09 	call	0x1328	; 0x1328 <puts>
			if (mode) {
     93a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <mode>
     93e:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <mode+0x1>
     942:	89 2b       	or	r24, r25
     944:	59 f0       	breq	.+22     	; 0x95c <__stack+0x5d>
				StripCLR(&LEDSTRIP, NUM_LEDS);
     946:	6c e3       	ldi	r22, 0x3C	; 60
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	81 e3       	ldi	r24, 0x31	; 49
     94c:	92 e0       	ldi	r25, 0x02	; 2
     94e:	0e 94 c2 00 	call	0x184	; 0x184 <StripCLR>
				mode = 0;
     952:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <mode+0x1>
     956:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <mode>
     95a:	08 95       	ret
			}
			else mode = 1;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <mode+0x1>
     964:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <mode>
     968:	08 95       	ret
			break;
		case 0x22DD:	// A
			mode = 1;
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <mode+0x1>
     972:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <mode>
			printf("A\n");
     976:	87 e5       	ldi	r24, 0x57	; 87
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 94 09 	call	0x1328	; 0x1328 <puts>
			break;
     97e:	08 95       	ret
		case 0x02FD:	// B
			mode = 2;
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <mode+0x1>
     988:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <mode>
			printf("B\n");
     98c:	89 e5       	ldi	r24, 0x59	; 89
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 94 09 	call	0x1328	; 0x1328 <puts>
			break;
     994:	08 95       	ret
		case 0xC23D:	// C
			mode = 3;
     996:	83 e0       	ldi	r24, 0x03	; 3
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <mode+0x1>
     99e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <mode>
			printf("C\n");
     9a2:	8b e5       	ldi	r24, 0x5B	; 91
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	0e 94 94 09 	call	0x1328	; 0x1328 <puts>
			break;
     9aa:	08 95       	ret
		case 0x9867:	// UP
			switch (mode) {
     9ac:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <mode>
     9b0:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <mode+0x1>
     9b4:	82 30       	cpi	r24, 0x02	; 2
     9b6:	91 05       	cpc	r25, r1
     9b8:	19 f1       	breq	.+70     	; 0xa00 <__stack+0x101>
     9ba:	83 30       	cpi	r24, 0x03	; 3
     9bc:	91 05       	cpc	r25, r1
     9be:	e9 f1       	breq	.+122    	; 0xa3a <__stack+0x13b>
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <__stack+0xc7>
     9c4:	dc c0       	rjmp	.+440    	; 0xb7e <__stack+0x27f>
				case 1:		// Snake Mode | Increase Snake
				if (s_len < 10) s_len++;
     9c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_len>
     9ca:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <s_len+0x1>
     9ce:	8a 30       	cpi	r24, 0x0A	; 10
     9d0:	91 05       	cpc	r25, r1
     9d2:	2c f4       	brge	.+10     	; 0x9de <__stack+0xdf>
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <s_len+0x1>
     9da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <s_len>
					printf("UP %d\n", s_len);
     9de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <s_len+0x1>
     9e2:	8f 93       	push	r24
     9e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_len>
     9e8:	8f 93       	push	r24
     9ea:	8d e5       	ldi	r24, 0x5D	; 93
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	9f 93       	push	r25
     9f0:	8f 93       	push	r24
     9f2:	0e 94 7e 09 	call	0x12fc	; 0x12fc <printf>
					break;
     9f6:	0f 90       	pop	r0
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	08 95       	ret
				case 2:		// O2I   Mode | Decrease Delay
					if (O2I_delay > 5) O2I_delay -= 2;
     a00:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <O2I_delay>
     a04:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <O2I_delay+0x1>
     a08:	86 30       	cpi	r24, 0x06	; 6
     a0a:	91 05       	cpc	r25, r1
     a0c:	2c f0       	brlt	.+10     	; 0xa18 <__stack+0x119>
     a0e:	02 97       	sbiw	r24, 0x02	; 2
     a10:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <O2I_delay+0x1>
     a14:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <O2I_delay>
					printf("UP %d\n", O2I_delay);
     a18:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <O2I_delay+0x1>
     a1c:	8f 93       	push	r24
     a1e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <O2I_delay>
     a22:	8f 93       	push	r24
     a24:	8d e5       	ldi	r24, 0x5D	; 93
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	9f 93       	push	r25
     a2a:	8f 93       	push	r24
     a2c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <printf>
					break;
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	08 95       	ret
				case 3:		// Rand  Mode | Decrease Delay
					if (RAN_delay > 4) RAN_delay -= 4;
     a3a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RAN_delay>
     a3e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <RAN_delay+0x1>
     a42:	85 30       	cpi	r24, 0x05	; 5
     a44:	91 05       	cpc	r25, r1
     a46:	2c f0       	brlt	.+10     	; 0xa52 <__stack+0x153>
     a48:	04 97       	sbiw	r24, 0x04	; 4
     a4a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <RAN_delay+0x1>
     a4e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <RAN_delay>
					printf("UP %d\n", RAN_delay);
     a52:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <RAN_delay+0x1>
     a56:	8f 93       	push	r24
     a58:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RAN_delay>
     a5c:	8f 93       	push	r24
     a5e:	8d e5       	ldi	r24, 0x5D	; 93
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	9f 93       	push	r25
     a64:	8f 93       	push	r24
     a66:	0e 94 7e 09 	call	0x12fc	; 0x12fc <printf>
					break;	
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	08 95       	ret
			}
			break;
		case 0x30CF:	// LEFT
			printf("LEFT\n");
     a74:	84 e6       	ldi	r24, 0x64	; 100
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 94 09 	call	0x1328	; 0x1328 <puts>
			break;
     a7c:	08 95       	ret
		case 0x18E7:	// CIRCLE
			printf("CIRCLE\n");
     a7e:	89 e6       	ldi	r24, 0x69	; 105
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 94 09 	call	0x1328	; 0x1328 <puts>
			break;
     a86:	08 95       	ret
		case 0x7A85:	// RIGHT
			printf("RIGHT\n");
     a88:	80 e7       	ldi	r24, 0x70	; 112
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	0e 94 94 09 	call	0x1328	; 0x1328 <puts>
			break;
     a90:	08 95       	ret
		case 0x38C7:	// DOWN
			switch (mode) {
     a92:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <mode>
     a96:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <mode+0x1>
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	91 05       	cpc	r25, r1
     a9e:	19 f1       	breq	.+70     	; 0xae6 <__stack+0x1e7>
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	91 05       	cpc	r25, r1
     aa4:	e9 f1       	breq	.+122    	; 0xb20 <__stack+0x221>
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	09 f0       	breq	.+2      	; 0xaac <__stack+0x1ad>
     aaa:	69 c0       	rjmp	.+210    	; 0xb7e <__stack+0x27f>
				case 1:		// Snake Mode | Decrease Snake
					if (s_len > 1) s_len--;
     aac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_len>
     ab0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <s_len+0x1>
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	91 05       	cpc	r25, r1
     ab8:	2c f0       	brlt	.+10     	; 0xac4 <__stack+0x1c5>
     aba:	01 97       	sbiw	r24, 0x01	; 1
     abc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <s_len+0x1>
     ac0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <s_len>
					printf("DOWN %d\n", s_len);
     ac4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <s_len+0x1>
     ac8:	8f 93       	push	r24
     aca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_len>
     ace:	8f 93       	push	r24
     ad0:	86 e7       	ldi	r24, 0x76	; 118
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	9f 93       	push	r25
     ad6:	8f 93       	push	r24
     ad8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <printf>
					break;
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	08 95       	ret
				case 2:		// O2I   Mode | Increase Delay
					if (O2I_delay < 20) O2I_delay += 2;
     ae6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <O2I_delay>
     aea:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <O2I_delay+0x1>
     aee:	84 31       	cpi	r24, 0x14	; 20
     af0:	91 05       	cpc	r25, r1
     af2:	2c f4       	brge	.+10     	; 0xafe <__stack+0x1ff>
     af4:	02 96       	adiw	r24, 0x02	; 2
     af6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <O2I_delay+0x1>
     afa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <O2I_delay>
					printf("DOWN %d\n", O2I_delay);
     afe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <O2I_delay+0x1>
     b02:	8f 93       	push	r24
     b04:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <O2I_delay>
     b08:	8f 93       	push	r24
     b0a:	86 e7       	ldi	r24, 0x76	; 118
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	9f 93       	push	r25
     b10:	8f 93       	push	r24
     b12:	0e 94 7e 09 	call	0x12fc	; 0x12fc <printf>
					break;
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	08 95       	ret
				case 3:		// Rand  Mode | Increase Delay
					if (RAN_delay < 60) RAN_delay += 4;
     b20:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RAN_delay>
     b24:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <RAN_delay+0x1>
     b28:	8c 33       	cpi	r24, 0x3C	; 60
     b2a:	91 05       	cpc	r25, r1
     b2c:	2c f4       	brge	.+10     	; 0xb38 <__stack+0x239>
     b2e:	04 96       	adiw	r24, 0x04	; 4
     b30:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <RAN_delay+0x1>
     b34:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <RAN_delay>
					printf("DOWN %d\n", RAN_delay);
     b38:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <RAN_delay+0x1>
     b3c:	8f 93       	push	r24
     b3e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RAN_delay>
     b42:	8f 93       	push	r24
     b44:	86 e7       	ldi	r24, 0x76	; 118
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	9f 93       	push	r25
     b4a:	8f 93       	push	r24
     b4c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <printf>
					break;
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	08 95       	ret
			}
			break;
		default:	// Error Case
			printf("ERROR OCCURED\n");
     b5a:	8f e7       	ldi	r24, 0x7F	; 127
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	0e 94 94 09 	call	0x1328	; 0x1328 <puts>
			for (int i = 0; i < size_signal; i++) {
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	08 c0       	rjmp	.+16     	; 0xb78 <__stack+0x279>
				RECV_Data[i] = 0;
     b68:	fc 01       	movw	r30, r24
     b6a:	ee 0f       	add	r30, r30
     b6c:	ff 1f       	adc	r31, r31
     b6e:	ef 5d       	subi	r30, 0xDF	; 223
     b70:	fc 4f       	sbci	r31, 0xFC	; 252
     b72:	11 82       	std	Z+1, r1	; 0x01
     b74:	10 82       	st	Z, r1
					break;
			}
			break;
		default:	// Error Case
			printf("ERROR OCCURED\n");
			for (int i = 0; i < size_signal; i++) {
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	85 32       	cpi	r24, 0x25	; 37
     b7a:	91 05       	cpc	r25, r1
     b7c:	ac f3       	brlt	.-22     	; 0xb68 <__stack+0x269>
     b7e:	08 95       	ret

00000b80 <main>:
			break;
	}
}
// Driver Code
int main(void) {
	uart_init(0);
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0e 94 7f 07 	call	0xefe	; 0xefe <uart_init>

	InitINT0();
     b86:	0e 94 14 04 	call	0x828	; 0x828 <InitINT0>
	InitTimer1();
     b8a:	0e 94 b2 03 	call	0x764	; 0x764 <InitTimer1>
	SPI_MasterInit();
     b8e:	0e 94 ad 03 	call	0x75a	; 0x75a <SPI_MasterInit>

	sei();					// global interrupts enabled 
     b92:	78 94       	sei
	UCSR0B |= (1<<RXCIE0);	// Interrupts initialized
     b94:	e1 ec       	ldi	r30, 0xC1	; 193
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	80 68       	ori	r24, 0x80	; 128
     b9c:	80 83       	st	Z, r24
	// LED to show Power is being Supplied
	DDRD  = (1<<PIND7);		
     b9e:	80 e8       	ldi	r24, 0x80	; 128
     ba0:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1<<PIND7);
     ba2:	8b b9       	out	0x0b, r24	; 11

	strip_init(&LEDSTRIP, NUM_LEDS);		// Initialize all values of OBJ to 0
     ba4:	6c e3       	ldi	r22, 0x3C	; 60
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	81 e3       	ldi	r24, 0x31	; 49
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	0e 94 7e 00 	call	0xfc	; 0xfc <strip_init>
	StripCLR(&LEDSTRIP, NUM_LEDS);			// Clears the LEDSTRIP display
     bb0:	6c e3       	ldi	r22, 0x3C	; 60
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	81 e3       	ldi	r24, 0x31	; 49
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	0e 94 c2 00 	call	0x184	; 0x184 <StripCLR>

	while (1) {
		if (!recieving) { // Ready to read
     bbc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <recieving>
     bc0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <recieving+0x1>
     bc4:	89 2b       	or	r24, r25
     bc6:	71 f4       	brne	.+28     	; 0xbe4 <main+0x64>
			dispRECV();
     bc8:	0e 94 43 04 	call	0x886	; 0x886 <dispRECV>
			runMode();
     bcc:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <runMode>
			// RESET | Receiving Future Signals | Pointer to start of signal list
			recieving = 1;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <recieving+0x1>
     bd8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <recieving>
			pointer   = 0;
     bdc:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <__data_end+0x1>
     be0:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
		}
		switch (mode) {
     be4:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <mode>
     be8:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <mode+0x1>
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	91 05       	cpc	r25, r1
     bf0:	a1 f0       	breq	.+40     	; 0xc1a <main+0x9a>
     bf2:	83 30       	cpi	r24, 0x03	; 3
     bf4:	91 05       	cpc	r25, r1
     bf6:	e1 f0       	breq	.+56     	; 0xc30 <main+0xb0>
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	01 f7       	brne	.-64     	; 0xbbc <main+0x3c>
			case 0:
				break;
			case 1:
				LED_Bounce_Pattern(&LEDSTRIP, 0, 59, s_len, NUM_LEDS);
     bfc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <s_len>
     c00:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <s_len+0x1>
     c04:	0c e3       	ldi	r16, 0x3C	; 60
     c06:	10 e0       	ldi	r17, 0x00	; 0
     c08:	4b e3       	ldi	r20, 0x3B	; 59
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	81 e3       	ldi	r24, 0x31	; 49
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	0e 94 46 01 	call	0x28c	; 0x28c <LED_Bounce_Pattern>
				break;
     c18:	d1 cf       	rjmp	.-94     	; 0xbbc <main+0x3c>
			case 2:
				LED_Out2InPattern(&LEDSTRIP, NUM_LEDS, O2I_delay);
     c1a:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <O2I_delay>
     c1e:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <O2I_delay+0x1>
     c22:	6c e3       	ldi	r22, 0x3C	; 60
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	81 e3       	ldi	r24, 0x31	; 49
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0e 94 89 02 	call	0x512	; 0x512 <LED_Out2InPattern>
				break;
     c2e:	c6 cf       	rjmp	.-116    	; 0xbbc <main+0x3c>
			case 3:
				LED_Rand_Pattern(&LEDSTRIP,NUM_LEDS, RAN_delay);
     c30:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <RAN_delay>
     c34:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <RAN_delay+0x1>
     c38:	6c e3       	ldi	r22, 0x3C	; 60
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	81 e3       	ldi	r24, 0x31	; 49
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	0e 94 0c 02 	call	0x418	; 0x418 <LED_Rand_Pattern>
				break;
     c44:	bb cf       	rjmp	.-138    	; 0xbbc <main+0x3c>

00000c46 <uart_putchar>:

/*
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int uart_putchar(char c, FILE *stream) {
     c46:	cf 93       	push	r28
     c48:	c8 2f       	mov	r28, r24

  if (c == '\a')
     c4a:	87 30       	cpi	r24, 0x07	; 7
     c4c:	69 f4       	brne	.+26     	; 0xc68 <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
     c4e:	20 91 6f 03 	lds	r18, 0x036F	; 0x80036f <__iob+0x4>
     c52:	30 91 70 03 	lds	r19, 0x0370	; 0x800370 <__iob+0x5>
     c56:	47 e0       	ldi	r20, 0x07	; 7
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	8d e8       	ldi	r24, 0x8D	; 141
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	0e 94 4a 09 	call	0x1294	; 0x1294 <fwrite>
      return 0;
     c66:	2a c0       	rjmp	.+84     	; 0xcbc <uart_putchar+0x76>
    }

  if (c == '\n')
     c68:	8a 30       	cpi	r24, 0x0A	; 10
     c6a:	19 f4       	brne	.+6      	; 0xc72 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
     c6c:	8d e0       	ldi	r24, 0x0D	; 13
     c6e:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
	if (use_tx_interrupts) {
     c72:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <use_tx_interrupts>
     c76:	88 23       	and	r24, r24
     c78:	d9 f0       	breq	.+54     	; 0xcb0 <uart_putchar+0x6a>
		t_buffer[t_put_index] = c;					// put character in buffer
     c7a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <t_put_index>
     c7e:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <t_put_index+0x1>
     c82:	fc 01       	movw	r30, r24
     c84:	ef 50       	subi	r30, 0x0F	; 15
     c86:	fe 4f       	sbci	r31, 0xFE	; 254
     c88:	c0 83       	st	Z, r28
		t_put_index = (t_put_index + 1) % BUF_SIZE;	// increment ring buffer index
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	8f 73       	andi	r24, 0x3F	; 63
     c8e:	90 78       	andi	r25, 0x80	; 128
     c90:	99 23       	and	r25, r25
     c92:	24 f4       	brge	.+8      	; 0xc9c <uart_putchar+0x56>
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	80 6c       	ori	r24, 0xC0	; 192
     c98:	9f 6f       	ori	r25, 0xFF	; 255
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <t_put_index+0x1>
     ca0:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <t_put_index>
		UCSR0B |= _BV(UDRE0);							// enable interrupt
     ca4:	e1 ec       	ldi	r30, 0xC1	; 193
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	80 62       	ori	r24, 0x20	; 32
     cac:	80 83       	st	Z, r24
     cae:	06 c0       	rjmp	.+12     	; 0xcbc <uart_putchar+0x76>
	} else {
		loop_until_bit_is_set(UCSR0A, UDRE0);
     cb0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     cb4:	85 ff       	sbrs	r24, 5
     cb6:	fc cf       	rjmp	.-8      	; 0xcb0 <uart_putchar+0x6a>
		UDR0 = c;
     cb8:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}

  return 0;
}
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <uart_getchar>:
 * parity recognition is supported by hardware).
 *
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int uart_getchar(FILE *stream) {
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     cd0:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <rxp.1837>
     cd4:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <rxp.1837+0x1>
     cd8:	23 2b       	or	r18, r19
     cda:	09 f0       	breq	.+2      	; 0xcde <uart_getchar+0x1a>
     cdc:	a3 c0       	rjmp	.+326    	; 0xe24 <uart_getchar+0x160>
     cde:	8c 01       	movw	r16, r24
     ce0:	ca e9       	ldi	r28, 0x9A	; 154
     ce2:	d1 e0       	ldi	r29, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     ce4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ce8:	99 23       	and	r25, r25
     cea:	e4 f7       	brge	.-8      	; 0xce4 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     cec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     cf0:	84 fd       	sbrc	r24, 4
     cf2:	ab c0       	rjmp	.+342    	; 0xe4a <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     cf4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     cf8:	83 fd       	sbrc	r24, 3
     cfa:	aa c0       	rjmp	.+340    	; 0xe50 <uart_getchar+0x18c>
	  return _FDEV_ERR;
	c = UDR0;
     cfc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     d00:	8d 30       	cpi	r24, 0x0D	; 13
     d02:	09 f4       	brne	.+2      	; 0xd06 <uart_getchar+0x42>
	  c = '\n';
     d04:	8a e0       	ldi	r24, 0x0A	; 10
	if (c == '\n')
     d06:	8a 30       	cpi	r24, 0x0A	; 10
     d08:	59 f4       	brne	.+22     	; 0xd20 <uart_getchar+0x5c>
	  {
	    *cp = c;
     d0a:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
     d0c:	b8 01       	movw	r22, r16
     d0e:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
	    rxp = b;
     d12:	8a e9       	ldi	r24, 0x9A	; 154
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <rxp.1837+0x1>
     d1a:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <rxp.1837>
	    break;
     d1e:	82 c0       	rjmp	.+260    	; 0xe24 <uart_getchar+0x160>
	  }
	else if (c == '\t')
     d20:	89 30       	cpi	r24, 0x09	; 9
     d22:	09 f4       	brne	.+2      	; 0xd26 <uart_getchar+0x62>
	  c = ' ';
     d24:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     d26:	90 ee       	ldi	r25, 0xE0	; 224
     d28:	98 0f       	add	r25, r24
     d2a:	9f 35       	cpi	r25, 0x5F	; 95
     d2c:	10 f0       	brcs	.+4      	; 0xd32 <uart_getchar+0x6e>
     d2e:	80 3a       	cpi	r24, 0xA0	; 160
     d30:	98 f0       	brcs	.+38     	; 0xd58 <uart_getchar+0x94>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	c9 3e       	cpi	r28, 0xE9	; 233
     d36:	d9 07       	cpc	r29, r25
     d38:	29 f4       	brne	.+10     	; 0xd44 <uart_getchar+0x80>
	      uart_putchar('\a', stream);
     d3a:	b8 01       	movw	r22, r16
     d3c:	87 e0       	ldi	r24, 0x07	; 7
     d3e:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
     d42:	d0 cf       	rjmp	.-96     	; 0xce4 <uart_getchar+0x20>
	    else
	      {
		*cp++ = c;
     d44:	7e 01       	movw	r14, r28
     d46:	ef ef       	ldi	r30, 0xFF	; 255
     d48:	ee 1a       	sub	r14, r30
     d4a:	fe 0a       	sbc	r15, r30
     d4c:	88 83       	st	Y, r24
		uart_putchar(c, stream);
     d4e:	b8 01       	movw	r22, r16
     d50:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
     d54:	e7 01       	movw	r28, r14
		uart_putchar(c, stream);
	      }
	    continue;
     d56:	c6 cf       	rjmp	.-116    	; 0xce4 <uart_getchar+0x20>
	  }

	switch (c)
     d58:	82 31       	cpi	r24, 0x12	; 18
     d5a:	19 f1       	breq	.+70     	; 0xda2 <uart_getchar+0xde>
     d5c:	30 f4       	brcc	.+12     	; 0xd6a <uart_getchar+0xa6>
     d5e:	83 30       	cpi	r24, 0x03	; 3
     d60:	09 f4       	brne	.+2      	; 0xd64 <uart_getchar+0xa0>
     d62:	79 c0       	rjmp	.+242    	; 0xe56 <uart_getchar+0x192>
     d64:	88 30       	cpi	r24, 0x08	; 8
     d66:	49 f0       	breq	.+18     	; 0xd7a <uart_getchar+0xb6>
     d68:	bd cf       	rjmp	.-134    	; 0xce4 <uart_getchar+0x20>
     d6a:	87 31       	cpi	r24, 0x17	; 23
     d6c:	09 f4       	brne	.+2      	; 0xd70 <uart_getchar+0xac>
     d6e:	4e c0       	rjmp	.+156    	; 0xe0c <uart_getchar+0x148>
     d70:	8f 37       	cpi	r24, 0x7F	; 127
     d72:	19 f0       	breq	.+6      	; 0xd7a <uart_getchar+0xb6>
     d74:	85 31       	cpi	r24, 0x15	; 21
     d76:	b9 f1       	breq	.+110    	; 0xde6 <uart_getchar+0x122>
     d78:	b5 cf       	rjmp	.-150    	; 0xce4 <uart_getchar+0x20>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     d7a:	f1 e0       	ldi	r31, 0x01	; 1
     d7c:	ca 39       	cpi	r28, 0x9A	; 154
     d7e:	df 07       	cpc	r29, r31
     d80:	09 f0       	breq	.+2      	; 0xd84 <uart_getchar+0xc0>
     d82:	08 f4       	brcc	.+2      	; 0xd86 <uart_getchar+0xc2>
     d84:	af cf       	rjmp	.-162    	; 0xce4 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     d86:	b8 01       	movw	r22, r16
     d88:	88 e0       	ldi	r24, 0x08	; 8
     d8a:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
		uart_putchar(' ', stream);
     d8e:	b8 01       	movw	r22, r16
     d90:	80 e2       	ldi	r24, 0x20	; 32
     d92:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
		uart_putchar('\b', stream);
     d96:	b8 01       	movw	r22, r16
     d98:	88 e0       	ldi	r24, 0x08	; 8
     d9a:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
		cp--;
     d9e:	21 97       	sbiw	r28, 0x01	; 1
     da0:	a1 cf       	rjmp	.-190    	; 0xce4 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
     da2:	b8 01       	movw	r22, r16
     da4:	8d e0       	ldi	r24, 0x0D	; 13
     da6:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
     daa:	0f 2e       	mov	r0, r31
     dac:	fa e9       	ldi	r31, 0x9A	; 154
     dae:	ef 2e       	mov	r14, r31
     db0:	f1 e0       	ldi	r31, 0x01	; 1
     db2:	ff 2e       	mov	r15, r31
     db4:	f0 2d       	mov	r31, r0
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <uart_getchar+0x100>
	      uart_putchar(*cp2, stream);
     db8:	b8 01       	movw	r22, r16
     dba:	f7 01       	movw	r30, r14
     dbc:	81 91       	ld	r24, Z+
     dbe:	7f 01       	movw	r14, r30
     dc0:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
     dc4:	ec 16       	cp	r14, r28
     dc6:	fd 06       	cpc	r15, r29
     dc8:	b8 f3       	brcs	.-18     	; 0xdb8 <uart_getchar+0xf4>
     dca:	8c cf       	rjmp	.-232    	; 0xce4 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
     dcc:	b8 01       	movw	r22, r16
     dce:	88 e0       	ldi	r24, 0x08	; 8
     dd0:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
		uart_putchar(' ', stream);
     dd4:	b8 01       	movw	r22, r16
     dd6:	80 e2       	ldi	r24, 0x20	; 32
     dd8:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
		uart_putchar('\b', stream);
     ddc:	b8 01       	movw	r22, r16
     dde:	88 e0       	ldi	r24, 0x08	; 8
     de0:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
		cp--;
     de4:	21 97       	sbiw	r28, 0x01	; 1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
     de6:	f1 e0       	ldi	r31, 0x01	; 1
     de8:	ca 39       	cpi	r28, 0x9A	; 154
     dea:	df 07       	cpc	r29, r31
     dec:	09 f0       	breq	.+2      	; 0xdf0 <uart_getchar+0x12c>
     dee:	70 f7       	brcc	.-36     	; 0xdcc <uart_getchar+0x108>
     df0:	79 cf       	rjmp	.-270    	; 0xce4 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
     df2:	b8 01       	movw	r22, r16
     df4:	88 e0       	ldi	r24, 0x08	; 8
     df6:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
		uart_putchar(' ', stream);
     dfa:	b8 01       	movw	r22, r16
     dfc:	80 e2       	ldi	r24, 0x20	; 32
     dfe:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
		uart_putchar('\b', stream);
     e02:	b8 01       	movw	r22, r16
     e04:	88 e0       	ldi	r24, 0x08	; 8
     e06:	0e 94 23 06 	call	0xc46	; 0xc46 <uart_putchar>
		cp--;
     e0a:	21 97       	sbiw	r28, 0x01	; 1
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	ca 39       	cpi	r28, 0x9A	; 154
     e10:	d8 07       	cpc	r29, r24
     e12:	09 f0       	breq	.+2      	; 0xe16 <uart_getchar+0x152>
     e14:	08 f4       	brcc	.+2      	; 0xe18 <uart_getchar+0x154>
     e16:	66 cf       	rjmp	.-308    	; 0xce4 <uart_getchar+0x20>
     e18:	fe 01       	movw	r30, r28
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	80 81       	ld	r24, Z
     e1e:	80 32       	cpi	r24, 0x20	; 32
     e20:	41 f7       	brne	.-48     	; 0xdf2 <uart_getchar+0x12e>
     e22:	60 cf       	rjmp	.-320    	; 0xce4 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
     e24:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <rxp.1837>
     e28:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <rxp.1837+0x1>
     e2c:	cf 01       	movw	r24, r30
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <rxp.1837+0x1>
     e34:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <rxp.1837>
     e38:	80 81       	ld	r24, Z
  if (c == '\n')
     e3a:	8a 30       	cpi	r24, 0x0A	; 10
     e3c:	21 f4       	brne	.+8      	; 0xe46 <uart_getchar+0x182>
    rxp = 0;
     e3e:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <rxp.1837+0x1>
     e42:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <rxp.1837>

  return c;
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	08 c0       	rjmp	.+16     	; 0xe5a <uart_getchar+0x196>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
     e4a:	8e ef       	ldi	r24, 0xFE	; 254
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <uart_getchar+0x196>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	9f ef       	ldi	r25, 0xFF	; 255
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <uart_getchar+0x196>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	08 95       	ret

00000e68 <__vector_19>:
static char t_buffer[BUF_SIZE];
static int t_put_index = 0;
volatile static int t_get_index = 0;

ISR(USART0_UDRE_vect)
{
     e68:	1f 92       	push	r1
     e6a:	0f 92       	push	r0
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	0f 92       	push	r0
     e70:	11 24       	eor	r1, r1
     e72:	2f 93       	push	r18
     e74:	3f 93       	push	r19
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
	if (t_get_index != t_put_index) {
     e7e:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <t_get_index>
     e82:	30 91 ee 01 	lds	r19, 0x01EE	; 0x8001ee <t_get_index+0x1>
     e86:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <t_put_index>
     e8a:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <t_put_index+0x1>
     e8e:	28 17       	cp	r18, r24
     e90:	39 07       	cpc	r19, r25
     e92:	51 f1       	breq	.+84     	; 0xee8 <__vector_19+0x80>
		UDR0 = t_buffer[t_get_index];
     e94:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <t_get_index>
     e98:	f0 91 ee 01 	lds	r31, 0x01EE	; 0x8001ee <t_get_index+0x1>
     e9c:	ef 50       	subi	r30, 0x0F	; 15
     e9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ea0:	80 81       	ld	r24, Z
     ea2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		t_get_index = (t_get_index + 1) % BUF_SIZE;
     ea6:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <t_get_index>
     eaa:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <t_get_index+0x1>
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	8f 73       	andi	r24, 0x3F	; 63
     eb2:	90 78       	andi	r25, 0x80	; 128
     eb4:	99 23       	and	r25, r25
     eb6:	24 f4       	brge	.+8      	; 0xec0 <__vector_19+0x58>
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	80 6c       	ori	r24, 0xC0	; 192
     ebc:	9f 6f       	ori	r25, 0xFF	; 255
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <t_get_index+0x1>
     ec4:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <t_get_index>
		if (t_get_index == t_put_index) {
     ec8:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <t_get_index>
     ecc:	30 91 ee 01 	lds	r19, 0x01EE	; 0x8001ee <t_get_index+0x1>
     ed0:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <t_put_index>
     ed4:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <t_put_index+0x1>
     ed8:	28 17       	cp	r18, r24
     eda:	39 07       	cpc	r19, r25
     edc:	29 f4       	brne	.+10     	; 0xee8 <__vector_19+0x80>
			UCSR0B &= ~(_BV(UDRE0));
     ede:	e1 ec       	ldi	r30, 0xC1	; 193
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8f 7d       	andi	r24, 0xDF	; 223
     ee6:	80 83       	st	Z, r24
		}
	}
	
}
     ee8:	ff 91       	pop	r31
     eea:	ef 91       	pop	r30
     eec:	9f 91       	pop	r25
     eee:	8f 91       	pop	r24
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <uart_init>:
void uart_init(bool use_tx_intr) {
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
     efe:	97 e6       	ldi	r25, 0x67	; 103
     f00:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
     f04:	98 e1       	ldi	r25, 0x18	; 24
     f06:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  
  stdout = &uartFile;
     f0a:	eb e6       	ldi	r30, 0x6B	; 107
     f0c:	f3 e0       	ldi	r31, 0x03	; 3
     f0e:	2c e0       	ldi	r18, 0x0C	; 12
     f10:	31 e0       	ldi	r19, 0x01	; 1
     f12:	33 83       	std	Z+3, r19	; 0x03
     f14:	22 83       	std	Z+2, r18	; 0x02
  stdin = &uartFile;
     f16:	31 83       	std	Z+1, r19	; 0x01
     f18:	20 83       	st	Z, r18
  stderr = &uartFile;
     f1a:	35 83       	std	Z+5, r19	; 0x05
     f1c:	24 83       	std	Z+4, r18	; 0x04
  if (use_tx_intr) {
     f1e:	88 23       	and	r24, r24
     f20:	21 f0       	breq	.+8      	; 0xf2a <uart_init+0x2c>
	  use_tx_interrupts = true;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <use_tx_interrupts>
	  sei();
     f28:	78 94       	sei
     f2a:	08 95       	ret

00000f2c <__cmpsf2>:
     f2c:	0e 94 07 08 	call	0x100e	; 0x100e <__fp_cmp>
     f30:	08 f4       	brcc	.+2      	; 0xf34 <__cmpsf2+0x8>
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	08 95       	ret

00000f36 <__fixunssfsi>:
     f36:	0e 94 33 08 	call	0x1066	; 0x1066 <__fp_splitA>
     f3a:	88 f0       	brcs	.+34     	; 0xf5e <__fixunssfsi+0x28>
     f3c:	9f 57       	subi	r25, 0x7F	; 127
     f3e:	98 f0       	brcs	.+38     	; 0xf66 <__fixunssfsi+0x30>
     f40:	b9 2f       	mov	r27, r25
     f42:	99 27       	eor	r25, r25
     f44:	b7 51       	subi	r27, 0x17	; 23
     f46:	b0 f0       	brcs	.+44     	; 0xf74 <__fixunssfsi+0x3e>
     f48:	e1 f0       	breq	.+56     	; 0xf82 <__fixunssfsi+0x4c>
     f4a:	66 0f       	add	r22, r22
     f4c:	77 1f       	adc	r23, r23
     f4e:	88 1f       	adc	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	1a f0       	brmi	.+6      	; 0xf5a <__fixunssfsi+0x24>
     f54:	ba 95       	dec	r27
     f56:	c9 f7       	brne	.-14     	; 0xf4a <__fixunssfsi+0x14>
     f58:	14 c0       	rjmp	.+40     	; 0xf82 <__fixunssfsi+0x4c>
     f5a:	b1 30       	cpi	r27, 0x01	; 1
     f5c:	91 f0       	breq	.+36     	; 0xf82 <__fixunssfsi+0x4c>
     f5e:	0e 94 4d 08 	call	0x109a	; 0x109a <__fp_zero>
     f62:	b1 e0       	ldi	r27, 0x01	; 1
     f64:	08 95       	ret
     f66:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__fp_zero>
     f6a:	67 2f       	mov	r22, r23
     f6c:	78 2f       	mov	r23, r24
     f6e:	88 27       	eor	r24, r24
     f70:	b8 5f       	subi	r27, 0xF8	; 248
     f72:	39 f0       	breq	.+14     	; 0xf82 <__fixunssfsi+0x4c>
     f74:	b9 3f       	cpi	r27, 0xF9	; 249
     f76:	cc f3       	brlt	.-14     	; 0xf6a <__fixunssfsi+0x34>
     f78:	86 95       	lsr	r24
     f7a:	77 95       	ror	r23
     f7c:	67 95       	ror	r22
     f7e:	b3 95       	inc	r27
     f80:	d9 f7       	brne	.-10     	; 0xf78 <__fixunssfsi+0x42>
     f82:	3e f4       	brtc	.+14     	; 0xf92 <__fixunssfsi+0x5c>
     f84:	90 95       	com	r25
     f86:	80 95       	com	r24
     f88:	70 95       	com	r23
     f8a:	61 95       	neg	r22
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	8f 4f       	sbci	r24, 0xFF	; 255
     f90:	9f 4f       	sbci	r25, 0xFF	; 255
     f92:	08 95       	ret

00000f94 <__floatunsisf>:
     f94:	e8 94       	clt
     f96:	09 c0       	rjmp	.+18     	; 0xfaa <__floatsisf+0x12>

00000f98 <__floatsisf>:
     f98:	97 fb       	bst	r25, 7
     f9a:	3e f4       	brtc	.+14     	; 0xfaa <__floatsisf+0x12>
     f9c:	90 95       	com	r25
     f9e:	80 95       	com	r24
     fa0:	70 95       	com	r23
     fa2:	61 95       	neg	r22
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	8f 4f       	sbci	r24, 0xFF	; 255
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	99 23       	and	r25, r25
     fac:	a9 f0       	breq	.+42     	; 0xfd8 <__floatsisf+0x40>
     fae:	f9 2f       	mov	r31, r25
     fb0:	96 e9       	ldi	r25, 0x96	; 150
     fb2:	bb 27       	eor	r27, r27
     fb4:	93 95       	inc	r25
     fb6:	f6 95       	lsr	r31
     fb8:	87 95       	ror	r24
     fba:	77 95       	ror	r23
     fbc:	67 95       	ror	r22
     fbe:	b7 95       	ror	r27
     fc0:	f1 11       	cpse	r31, r1
     fc2:	f8 cf       	rjmp	.-16     	; 0xfb4 <__floatsisf+0x1c>
     fc4:	fa f4       	brpl	.+62     	; 0x1004 <__floatsisf+0x6c>
     fc6:	bb 0f       	add	r27, r27
     fc8:	11 f4       	brne	.+4      	; 0xfce <__floatsisf+0x36>
     fca:	60 ff       	sbrs	r22, 0
     fcc:	1b c0       	rjmp	.+54     	; 0x1004 <__floatsisf+0x6c>
     fce:	6f 5f       	subi	r22, 0xFF	; 255
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	8f 4f       	sbci	r24, 0xFF	; 255
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	16 c0       	rjmp	.+44     	; 0x1004 <__floatsisf+0x6c>
     fd8:	88 23       	and	r24, r24
     fda:	11 f0       	breq	.+4      	; 0xfe0 <__floatsisf+0x48>
     fdc:	96 e9       	ldi	r25, 0x96	; 150
     fde:	11 c0       	rjmp	.+34     	; 0x1002 <__floatsisf+0x6a>
     fe0:	77 23       	and	r23, r23
     fe2:	21 f0       	breq	.+8      	; 0xfec <__floatsisf+0x54>
     fe4:	9e e8       	ldi	r25, 0x8E	; 142
     fe6:	87 2f       	mov	r24, r23
     fe8:	76 2f       	mov	r23, r22
     fea:	05 c0       	rjmp	.+10     	; 0xff6 <__floatsisf+0x5e>
     fec:	66 23       	and	r22, r22
     fee:	71 f0       	breq	.+28     	; 0x100c <__floatsisf+0x74>
     ff0:	96 e8       	ldi	r25, 0x86	; 134
     ff2:	86 2f       	mov	r24, r22
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	2a f0       	brmi	.+10     	; 0x1004 <__floatsisf+0x6c>
     ffa:	9a 95       	dec	r25
     ffc:	66 0f       	add	r22, r22
     ffe:	77 1f       	adc	r23, r23
    1000:	88 1f       	adc	r24, r24
    1002:	da f7       	brpl	.-10     	; 0xffa <__floatsisf+0x62>
    1004:	88 0f       	add	r24, r24
    1006:	96 95       	lsr	r25
    1008:	87 95       	ror	r24
    100a:	97 f9       	bld	r25, 7
    100c:	08 95       	ret

0000100e <__fp_cmp>:
    100e:	99 0f       	add	r25, r25
    1010:	00 08       	sbc	r0, r0
    1012:	55 0f       	add	r21, r21
    1014:	aa 0b       	sbc	r26, r26
    1016:	e0 e8       	ldi	r30, 0x80	; 128
    1018:	fe ef       	ldi	r31, 0xFE	; 254
    101a:	16 16       	cp	r1, r22
    101c:	17 06       	cpc	r1, r23
    101e:	e8 07       	cpc	r30, r24
    1020:	f9 07       	cpc	r31, r25
    1022:	c0 f0       	brcs	.+48     	; 0x1054 <__fp_cmp+0x46>
    1024:	12 16       	cp	r1, r18
    1026:	13 06       	cpc	r1, r19
    1028:	e4 07       	cpc	r30, r20
    102a:	f5 07       	cpc	r31, r21
    102c:	98 f0       	brcs	.+38     	; 0x1054 <__fp_cmp+0x46>
    102e:	62 1b       	sub	r22, r18
    1030:	73 0b       	sbc	r23, r19
    1032:	84 0b       	sbc	r24, r20
    1034:	95 0b       	sbc	r25, r21
    1036:	39 f4       	brne	.+14     	; 0x1046 <__fp_cmp+0x38>
    1038:	0a 26       	eor	r0, r26
    103a:	61 f0       	breq	.+24     	; 0x1054 <__fp_cmp+0x46>
    103c:	23 2b       	or	r18, r19
    103e:	24 2b       	or	r18, r20
    1040:	25 2b       	or	r18, r21
    1042:	21 f4       	brne	.+8      	; 0x104c <__fp_cmp+0x3e>
    1044:	08 95       	ret
    1046:	0a 26       	eor	r0, r26
    1048:	09 f4       	brne	.+2      	; 0x104c <__fp_cmp+0x3e>
    104a:	a1 40       	sbci	r26, 0x01	; 1
    104c:	a6 95       	lsr	r26
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	81 1d       	adc	r24, r1
    1052:	81 1d       	adc	r24, r1
    1054:	08 95       	ret

00001056 <__fp_split3>:
    1056:	57 fd       	sbrc	r21, 7
    1058:	90 58       	subi	r25, 0x80	; 128
    105a:	44 0f       	add	r20, r20
    105c:	55 1f       	adc	r21, r21
    105e:	59 f0       	breq	.+22     	; 0x1076 <__fp_splitA+0x10>
    1060:	5f 3f       	cpi	r21, 0xFF	; 255
    1062:	71 f0       	breq	.+28     	; 0x1080 <__fp_splitA+0x1a>
    1064:	47 95       	ror	r20

00001066 <__fp_splitA>:
    1066:	88 0f       	add	r24, r24
    1068:	97 fb       	bst	r25, 7
    106a:	99 1f       	adc	r25, r25
    106c:	61 f0       	breq	.+24     	; 0x1086 <__fp_splitA+0x20>
    106e:	9f 3f       	cpi	r25, 0xFF	; 255
    1070:	79 f0       	breq	.+30     	; 0x1090 <__fp_splitA+0x2a>
    1072:	87 95       	ror	r24
    1074:	08 95       	ret
    1076:	12 16       	cp	r1, r18
    1078:	13 06       	cpc	r1, r19
    107a:	14 06       	cpc	r1, r20
    107c:	55 1f       	adc	r21, r21
    107e:	f2 cf       	rjmp	.-28     	; 0x1064 <__fp_split3+0xe>
    1080:	46 95       	lsr	r20
    1082:	f1 df       	rcall	.-30     	; 0x1066 <__fp_splitA>
    1084:	08 c0       	rjmp	.+16     	; 0x1096 <__fp_splitA+0x30>
    1086:	16 16       	cp	r1, r22
    1088:	17 06       	cpc	r1, r23
    108a:	18 06       	cpc	r1, r24
    108c:	99 1f       	adc	r25, r25
    108e:	f1 cf       	rjmp	.-30     	; 0x1072 <__fp_splitA+0xc>
    1090:	86 95       	lsr	r24
    1092:	71 05       	cpc	r23, r1
    1094:	61 05       	cpc	r22, r1
    1096:	08 94       	sec
    1098:	08 95       	ret

0000109a <__fp_zero>:
    109a:	e8 94       	clt

0000109c <__fp_szero>:
    109c:	bb 27       	eor	r27, r27
    109e:	66 27       	eor	r22, r22
    10a0:	77 27       	eor	r23, r23
    10a2:	cb 01       	movw	r24, r22
    10a4:	97 f9       	bld	r25, 7
    10a6:	08 95       	ret

000010a8 <__gesf2>:
    10a8:	0e 94 07 08 	call	0x100e	; 0x100e <__fp_cmp>
    10ac:	08 f4       	brcc	.+2      	; 0x10b0 <__gesf2+0x8>
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	08 95       	ret

000010b2 <__mulsf3>:
    10b2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__mulsf3x>
    10b6:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__fp_round>
    10ba:	0e 94 cf 08 	call	0x119e	; 0x119e <__fp_pscA>
    10be:	38 f0       	brcs	.+14     	; 0x10ce <__mulsf3+0x1c>
    10c0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_pscB>
    10c4:	20 f0       	brcs	.+8      	; 0x10ce <__mulsf3+0x1c>
    10c6:	95 23       	and	r25, r21
    10c8:	11 f0       	breq	.+4      	; 0x10ce <__mulsf3+0x1c>
    10ca:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_inf>
    10ce:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__fp_nan>
    10d2:	11 24       	eor	r1, r1
    10d4:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__fp_szero>

000010d8 <__mulsf3x>:
    10d8:	0e 94 2b 08 	call	0x1056	; 0x1056 <__fp_split3>
    10dc:	70 f3       	brcs	.-36     	; 0x10ba <__mulsf3+0x8>

000010de <__mulsf3_pse>:
    10de:	95 9f       	mul	r25, r21
    10e0:	c1 f3       	breq	.-16     	; 0x10d2 <__mulsf3+0x20>
    10e2:	95 0f       	add	r25, r21
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	55 1f       	adc	r21, r21
    10e8:	62 9f       	mul	r22, r18
    10ea:	f0 01       	movw	r30, r0
    10ec:	72 9f       	mul	r23, r18
    10ee:	bb 27       	eor	r27, r27
    10f0:	f0 0d       	add	r31, r0
    10f2:	b1 1d       	adc	r27, r1
    10f4:	63 9f       	mul	r22, r19
    10f6:	aa 27       	eor	r26, r26
    10f8:	f0 0d       	add	r31, r0
    10fa:	b1 1d       	adc	r27, r1
    10fc:	aa 1f       	adc	r26, r26
    10fe:	64 9f       	mul	r22, r20
    1100:	66 27       	eor	r22, r22
    1102:	b0 0d       	add	r27, r0
    1104:	a1 1d       	adc	r26, r1
    1106:	66 1f       	adc	r22, r22
    1108:	82 9f       	mul	r24, r18
    110a:	22 27       	eor	r18, r18
    110c:	b0 0d       	add	r27, r0
    110e:	a1 1d       	adc	r26, r1
    1110:	62 1f       	adc	r22, r18
    1112:	73 9f       	mul	r23, r19
    1114:	b0 0d       	add	r27, r0
    1116:	a1 1d       	adc	r26, r1
    1118:	62 1f       	adc	r22, r18
    111a:	83 9f       	mul	r24, r19
    111c:	a0 0d       	add	r26, r0
    111e:	61 1d       	adc	r22, r1
    1120:	22 1f       	adc	r18, r18
    1122:	74 9f       	mul	r23, r20
    1124:	33 27       	eor	r19, r19
    1126:	a0 0d       	add	r26, r0
    1128:	61 1d       	adc	r22, r1
    112a:	23 1f       	adc	r18, r19
    112c:	84 9f       	mul	r24, r20
    112e:	60 0d       	add	r22, r0
    1130:	21 1d       	adc	r18, r1
    1132:	82 2f       	mov	r24, r18
    1134:	76 2f       	mov	r23, r22
    1136:	6a 2f       	mov	r22, r26
    1138:	11 24       	eor	r1, r1
    113a:	9f 57       	subi	r25, 0x7F	; 127
    113c:	50 40       	sbci	r21, 0x00	; 0
    113e:	9a f0       	brmi	.+38     	; 0x1166 <__mulsf3_pse+0x88>
    1140:	f1 f0       	breq	.+60     	; 0x117e <__mulsf3_pse+0xa0>
    1142:	88 23       	and	r24, r24
    1144:	4a f0       	brmi	.+18     	; 0x1158 <__mulsf3_pse+0x7a>
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	bb 1f       	adc	r27, r27
    114c:	66 1f       	adc	r22, r22
    114e:	77 1f       	adc	r23, r23
    1150:	88 1f       	adc	r24, r24
    1152:	91 50       	subi	r25, 0x01	; 1
    1154:	50 40       	sbci	r21, 0x00	; 0
    1156:	a9 f7       	brne	.-22     	; 0x1142 <__mulsf3_pse+0x64>
    1158:	9e 3f       	cpi	r25, 0xFE	; 254
    115a:	51 05       	cpc	r21, r1
    115c:	80 f0       	brcs	.+32     	; 0x117e <__mulsf3_pse+0xa0>
    115e:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_inf>
    1162:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__fp_szero>
    1166:	5f 3f       	cpi	r21, 0xFF	; 255
    1168:	e4 f3       	brlt	.-8      	; 0x1162 <__mulsf3_pse+0x84>
    116a:	98 3e       	cpi	r25, 0xE8	; 232
    116c:	d4 f3       	brlt	.-12     	; 0x1162 <__mulsf3_pse+0x84>
    116e:	86 95       	lsr	r24
    1170:	77 95       	ror	r23
    1172:	67 95       	ror	r22
    1174:	b7 95       	ror	r27
    1176:	f7 95       	ror	r31
    1178:	e7 95       	ror	r30
    117a:	9f 5f       	subi	r25, 0xFF	; 255
    117c:	c1 f7       	brne	.-16     	; 0x116e <__mulsf3_pse+0x90>
    117e:	fe 2b       	or	r31, r30
    1180:	88 0f       	add	r24, r24
    1182:	91 1d       	adc	r25, r1
    1184:	96 95       	lsr	r25
    1186:	87 95       	ror	r24
    1188:	97 f9       	bld	r25, 7
    118a:	08 95       	ret

0000118c <__fp_inf>:
    118c:	97 f9       	bld	r25, 7
    118e:	9f 67       	ori	r25, 0x7F	; 127
    1190:	80 e8       	ldi	r24, 0x80	; 128
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	08 95       	ret

00001198 <__fp_nan>:
    1198:	9f ef       	ldi	r25, 0xFF	; 255
    119a:	80 ec       	ldi	r24, 0xC0	; 192
    119c:	08 95       	ret

0000119e <__fp_pscA>:
    119e:	00 24       	eor	r0, r0
    11a0:	0a 94       	dec	r0
    11a2:	16 16       	cp	r1, r22
    11a4:	17 06       	cpc	r1, r23
    11a6:	18 06       	cpc	r1, r24
    11a8:	09 06       	cpc	r0, r25
    11aa:	08 95       	ret

000011ac <__fp_pscB>:
    11ac:	00 24       	eor	r0, r0
    11ae:	0a 94       	dec	r0
    11b0:	12 16       	cp	r1, r18
    11b2:	13 06       	cpc	r1, r19
    11b4:	14 06       	cpc	r1, r20
    11b6:	05 06       	cpc	r0, r21
    11b8:	08 95       	ret

000011ba <__fp_round>:
    11ba:	09 2e       	mov	r0, r25
    11bc:	03 94       	inc	r0
    11be:	00 0c       	add	r0, r0
    11c0:	11 f4       	brne	.+4      	; 0x11c6 <__fp_round+0xc>
    11c2:	88 23       	and	r24, r24
    11c4:	52 f0       	brmi	.+20     	; 0x11da <__fp_round+0x20>
    11c6:	bb 0f       	add	r27, r27
    11c8:	40 f4       	brcc	.+16     	; 0x11da <__fp_round+0x20>
    11ca:	bf 2b       	or	r27, r31
    11cc:	11 f4       	brne	.+4      	; 0x11d2 <__fp_round+0x18>
    11ce:	60 ff       	sbrs	r22, 0
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <__fp_round+0x20>
    11d2:	6f 5f       	subi	r22, 0xFF	; 255
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	8f 4f       	sbci	r24, 0xFF	; 255
    11d8:	9f 4f       	sbci	r25, 0xFF	; 255
    11da:	08 95       	ret

000011dc <do_rand>:
    11dc:	8f 92       	push	r8
    11de:	9f 92       	push	r9
    11e0:	af 92       	push	r10
    11e2:	bf 92       	push	r11
    11e4:	cf 92       	push	r12
    11e6:	df 92       	push	r13
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	ec 01       	movw	r28, r24
    11f2:	68 81       	ld	r22, Y
    11f4:	79 81       	ldd	r23, Y+1	; 0x01
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	9b 81       	ldd	r25, Y+3	; 0x03
    11fa:	61 15       	cp	r22, r1
    11fc:	71 05       	cpc	r23, r1
    11fe:	81 05       	cpc	r24, r1
    1200:	91 05       	cpc	r25, r1
    1202:	21 f4       	brne	.+8      	; 0x120c <do_rand+0x30>
    1204:	64 e2       	ldi	r22, 0x24	; 36
    1206:	79 ed       	ldi	r23, 0xD9	; 217
    1208:	8b e5       	ldi	r24, 0x5B	; 91
    120a:	97 e0       	ldi	r25, 0x07	; 7
    120c:	2d e1       	ldi	r18, 0x1D	; 29
    120e:	33 ef       	ldi	r19, 0xF3	; 243
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divmodsi4>
    1218:	49 01       	movw	r8, r18
    121a:	5a 01       	movw	r10, r20
    121c:	9b 01       	movw	r18, r22
    121e:	ac 01       	movw	r20, r24
    1220:	a7 ea       	ldi	r26, 0xA7	; 167
    1222:	b1 e4       	ldi	r27, 0x41	; 65
    1224:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__muluhisi3>
    1228:	6b 01       	movw	r12, r22
    122a:	7c 01       	movw	r14, r24
    122c:	ac ee       	ldi	r26, 0xEC	; 236
    122e:	b4 ef       	ldi	r27, 0xF4	; 244
    1230:	a5 01       	movw	r20, r10
    1232:	94 01       	movw	r18, r8
    1234:	0e 94 82 0c 	call	0x1904	; 0x1904 <__mulohisi3>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	8c 0d       	add	r24, r12
    123e:	9d 1d       	adc	r25, r13
    1240:	ae 1d       	adc	r26, r14
    1242:	bf 1d       	adc	r27, r15
    1244:	b7 ff       	sbrs	r27, 7
    1246:	03 c0       	rjmp	.+6      	; 0x124e <do_rand+0x72>
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	a1 09       	sbc	r26, r1
    124c:	b0 48       	sbci	r27, 0x80	; 128
    124e:	88 83       	st	Y, r24
    1250:	99 83       	std	Y+1, r25	; 0x01
    1252:	aa 83       	std	Y+2, r26	; 0x02
    1254:	bb 83       	std	Y+3, r27	; 0x03
    1256:	9f 77       	andi	r25, 0x7F	; 127
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	bf 90       	pop	r11
    1266:	af 90       	pop	r10
    1268:	9f 90       	pop	r9
    126a:	8f 90       	pop	r8
    126c:	08 95       	ret

0000126e <rand_r>:
    126e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <do_rand>
    1272:	08 95       	ret

00001274 <rand>:
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	91 e0       	ldi	r25, 0x01	; 1
    1278:	0e 94 ee 08 	call	0x11dc	; 0x11dc <do_rand>
    127c:	08 95       	ret

0000127e <srand>:
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    1286:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    128a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    128e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1292:	08 95       	ret

00001294 <fwrite>:
    1294:	a0 e0       	ldi	r26, 0x00	; 0
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e0 e5       	ldi	r30, 0x50	; 80
    129a:	f9 e0       	ldi	r31, 0x09	; 9
    129c:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__prologue_saves__+0xc>
    12a0:	5b 01       	movw	r10, r22
    12a2:	4a 01       	movw	r8, r20
    12a4:	79 01       	movw	r14, r18
    12a6:	d9 01       	movw	r26, r18
    12a8:	13 96       	adiw	r26, 0x03	; 3
    12aa:	2c 91       	ld	r18, X
    12ac:	21 ff       	sbrs	r18, 1
    12ae:	1d c0       	rjmp	.+58     	; 0x12ea <fwrite+0x56>
    12b0:	c0 e0       	ldi	r28, 0x00	; 0
    12b2:	d0 e0       	ldi	r29, 0x00	; 0
    12b4:	c8 15       	cp	r28, r8
    12b6:	d9 05       	cpc	r29, r9
    12b8:	d9 f0       	breq	.+54     	; 0x12f0 <fwrite+0x5c>
    12ba:	8c 01       	movw	r16, r24
    12bc:	6c 01       	movw	r12, r24
    12be:	ca 0c       	add	r12, r10
    12c0:	db 1c       	adc	r13, r11
    12c2:	c8 01       	movw	r24, r16
    12c4:	0c 15       	cp	r16, r12
    12c6:	1d 05       	cpc	r17, r13
    12c8:	71 f0       	breq	.+28     	; 0x12e6 <fwrite+0x52>
    12ca:	0f 5f       	subi	r16, 0xFF	; 255
    12cc:	1f 4f       	sbci	r17, 0xFF	; 255
    12ce:	d7 01       	movw	r26, r14
    12d0:	18 96       	adiw	r26, 0x08	; 8
    12d2:	ed 91       	ld	r30, X+
    12d4:	fc 91       	ld	r31, X
    12d6:	19 97       	sbiw	r26, 0x09	; 9
    12d8:	b7 01       	movw	r22, r14
    12da:	dc 01       	movw	r26, r24
    12dc:	8c 91       	ld	r24, X
    12de:	09 95       	icall
    12e0:	89 2b       	or	r24, r25
    12e2:	79 f3       	breq	.-34     	; 0x12c2 <fwrite+0x2e>
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <fwrite+0x5c>
    12e6:	21 96       	adiw	r28, 0x01	; 1
    12e8:	e5 cf       	rjmp	.-54     	; 0x12b4 <fwrite+0x20>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <fwrite+0x5e>
    12f0:	ce 01       	movw	r24, r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	ec e0       	ldi	r30, 0x0C	; 12
    12f8:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__epilogue_restores__+0xc>

000012fc <printf>:
    12fc:	a0 e0       	ldi	r26, 0x00	; 0
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e8       	ldi	r30, 0x84	; 132
    1302:	f9 e0       	ldi	r31, 0x09	; 9
    1304:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__prologue_saves__+0x20>
    1308:	ae 01       	movw	r20, r28
    130a:	4b 5f       	subi	r20, 0xFB	; 251
    130c:	5f 4f       	sbci	r21, 0xFF	; 255
    130e:	fa 01       	movw	r30, r20
    1310:	61 91       	ld	r22, Z+
    1312:	71 91       	ld	r23, Z+
    1314:	af 01       	movw	r20, r30
    1316:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <__iob+0x2>
    131a:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <__iob+0x3>
    131e:	0e 94 c4 09 	call	0x1388	; 0x1388 <vfprintf>
    1322:	e2 e0       	ldi	r30, 0x02	; 2
    1324:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__epilogue_restores__+0x20>

00001328 <puts>:
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <__iob+0x2>
    1334:	f0 91 6e 03 	lds	r31, 0x036E	; 0x80036e <__iob+0x3>
    1338:	23 81       	ldd	r18, Z+3	; 0x03
    133a:	21 ff       	sbrs	r18, 1
    133c:	1b c0       	rjmp	.+54     	; 0x1374 <puts+0x4c>
    133e:	8c 01       	movw	r16, r24
    1340:	d0 e0       	ldi	r29, 0x00	; 0
    1342:	c0 e0       	ldi	r28, 0x00	; 0
    1344:	f8 01       	movw	r30, r16
    1346:	81 91       	ld	r24, Z+
    1348:	8f 01       	movw	r16, r30
    134a:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <__iob+0x2>
    134e:	70 91 6e 03 	lds	r23, 0x036E	; 0x80036e <__iob+0x3>
    1352:	db 01       	movw	r26, r22
    1354:	18 96       	adiw	r26, 0x08	; 8
    1356:	ed 91       	ld	r30, X+
    1358:	fc 91       	ld	r31, X
    135a:	19 97       	sbiw	r26, 0x09	; 9
    135c:	88 23       	and	r24, r24
    135e:	31 f0       	breq	.+12     	; 0x136c <puts+0x44>
    1360:	09 95       	icall
    1362:	89 2b       	or	r24, r25
    1364:	79 f3       	breq	.-34     	; 0x1344 <puts+0x1c>
    1366:	df ef       	ldi	r29, 0xFF	; 255
    1368:	cf ef       	ldi	r28, 0xFF	; 255
    136a:	ec cf       	rjmp	.-40     	; 0x1344 <puts+0x1c>
    136c:	8a e0       	ldi	r24, 0x0A	; 10
    136e:	09 95       	icall
    1370:	89 2b       	or	r24, r25
    1372:	19 f0       	breq	.+6      	; 0x137a <puts+0x52>
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	9f ef       	ldi	r25, 0xFF	; 255
    1378:	02 c0       	rjmp	.+4      	; 0x137e <puts+0x56>
    137a:	8d 2f       	mov	r24, r29
    137c:	9c 2f       	mov	r25, r28
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	08 95       	ret

00001388 <vfprintf>:
    1388:	ab e0       	ldi	r26, 0x0B	; 11
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea ec       	ldi	r30, 0xCA	; 202
    138e:	f9 e0       	ldi	r31, 0x09	; 9
    1390:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__prologue_saves__>
    1394:	6c 01       	movw	r12, r24
    1396:	7b 01       	movw	r14, r22
    1398:	8a 01       	movw	r16, r20
    139a:	fc 01       	movw	r30, r24
    139c:	17 82       	std	Z+7, r1	; 0x07
    139e:	16 82       	std	Z+6, r1	; 0x06
    13a0:	83 81       	ldd	r24, Z+3	; 0x03
    13a2:	81 ff       	sbrs	r24, 1
    13a4:	cc c1       	rjmp	.+920    	; 0x173e <vfprintf+0x3b6>
    13a6:	ce 01       	movw	r24, r28
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	3c 01       	movw	r6, r24
    13ac:	f6 01       	movw	r30, r12
    13ae:	93 81       	ldd	r25, Z+3	; 0x03
    13b0:	f7 01       	movw	r30, r14
    13b2:	93 fd       	sbrc	r25, 3
    13b4:	85 91       	lpm	r24, Z+
    13b6:	93 ff       	sbrs	r25, 3
    13b8:	81 91       	ld	r24, Z+
    13ba:	7f 01       	movw	r14, r30
    13bc:	88 23       	and	r24, r24
    13be:	09 f4       	brne	.+2      	; 0x13c2 <vfprintf+0x3a>
    13c0:	ba c1       	rjmp	.+884    	; 0x1736 <vfprintf+0x3ae>
    13c2:	85 32       	cpi	r24, 0x25	; 37
    13c4:	39 f4       	brne	.+14     	; 0x13d4 <vfprintf+0x4c>
    13c6:	93 fd       	sbrc	r25, 3
    13c8:	85 91       	lpm	r24, Z+
    13ca:	93 ff       	sbrs	r25, 3
    13cc:	81 91       	ld	r24, Z+
    13ce:	7f 01       	movw	r14, r30
    13d0:	85 32       	cpi	r24, 0x25	; 37
    13d2:	29 f4       	brne	.+10     	; 0x13de <vfprintf+0x56>
    13d4:	b6 01       	movw	r22, r12
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <fputc>
    13dc:	e7 cf       	rjmp	.-50     	; 0x13ac <vfprintf+0x24>
    13de:	91 2c       	mov	r9, r1
    13e0:	21 2c       	mov	r2, r1
    13e2:	31 2c       	mov	r3, r1
    13e4:	ff e1       	ldi	r31, 0x1F	; 31
    13e6:	f3 15       	cp	r31, r3
    13e8:	d8 f0       	brcs	.+54     	; 0x1420 <vfprintf+0x98>
    13ea:	8b 32       	cpi	r24, 0x2B	; 43
    13ec:	79 f0       	breq	.+30     	; 0x140c <vfprintf+0x84>
    13ee:	38 f4       	brcc	.+14     	; 0x13fe <vfprintf+0x76>
    13f0:	80 32       	cpi	r24, 0x20	; 32
    13f2:	79 f0       	breq	.+30     	; 0x1412 <vfprintf+0x8a>
    13f4:	83 32       	cpi	r24, 0x23	; 35
    13f6:	a1 f4       	brne	.+40     	; 0x1420 <vfprintf+0x98>
    13f8:	23 2d       	mov	r18, r3
    13fa:	20 61       	ori	r18, 0x10	; 16
    13fc:	1d c0       	rjmp	.+58     	; 0x1438 <vfprintf+0xb0>
    13fe:	8d 32       	cpi	r24, 0x2D	; 45
    1400:	61 f0       	breq	.+24     	; 0x141a <vfprintf+0x92>
    1402:	80 33       	cpi	r24, 0x30	; 48
    1404:	69 f4       	brne	.+26     	; 0x1420 <vfprintf+0x98>
    1406:	23 2d       	mov	r18, r3
    1408:	21 60       	ori	r18, 0x01	; 1
    140a:	16 c0       	rjmp	.+44     	; 0x1438 <vfprintf+0xb0>
    140c:	83 2d       	mov	r24, r3
    140e:	82 60       	ori	r24, 0x02	; 2
    1410:	38 2e       	mov	r3, r24
    1412:	e3 2d       	mov	r30, r3
    1414:	e4 60       	ori	r30, 0x04	; 4
    1416:	3e 2e       	mov	r3, r30
    1418:	2a c0       	rjmp	.+84     	; 0x146e <vfprintf+0xe6>
    141a:	f3 2d       	mov	r31, r3
    141c:	f8 60       	ori	r31, 0x08	; 8
    141e:	1d c0       	rjmp	.+58     	; 0x145a <vfprintf+0xd2>
    1420:	37 fc       	sbrc	r3, 7
    1422:	2d c0       	rjmp	.+90     	; 0x147e <vfprintf+0xf6>
    1424:	20 ed       	ldi	r18, 0xD0	; 208
    1426:	28 0f       	add	r18, r24
    1428:	2a 30       	cpi	r18, 0x0A	; 10
    142a:	40 f0       	brcs	.+16     	; 0x143c <vfprintf+0xb4>
    142c:	8e 32       	cpi	r24, 0x2E	; 46
    142e:	b9 f4       	brne	.+46     	; 0x145e <vfprintf+0xd6>
    1430:	36 fc       	sbrc	r3, 6
    1432:	81 c1       	rjmp	.+770    	; 0x1736 <vfprintf+0x3ae>
    1434:	23 2d       	mov	r18, r3
    1436:	20 64       	ori	r18, 0x40	; 64
    1438:	32 2e       	mov	r3, r18
    143a:	19 c0       	rjmp	.+50     	; 0x146e <vfprintf+0xe6>
    143c:	36 fe       	sbrs	r3, 6
    143e:	06 c0       	rjmp	.+12     	; 0x144c <vfprintf+0xc4>
    1440:	8a e0       	ldi	r24, 0x0A	; 10
    1442:	98 9e       	mul	r9, r24
    1444:	20 0d       	add	r18, r0
    1446:	11 24       	eor	r1, r1
    1448:	92 2e       	mov	r9, r18
    144a:	11 c0       	rjmp	.+34     	; 0x146e <vfprintf+0xe6>
    144c:	ea e0       	ldi	r30, 0x0A	; 10
    144e:	2e 9e       	mul	r2, r30
    1450:	20 0d       	add	r18, r0
    1452:	11 24       	eor	r1, r1
    1454:	22 2e       	mov	r2, r18
    1456:	f3 2d       	mov	r31, r3
    1458:	f0 62       	ori	r31, 0x20	; 32
    145a:	3f 2e       	mov	r3, r31
    145c:	08 c0       	rjmp	.+16     	; 0x146e <vfprintf+0xe6>
    145e:	8c 36       	cpi	r24, 0x6C	; 108
    1460:	21 f4       	brne	.+8      	; 0x146a <vfprintf+0xe2>
    1462:	83 2d       	mov	r24, r3
    1464:	80 68       	ori	r24, 0x80	; 128
    1466:	38 2e       	mov	r3, r24
    1468:	02 c0       	rjmp	.+4      	; 0x146e <vfprintf+0xe6>
    146a:	88 36       	cpi	r24, 0x68	; 104
    146c:	41 f4       	brne	.+16     	; 0x147e <vfprintf+0xf6>
    146e:	f7 01       	movw	r30, r14
    1470:	93 fd       	sbrc	r25, 3
    1472:	85 91       	lpm	r24, Z+
    1474:	93 ff       	sbrs	r25, 3
    1476:	81 91       	ld	r24, Z+
    1478:	7f 01       	movw	r14, r30
    147a:	81 11       	cpse	r24, r1
    147c:	b3 cf       	rjmp	.-154    	; 0x13e4 <vfprintf+0x5c>
    147e:	98 2f       	mov	r25, r24
    1480:	9f 7d       	andi	r25, 0xDF	; 223
    1482:	95 54       	subi	r25, 0x45	; 69
    1484:	93 30       	cpi	r25, 0x03	; 3
    1486:	28 f4       	brcc	.+10     	; 0x1492 <vfprintf+0x10a>
    1488:	0c 5f       	subi	r16, 0xFC	; 252
    148a:	1f 4f       	sbci	r17, 0xFF	; 255
    148c:	9f e3       	ldi	r25, 0x3F	; 63
    148e:	99 83       	std	Y+1, r25	; 0x01
    1490:	0d c0       	rjmp	.+26     	; 0x14ac <vfprintf+0x124>
    1492:	83 36       	cpi	r24, 0x63	; 99
    1494:	31 f0       	breq	.+12     	; 0x14a2 <vfprintf+0x11a>
    1496:	83 37       	cpi	r24, 0x73	; 115
    1498:	71 f0       	breq	.+28     	; 0x14b6 <vfprintf+0x12e>
    149a:	83 35       	cpi	r24, 0x53	; 83
    149c:	09 f0       	breq	.+2      	; 0x14a0 <vfprintf+0x118>
    149e:	59 c0       	rjmp	.+178    	; 0x1552 <vfprintf+0x1ca>
    14a0:	21 c0       	rjmp	.+66     	; 0x14e4 <vfprintf+0x15c>
    14a2:	f8 01       	movw	r30, r16
    14a4:	80 81       	ld	r24, Z
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	0e 5f       	subi	r16, 0xFE	; 254
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
    14ac:	88 24       	eor	r8, r8
    14ae:	83 94       	inc	r8
    14b0:	91 2c       	mov	r9, r1
    14b2:	53 01       	movw	r10, r6
    14b4:	13 c0       	rjmp	.+38     	; 0x14dc <vfprintf+0x154>
    14b6:	28 01       	movw	r4, r16
    14b8:	f2 e0       	ldi	r31, 0x02	; 2
    14ba:	4f 0e       	add	r4, r31
    14bc:	51 1c       	adc	r5, r1
    14be:	f8 01       	movw	r30, r16
    14c0:	a0 80       	ld	r10, Z
    14c2:	b1 80       	ldd	r11, Z+1	; 0x01
    14c4:	36 fe       	sbrs	r3, 6
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <vfprintf+0x146>
    14c8:	69 2d       	mov	r22, r9
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <vfprintf+0x14a>
    14ce:	6f ef       	ldi	r22, 0xFF	; 255
    14d0:	7f ef       	ldi	r23, 0xFF	; 255
    14d2:	c5 01       	movw	r24, r10
    14d4:	0e 94 b0 0b 	call	0x1760	; 0x1760 <strnlen>
    14d8:	4c 01       	movw	r8, r24
    14da:	82 01       	movw	r16, r4
    14dc:	f3 2d       	mov	r31, r3
    14de:	ff 77       	andi	r31, 0x7F	; 127
    14e0:	3f 2e       	mov	r3, r31
    14e2:	16 c0       	rjmp	.+44     	; 0x1510 <vfprintf+0x188>
    14e4:	28 01       	movw	r4, r16
    14e6:	22 e0       	ldi	r18, 0x02	; 2
    14e8:	42 0e       	add	r4, r18
    14ea:	51 1c       	adc	r5, r1
    14ec:	f8 01       	movw	r30, r16
    14ee:	a0 80       	ld	r10, Z
    14f0:	b1 80       	ldd	r11, Z+1	; 0x01
    14f2:	36 fe       	sbrs	r3, 6
    14f4:	03 c0       	rjmp	.+6      	; 0x14fc <vfprintf+0x174>
    14f6:	69 2d       	mov	r22, r9
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <vfprintf+0x178>
    14fc:	6f ef       	ldi	r22, 0xFF	; 255
    14fe:	7f ef       	ldi	r23, 0xFF	; 255
    1500:	c5 01       	movw	r24, r10
    1502:	0e 94 a5 0b 	call	0x174a	; 0x174a <strnlen_P>
    1506:	4c 01       	movw	r8, r24
    1508:	f3 2d       	mov	r31, r3
    150a:	f0 68       	ori	r31, 0x80	; 128
    150c:	3f 2e       	mov	r3, r31
    150e:	82 01       	movw	r16, r4
    1510:	33 fc       	sbrc	r3, 3
    1512:	1b c0       	rjmp	.+54     	; 0x154a <vfprintf+0x1c2>
    1514:	82 2d       	mov	r24, r2
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	88 16       	cp	r8, r24
    151a:	99 06       	cpc	r9, r25
    151c:	b0 f4       	brcc	.+44     	; 0x154a <vfprintf+0x1c2>
    151e:	b6 01       	movw	r22, r12
    1520:	80 e2       	ldi	r24, 0x20	; 32
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 bb 0b 	call	0x1776	; 0x1776 <fputc>
    1528:	2a 94       	dec	r2
    152a:	f4 cf       	rjmp	.-24     	; 0x1514 <vfprintf+0x18c>
    152c:	f5 01       	movw	r30, r10
    152e:	37 fc       	sbrc	r3, 7
    1530:	85 91       	lpm	r24, Z+
    1532:	37 fe       	sbrs	r3, 7
    1534:	81 91       	ld	r24, Z+
    1536:	5f 01       	movw	r10, r30
    1538:	b6 01       	movw	r22, r12
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <fputc>
    1540:	21 10       	cpse	r2, r1
    1542:	2a 94       	dec	r2
    1544:	21 e0       	ldi	r18, 0x01	; 1
    1546:	82 1a       	sub	r8, r18
    1548:	91 08       	sbc	r9, r1
    154a:	81 14       	cp	r8, r1
    154c:	91 04       	cpc	r9, r1
    154e:	71 f7       	brne	.-36     	; 0x152c <vfprintf+0x1a4>
    1550:	e8 c0       	rjmp	.+464    	; 0x1722 <vfprintf+0x39a>
    1552:	84 36       	cpi	r24, 0x64	; 100
    1554:	11 f0       	breq	.+4      	; 0x155a <vfprintf+0x1d2>
    1556:	89 36       	cpi	r24, 0x69	; 105
    1558:	41 f5       	brne	.+80     	; 0x15aa <vfprintf+0x222>
    155a:	f8 01       	movw	r30, r16
    155c:	37 fe       	sbrs	r3, 7
    155e:	07 c0       	rjmp	.+14     	; 0x156e <vfprintf+0x1e6>
    1560:	60 81       	ld	r22, Z
    1562:	71 81       	ldd	r23, Z+1	; 0x01
    1564:	82 81       	ldd	r24, Z+2	; 0x02
    1566:	93 81       	ldd	r25, Z+3	; 0x03
    1568:	0c 5f       	subi	r16, 0xFC	; 252
    156a:	1f 4f       	sbci	r17, 0xFF	; 255
    156c:	08 c0       	rjmp	.+16     	; 0x157e <vfprintf+0x1f6>
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	07 2e       	mov	r0, r23
    1574:	00 0c       	add	r0, r0
    1576:	88 0b       	sbc	r24, r24
    1578:	99 0b       	sbc	r25, r25
    157a:	0e 5f       	subi	r16, 0xFE	; 254
    157c:	1f 4f       	sbci	r17, 0xFF	; 255
    157e:	f3 2d       	mov	r31, r3
    1580:	ff 76       	andi	r31, 0x6F	; 111
    1582:	3f 2e       	mov	r3, r31
    1584:	97 ff       	sbrs	r25, 7
    1586:	09 c0       	rjmp	.+18     	; 0x159a <vfprintf+0x212>
    1588:	90 95       	com	r25
    158a:	80 95       	com	r24
    158c:	70 95       	com	r23
    158e:	61 95       	neg	r22
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	8f 4f       	sbci	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	f0 68       	ori	r31, 0x80	; 128
    1598:	3f 2e       	mov	r3, r31
    159a:	2a e0       	ldi	r18, 0x0A	; 10
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	a3 01       	movw	r20, r6
    15a0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__ultoa_invert>
    15a4:	88 2e       	mov	r8, r24
    15a6:	86 18       	sub	r8, r6
    15a8:	45 c0       	rjmp	.+138    	; 0x1634 <vfprintf+0x2ac>
    15aa:	85 37       	cpi	r24, 0x75	; 117
    15ac:	31 f4       	brne	.+12     	; 0x15ba <vfprintf+0x232>
    15ae:	23 2d       	mov	r18, r3
    15b0:	2f 7e       	andi	r18, 0xEF	; 239
    15b2:	b2 2e       	mov	r11, r18
    15b4:	2a e0       	ldi	r18, 0x0A	; 10
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	25 c0       	rjmp	.+74     	; 0x1604 <vfprintf+0x27c>
    15ba:	93 2d       	mov	r25, r3
    15bc:	99 7f       	andi	r25, 0xF9	; 249
    15be:	b9 2e       	mov	r11, r25
    15c0:	8f 36       	cpi	r24, 0x6F	; 111
    15c2:	c1 f0       	breq	.+48     	; 0x15f4 <vfprintf+0x26c>
    15c4:	18 f4       	brcc	.+6      	; 0x15cc <vfprintf+0x244>
    15c6:	88 35       	cpi	r24, 0x58	; 88
    15c8:	79 f0       	breq	.+30     	; 0x15e8 <vfprintf+0x260>
    15ca:	b5 c0       	rjmp	.+362    	; 0x1736 <vfprintf+0x3ae>
    15cc:	80 37       	cpi	r24, 0x70	; 112
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <vfprintf+0x24e>
    15d0:	88 37       	cpi	r24, 0x78	; 120
    15d2:	21 f0       	breq	.+8      	; 0x15dc <vfprintf+0x254>
    15d4:	b0 c0       	rjmp	.+352    	; 0x1736 <vfprintf+0x3ae>
    15d6:	e9 2f       	mov	r30, r25
    15d8:	e0 61       	ori	r30, 0x10	; 16
    15da:	be 2e       	mov	r11, r30
    15dc:	b4 fe       	sbrs	r11, 4
    15de:	0d c0       	rjmp	.+26     	; 0x15fa <vfprintf+0x272>
    15e0:	fb 2d       	mov	r31, r11
    15e2:	f4 60       	ori	r31, 0x04	; 4
    15e4:	bf 2e       	mov	r11, r31
    15e6:	09 c0       	rjmp	.+18     	; 0x15fa <vfprintf+0x272>
    15e8:	34 fe       	sbrs	r3, 4
    15ea:	0a c0       	rjmp	.+20     	; 0x1600 <vfprintf+0x278>
    15ec:	29 2f       	mov	r18, r25
    15ee:	26 60       	ori	r18, 0x06	; 6
    15f0:	b2 2e       	mov	r11, r18
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <vfprintf+0x278>
    15f4:	28 e0       	ldi	r18, 0x08	; 8
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <vfprintf+0x27c>
    15fa:	20 e1       	ldi	r18, 0x10	; 16
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <vfprintf+0x27c>
    1600:	20 e1       	ldi	r18, 0x10	; 16
    1602:	32 e0       	ldi	r19, 0x02	; 2
    1604:	f8 01       	movw	r30, r16
    1606:	b7 fe       	sbrs	r11, 7
    1608:	07 c0       	rjmp	.+14     	; 0x1618 <vfprintf+0x290>
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	0c 5f       	subi	r16, 0xFC	; 252
    1614:	1f 4f       	sbci	r17, 0xFF	; 255
    1616:	06 c0       	rjmp	.+12     	; 0x1624 <vfprintf+0x29c>
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 5f       	subi	r16, 0xFE	; 254
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	a3 01       	movw	r20, r6
    1626:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__ultoa_invert>
    162a:	88 2e       	mov	r8, r24
    162c:	86 18       	sub	r8, r6
    162e:	fb 2d       	mov	r31, r11
    1630:	ff 77       	andi	r31, 0x7F	; 127
    1632:	3f 2e       	mov	r3, r31
    1634:	36 fe       	sbrs	r3, 6
    1636:	0d c0       	rjmp	.+26     	; 0x1652 <vfprintf+0x2ca>
    1638:	23 2d       	mov	r18, r3
    163a:	2e 7f       	andi	r18, 0xFE	; 254
    163c:	a2 2e       	mov	r10, r18
    163e:	89 14       	cp	r8, r9
    1640:	58 f4       	brcc	.+22     	; 0x1658 <vfprintf+0x2d0>
    1642:	34 fe       	sbrs	r3, 4
    1644:	0b c0       	rjmp	.+22     	; 0x165c <vfprintf+0x2d4>
    1646:	32 fc       	sbrc	r3, 2
    1648:	09 c0       	rjmp	.+18     	; 0x165c <vfprintf+0x2d4>
    164a:	83 2d       	mov	r24, r3
    164c:	8e 7e       	andi	r24, 0xEE	; 238
    164e:	a8 2e       	mov	r10, r24
    1650:	05 c0       	rjmp	.+10     	; 0x165c <vfprintf+0x2d4>
    1652:	b8 2c       	mov	r11, r8
    1654:	a3 2c       	mov	r10, r3
    1656:	03 c0       	rjmp	.+6      	; 0x165e <vfprintf+0x2d6>
    1658:	b8 2c       	mov	r11, r8
    165a:	01 c0       	rjmp	.+2      	; 0x165e <vfprintf+0x2d6>
    165c:	b9 2c       	mov	r11, r9
    165e:	a4 fe       	sbrs	r10, 4
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <vfprintf+0x2f8>
    1662:	fe 01       	movw	r30, r28
    1664:	e8 0d       	add	r30, r8
    1666:	f1 1d       	adc	r31, r1
    1668:	80 81       	ld	r24, Z
    166a:	80 33       	cpi	r24, 0x30	; 48
    166c:	21 f4       	brne	.+8      	; 0x1676 <vfprintf+0x2ee>
    166e:	9a 2d       	mov	r25, r10
    1670:	99 7e       	andi	r25, 0xE9	; 233
    1672:	a9 2e       	mov	r10, r25
    1674:	09 c0       	rjmp	.+18     	; 0x1688 <vfprintf+0x300>
    1676:	a2 fe       	sbrs	r10, 2
    1678:	06 c0       	rjmp	.+12     	; 0x1686 <vfprintf+0x2fe>
    167a:	b3 94       	inc	r11
    167c:	b3 94       	inc	r11
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <vfprintf+0x300>
    1680:	8a 2d       	mov	r24, r10
    1682:	86 78       	andi	r24, 0x86	; 134
    1684:	09 f0       	breq	.+2      	; 0x1688 <vfprintf+0x300>
    1686:	b3 94       	inc	r11
    1688:	a3 fc       	sbrc	r10, 3
    168a:	11 c0       	rjmp	.+34     	; 0x16ae <vfprintf+0x326>
    168c:	a0 fe       	sbrs	r10, 0
    168e:	06 c0       	rjmp	.+12     	; 0x169c <vfprintf+0x314>
    1690:	b2 14       	cp	r11, r2
    1692:	88 f4       	brcc	.+34     	; 0x16b6 <vfprintf+0x32e>
    1694:	28 0c       	add	r2, r8
    1696:	92 2c       	mov	r9, r2
    1698:	9b 18       	sub	r9, r11
    169a:	0e c0       	rjmp	.+28     	; 0x16b8 <vfprintf+0x330>
    169c:	b2 14       	cp	r11, r2
    169e:	60 f4       	brcc	.+24     	; 0x16b8 <vfprintf+0x330>
    16a0:	b6 01       	movw	r22, r12
    16a2:	80 e2       	ldi	r24, 0x20	; 32
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 bb 0b 	call	0x1776	; 0x1776 <fputc>
    16aa:	b3 94       	inc	r11
    16ac:	f7 cf       	rjmp	.-18     	; 0x169c <vfprintf+0x314>
    16ae:	b2 14       	cp	r11, r2
    16b0:	18 f4       	brcc	.+6      	; 0x16b8 <vfprintf+0x330>
    16b2:	2b 18       	sub	r2, r11
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <vfprintf+0x332>
    16b6:	98 2c       	mov	r9, r8
    16b8:	21 2c       	mov	r2, r1
    16ba:	a4 fe       	sbrs	r10, 4
    16bc:	10 c0       	rjmp	.+32     	; 0x16de <vfprintf+0x356>
    16be:	b6 01       	movw	r22, r12
    16c0:	80 e3       	ldi	r24, 0x30	; 48
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <fputc>
    16c8:	a2 fe       	sbrs	r10, 2
    16ca:	17 c0       	rjmp	.+46     	; 0x16fa <vfprintf+0x372>
    16cc:	a1 fc       	sbrc	r10, 1
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <vfprintf+0x34e>
    16d0:	88 e7       	ldi	r24, 0x78	; 120
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <vfprintf+0x352>
    16d6:	88 e5       	ldi	r24, 0x58	; 88
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	b6 01       	movw	r22, r12
    16dc:	0c c0       	rjmp	.+24     	; 0x16f6 <vfprintf+0x36e>
    16de:	8a 2d       	mov	r24, r10
    16e0:	86 78       	andi	r24, 0x86	; 134
    16e2:	59 f0       	breq	.+22     	; 0x16fa <vfprintf+0x372>
    16e4:	a1 fe       	sbrs	r10, 1
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <vfprintf+0x364>
    16e8:	8b e2       	ldi	r24, 0x2B	; 43
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <vfprintf+0x366>
    16ec:	80 e2       	ldi	r24, 0x20	; 32
    16ee:	a7 fc       	sbrc	r10, 7
    16f0:	8d e2       	ldi	r24, 0x2D	; 45
    16f2:	b6 01       	movw	r22, r12
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 bb 0b 	call	0x1776	; 0x1776 <fputc>
    16fa:	89 14       	cp	r8, r9
    16fc:	38 f4       	brcc	.+14     	; 0x170c <vfprintf+0x384>
    16fe:	b6 01       	movw	r22, r12
    1700:	80 e3       	ldi	r24, 0x30	; 48
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 bb 0b 	call	0x1776	; 0x1776 <fputc>
    1708:	9a 94       	dec	r9
    170a:	f7 cf       	rjmp	.-18     	; 0x16fa <vfprintf+0x372>
    170c:	8a 94       	dec	r8
    170e:	f3 01       	movw	r30, r6
    1710:	e8 0d       	add	r30, r8
    1712:	f1 1d       	adc	r31, r1
    1714:	80 81       	ld	r24, Z
    1716:	b6 01       	movw	r22, r12
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <fputc>
    171e:	81 10       	cpse	r8, r1
    1720:	f5 cf       	rjmp	.-22     	; 0x170c <vfprintf+0x384>
    1722:	22 20       	and	r2, r2
    1724:	09 f4       	brne	.+2      	; 0x1728 <vfprintf+0x3a0>
    1726:	42 ce       	rjmp	.-892    	; 0x13ac <vfprintf+0x24>
    1728:	b6 01       	movw	r22, r12
    172a:	80 e2       	ldi	r24, 0x20	; 32
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <fputc>
    1732:	2a 94       	dec	r2
    1734:	f6 cf       	rjmp	.-20     	; 0x1722 <vfprintf+0x39a>
    1736:	f6 01       	movw	r30, r12
    1738:	86 81       	ldd	r24, Z+6	; 0x06
    173a:	97 81       	ldd	r25, Z+7	; 0x07
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <vfprintf+0x3ba>
    173e:	8f ef       	ldi	r24, 0xFF	; 255
    1740:	9f ef       	ldi	r25, 0xFF	; 255
    1742:	2b 96       	adiw	r28, 0x0b	; 11
    1744:	e2 e1       	ldi	r30, 0x12	; 18
    1746:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__epilogue_restores__>

0000174a <strnlen_P>:
    174a:	fc 01       	movw	r30, r24
    174c:	05 90       	lpm	r0, Z+
    174e:	61 50       	subi	r22, 0x01	; 1
    1750:	70 40       	sbci	r23, 0x00	; 0
    1752:	01 10       	cpse	r0, r1
    1754:	d8 f7       	brcc	.-10     	; 0x174c <strnlen_P+0x2>
    1756:	80 95       	com	r24
    1758:	90 95       	com	r25
    175a:	8e 0f       	add	r24, r30
    175c:	9f 1f       	adc	r25, r31
    175e:	08 95       	ret

00001760 <strnlen>:
    1760:	fc 01       	movw	r30, r24
    1762:	61 50       	subi	r22, 0x01	; 1
    1764:	70 40       	sbci	r23, 0x00	; 0
    1766:	01 90       	ld	r0, Z+
    1768:	01 10       	cpse	r0, r1
    176a:	d8 f7       	brcc	.-10     	; 0x1762 <strnlen+0x2>
    176c:	80 95       	com	r24
    176e:	90 95       	com	r25
    1770:	8e 0f       	add	r24, r30
    1772:	9f 1f       	adc	r25, r31
    1774:	08 95       	ret

00001776 <fputc>:
    1776:	0f 93       	push	r16
    1778:	1f 93       	push	r17
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	fb 01       	movw	r30, r22
    1780:	23 81       	ldd	r18, Z+3	; 0x03
    1782:	21 fd       	sbrc	r18, 1
    1784:	03 c0       	rjmp	.+6      	; 0x178c <fputc+0x16>
    1786:	8f ef       	ldi	r24, 0xFF	; 255
    1788:	9f ef       	ldi	r25, 0xFF	; 255
    178a:	2c c0       	rjmp	.+88     	; 0x17e4 <fputc+0x6e>
    178c:	22 ff       	sbrs	r18, 2
    178e:	16 c0       	rjmp	.+44     	; 0x17bc <fputc+0x46>
    1790:	46 81       	ldd	r20, Z+6	; 0x06
    1792:	57 81       	ldd	r21, Z+7	; 0x07
    1794:	24 81       	ldd	r18, Z+4	; 0x04
    1796:	35 81       	ldd	r19, Z+5	; 0x05
    1798:	42 17       	cp	r20, r18
    179a:	53 07       	cpc	r21, r19
    179c:	44 f4       	brge	.+16     	; 0x17ae <fputc+0x38>
    179e:	a0 81       	ld	r26, Z
    17a0:	b1 81       	ldd	r27, Z+1	; 0x01
    17a2:	9d 01       	movw	r18, r26
    17a4:	2f 5f       	subi	r18, 0xFF	; 255
    17a6:	3f 4f       	sbci	r19, 0xFF	; 255
    17a8:	31 83       	std	Z+1, r19	; 0x01
    17aa:	20 83       	st	Z, r18
    17ac:	8c 93       	st	X, r24
    17ae:	26 81       	ldd	r18, Z+6	; 0x06
    17b0:	37 81       	ldd	r19, Z+7	; 0x07
    17b2:	2f 5f       	subi	r18, 0xFF	; 255
    17b4:	3f 4f       	sbci	r19, 0xFF	; 255
    17b6:	37 83       	std	Z+7, r19	; 0x07
    17b8:	26 83       	std	Z+6, r18	; 0x06
    17ba:	14 c0       	rjmp	.+40     	; 0x17e4 <fputc+0x6e>
    17bc:	8b 01       	movw	r16, r22
    17be:	ec 01       	movw	r28, r24
    17c0:	fb 01       	movw	r30, r22
    17c2:	00 84       	ldd	r0, Z+8	; 0x08
    17c4:	f1 85       	ldd	r31, Z+9	; 0x09
    17c6:	e0 2d       	mov	r30, r0
    17c8:	09 95       	icall
    17ca:	89 2b       	or	r24, r25
    17cc:	e1 f6       	brne	.-72     	; 0x1786 <fputc+0x10>
    17ce:	d8 01       	movw	r26, r16
    17d0:	16 96       	adiw	r26, 0x06	; 6
    17d2:	8d 91       	ld	r24, X+
    17d4:	9c 91       	ld	r25, X
    17d6:	17 97       	sbiw	r26, 0x07	; 7
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	17 96       	adiw	r26, 0x07	; 7
    17dc:	9c 93       	st	X, r25
    17de:	8e 93       	st	-X, r24
    17e0:	16 97       	sbiw	r26, 0x06	; 6
    17e2:	ce 01       	movw	r24, r28
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	08 95       	ret

000017ee <__ultoa_invert>:
    17ee:	fa 01       	movw	r30, r20
    17f0:	aa 27       	eor	r26, r26
    17f2:	28 30       	cpi	r18, 0x08	; 8
    17f4:	51 f1       	breq	.+84     	; 0x184a <__ultoa_invert+0x5c>
    17f6:	20 31       	cpi	r18, 0x10	; 16
    17f8:	81 f1       	breq	.+96     	; 0x185a <__ultoa_invert+0x6c>
    17fa:	e8 94       	clt
    17fc:	6f 93       	push	r22
    17fe:	6e 7f       	andi	r22, 0xFE	; 254
    1800:	6e 5f       	subi	r22, 0xFE	; 254
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	8f 4f       	sbci	r24, 0xFF	; 255
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	af 4f       	sbci	r26, 0xFF	; 255
    180a:	b1 e0       	ldi	r27, 0x01	; 1
    180c:	3e d0       	rcall	.+124    	; 0x188a <__ultoa_invert+0x9c>
    180e:	b4 e0       	ldi	r27, 0x04	; 4
    1810:	3c d0       	rcall	.+120    	; 0x188a <__ultoa_invert+0x9c>
    1812:	67 0f       	add	r22, r23
    1814:	78 1f       	adc	r23, r24
    1816:	89 1f       	adc	r24, r25
    1818:	9a 1f       	adc	r25, r26
    181a:	a1 1d       	adc	r26, r1
    181c:	68 0f       	add	r22, r24
    181e:	79 1f       	adc	r23, r25
    1820:	8a 1f       	adc	r24, r26
    1822:	91 1d       	adc	r25, r1
    1824:	a1 1d       	adc	r26, r1
    1826:	6a 0f       	add	r22, r26
    1828:	71 1d       	adc	r23, r1
    182a:	81 1d       	adc	r24, r1
    182c:	91 1d       	adc	r25, r1
    182e:	a1 1d       	adc	r26, r1
    1830:	20 d0       	rcall	.+64     	; 0x1872 <__ultoa_invert+0x84>
    1832:	09 f4       	brne	.+2      	; 0x1836 <__ultoa_invert+0x48>
    1834:	68 94       	set
    1836:	3f 91       	pop	r19
    1838:	2a e0       	ldi	r18, 0x0A	; 10
    183a:	26 9f       	mul	r18, r22
    183c:	11 24       	eor	r1, r1
    183e:	30 19       	sub	r19, r0
    1840:	30 5d       	subi	r19, 0xD0	; 208
    1842:	31 93       	st	Z+, r19
    1844:	de f6       	brtc	.-74     	; 0x17fc <__ultoa_invert+0xe>
    1846:	cf 01       	movw	r24, r30
    1848:	08 95       	ret
    184a:	46 2f       	mov	r20, r22
    184c:	47 70       	andi	r20, 0x07	; 7
    184e:	40 5d       	subi	r20, 0xD0	; 208
    1850:	41 93       	st	Z+, r20
    1852:	b3 e0       	ldi	r27, 0x03	; 3
    1854:	0f d0       	rcall	.+30     	; 0x1874 <__ultoa_invert+0x86>
    1856:	c9 f7       	brne	.-14     	; 0x184a <__ultoa_invert+0x5c>
    1858:	f6 cf       	rjmp	.-20     	; 0x1846 <__ultoa_invert+0x58>
    185a:	46 2f       	mov	r20, r22
    185c:	4f 70       	andi	r20, 0x0F	; 15
    185e:	40 5d       	subi	r20, 0xD0	; 208
    1860:	4a 33       	cpi	r20, 0x3A	; 58
    1862:	18 f0       	brcs	.+6      	; 0x186a <__ultoa_invert+0x7c>
    1864:	49 5d       	subi	r20, 0xD9	; 217
    1866:	31 fd       	sbrc	r19, 1
    1868:	40 52       	subi	r20, 0x20	; 32
    186a:	41 93       	st	Z+, r20
    186c:	02 d0       	rcall	.+4      	; 0x1872 <__ultoa_invert+0x84>
    186e:	a9 f7       	brne	.-22     	; 0x185a <__ultoa_invert+0x6c>
    1870:	ea cf       	rjmp	.-44     	; 0x1846 <__ultoa_invert+0x58>
    1872:	b4 e0       	ldi	r27, 0x04	; 4
    1874:	a6 95       	lsr	r26
    1876:	97 95       	ror	r25
    1878:	87 95       	ror	r24
    187a:	77 95       	ror	r23
    187c:	67 95       	ror	r22
    187e:	ba 95       	dec	r27
    1880:	c9 f7       	brne	.-14     	; 0x1874 <__ultoa_invert+0x86>
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	61 05       	cpc	r22, r1
    1886:	71 05       	cpc	r23, r1
    1888:	08 95       	ret
    188a:	9b 01       	movw	r18, r22
    188c:	ac 01       	movw	r20, r24
    188e:	0a 2e       	mov	r0, r26
    1890:	06 94       	lsr	r0
    1892:	57 95       	ror	r21
    1894:	47 95       	ror	r20
    1896:	37 95       	ror	r19
    1898:	27 95       	ror	r18
    189a:	ba 95       	dec	r27
    189c:	c9 f7       	brne	.-14     	; 0x1890 <__ultoa_invert+0xa2>
    189e:	62 0f       	add	r22, r18
    18a0:	73 1f       	adc	r23, r19
    18a2:	84 1f       	adc	r24, r20
    18a4:	95 1f       	adc	r25, r21
    18a6:	a0 1d       	adc	r26, r0
    18a8:	08 95       	ret

000018aa <__divmodsi4>:
    18aa:	05 2e       	mov	r0, r21
    18ac:	97 fb       	bst	r25, 7
    18ae:	1e f4       	brtc	.+6      	; 0x18b6 <__divmodsi4+0xc>
    18b0:	00 94       	com	r0
    18b2:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__negsi2>
    18b6:	57 fd       	sbrc	r21, 7
    18b8:	07 d0       	rcall	.+14     	; 0x18c8 <__divmodsi4_neg2>
    18ba:	0e 94 be 0c 	call	0x197c	; 0x197c <__udivmodsi4>
    18be:	07 fc       	sbrc	r0, 7
    18c0:	03 d0       	rcall	.+6      	; 0x18c8 <__divmodsi4_neg2>
    18c2:	4e f4       	brtc	.+18     	; 0x18d6 <__divmodsi4_exit>
    18c4:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <__negsi2>

000018c8 <__divmodsi4_neg2>:
    18c8:	50 95       	com	r21
    18ca:	40 95       	com	r20
    18cc:	30 95       	com	r19
    18ce:	21 95       	neg	r18
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	4f 4f       	sbci	r20, 0xFF	; 255
    18d4:	5f 4f       	sbci	r21, 0xFF	; 255

000018d6 <__divmodsi4_exit>:
    18d6:	08 95       	ret

000018d8 <__negsi2>:
    18d8:	90 95       	com	r25
    18da:	80 95       	com	r24
    18dc:	70 95       	com	r23
    18de:	61 95       	neg	r22
    18e0:	7f 4f       	sbci	r23, 0xFF	; 255
    18e2:	8f 4f       	sbci	r24, 0xFF	; 255
    18e4:	9f 4f       	sbci	r25, 0xFF	; 255
    18e6:	08 95       	ret

000018e8 <__muluhisi3>:
    18e8:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__umulhisi3>
    18ec:	a5 9f       	mul	r26, r21
    18ee:	90 0d       	add	r25, r0
    18f0:	b4 9f       	mul	r27, r20
    18f2:	90 0d       	add	r25, r0
    18f4:	a4 9f       	mul	r26, r20
    18f6:	80 0d       	add	r24, r0
    18f8:	91 1d       	adc	r25, r1
    18fa:	11 24       	eor	r1, r1
    18fc:	08 95       	ret

000018fe <__mulshisi3>:
    18fe:	b7 ff       	sbrs	r27, 7
    1900:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__muluhisi3>

00001904 <__mulohisi3>:
    1904:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__muluhisi3>
    1908:	82 1b       	sub	r24, r18
    190a:	93 0b       	sbc	r25, r19
    190c:	08 95       	ret

0000190e <__prologue_saves__>:
    190e:	2f 92       	push	r2
    1910:	3f 92       	push	r3
    1912:	4f 92       	push	r4
    1914:	5f 92       	push	r5
    1916:	6f 92       	push	r6
    1918:	7f 92       	push	r7
    191a:	8f 92       	push	r8
    191c:	9f 92       	push	r9
    191e:	af 92       	push	r10
    1920:	bf 92       	push	r11
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	ca 1b       	sub	r28, r26
    1938:	db 0b       	sbc	r29, r27
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	09 94       	ijmp

00001946 <__epilogue_restores__>:
    1946:	2a 88       	ldd	r2, Y+18	; 0x12
    1948:	39 88       	ldd	r3, Y+17	; 0x11
    194a:	48 88       	ldd	r4, Y+16	; 0x10
    194c:	5f 84       	ldd	r5, Y+15	; 0x0f
    194e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1950:	7d 84       	ldd	r7, Y+13	; 0x0d
    1952:	8c 84       	ldd	r8, Y+12	; 0x0c
    1954:	9b 84       	ldd	r9, Y+11	; 0x0b
    1956:	aa 84       	ldd	r10, Y+10	; 0x0a
    1958:	b9 84       	ldd	r11, Y+9	; 0x09
    195a:	c8 84       	ldd	r12, Y+8	; 0x08
    195c:	df 80       	ldd	r13, Y+7	; 0x07
    195e:	ee 80       	ldd	r14, Y+6	; 0x06
    1960:	fd 80       	ldd	r15, Y+5	; 0x05
    1962:	0c 81       	ldd	r16, Y+4	; 0x04
    1964:	1b 81       	ldd	r17, Y+3	; 0x03
    1966:	aa 81       	ldd	r26, Y+2	; 0x02
    1968:	b9 81       	ldd	r27, Y+1	; 0x01
    196a:	ce 0f       	add	r28, r30
    196c:	d1 1d       	adc	r29, r1
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	ed 01       	movw	r28, r26
    197a:	08 95       	ret

0000197c <__udivmodsi4>:
    197c:	a1 e2       	ldi	r26, 0x21	; 33
    197e:	1a 2e       	mov	r1, r26
    1980:	aa 1b       	sub	r26, r26
    1982:	bb 1b       	sub	r27, r27
    1984:	fd 01       	movw	r30, r26
    1986:	0d c0       	rjmp	.+26     	; 0x19a2 <__udivmodsi4_ep>

00001988 <__udivmodsi4_loop>:
    1988:	aa 1f       	adc	r26, r26
    198a:	bb 1f       	adc	r27, r27
    198c:	ee 1f       	adc	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	a2 17       	cp	r26, r18
    1992:	b3 07       	cpc	r27, r19
    1994:	e4 07       	cpc	r30, r20
    1996:	f5 07       	cpc	r31, r21
    1998:	20 f0       	brcs	.+8      	; 0x19a2 <__udivmodsi4_ep>
    199a:	a2 1b       	sub	r26, r18
    199c:	b3 0b       	sbc	r27, r19
    199e:	e4 0b       	sbc	r30, r20
    19a0:	f5 0b       	sbc	r31, r21

000019a2 <__udivmodsi4_ep>:
    19a2:	66 1f       	adc	r22, r22
    19a4:	77 1f       	adc	r23, r23
    19a6:	88 1f       	adc	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	1a 94       	dec	r1
    19ac:	69 f7       	brne	.-38     	; 0x1988 <__udivmodsi4_loop>
    19ae:	60 95       	com	r22
    19b0:	70 95       	com	r23
    19b2:	80 95       	com	r24
    19b4:	90 95       	com	r25
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	bd 01       	movw	r22, r26
    19bc:	cf 01       	movw	r24, r30
    19be:	08 95       	ret

000019c0 <__umulhisi3>:
    19c0:	a2 9f       	mul	r26, r18
    19c2:	b0 01       	movw	r22, r0
    19c4:	b3 9f       	mul	r27, r19
    19c6:	c0 01       	movw	r24, r0
    19c8:	a3 9f       	mul	r26, r19
    19ca:	70 0d       	add	r23, r0
    19cc:	81 1d       	adc	r24, r1
    19ce:	11 24       	eor	r1, r1
    19d0:	91 1d       	adc	r25, r1
    19d2:	b2 9f       	mul	r27, r18
    19d4:	70 0d       	add	r23, r0
    19d6:	81 1d       	adc	r24, r1
    19d8:	11 24       	eor	r1, r1
    19da:	91 1d       	adc	r25, r1
    19dc:	08 95       	ret

000019de <_exit>:
    19de:	f8 94       	cli

000019e0 <__stop_program>:
    19e0:	ff cf       	rjmp	.-2      	; 0x19e0 <__stop_program>
