
FinalProj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00001db8  00001e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001db8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001db  00800196  00800196  00001ee2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ee2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023d7  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb8  00000000  00000000  0000446f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001129  00000000  00000000  00005327  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  00006450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079a  00000000  00000000  000068a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a0c  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00008a46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__vector_1>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_19>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e8 eb       	ldi	r30, 0xB8	; 184
      c8:	fd e1       	ldi	r31, 0x1D	; 29
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a6 39       	cpi	r26, 0x96	; 150
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	23 e0       	ldi	r18, 0x03	; 3
      d8:	a6 e9       	ldi	r26, 0x96	; 150
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a1 37       	cpi	r26, 0x71	; 113
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 32 07 	call	0xe64	; 0xe64 <main>
      ea:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <SPI_LEDtransmit>:
			store_LED(LEDSTRIP, i, Brightness, 0, 0, 0);	// Clears LED[i]
		}
	}

	LED_Display(LEDSTRIP, NUM_LEDS);
}
      f2:	8e bd       	out	0x2e, r24	; 46
      f4:	0d b4       	in	r0, 0x2d	; 45
      f6:	07 fe       	sbrs	r0, 7
      f8:	fd cf       	rjmp	.-6      	; 0xf4 <SPI_LEDtransmit+0x2>
      fa:	08 95       	ret

000000fc <strip_init>:
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	0e c0       	rjmp	.+28     	; 0x11e <strip_init+0x22>
     102:	fc 01       	movw	r30, r24
     104:	e2 0f       	add	r30, r18
     106:	f3 1f       	adc	r31, r19
     108:	10 82       	st	Z, r1
     10a:	14 ae       	std	Z+60, r1	; 0x3c
     10c:	df 01       	movw	r26, r30
     10e:	a8 58       	subi	r26, 0x88	; 136
     110:	bf 4f       	sbci	r27, 0xFF	; 255
     112:	1c 92       	st	X, r1
     114:	ec 54       	subi	r30, 0x4C	; 76
     116:	ff 4f       	sbci	r31, 0xFF	; 255
     118:	10 82       	st	Z, r1
     11a:	2f 5f       	subi	r18, 0xFF	; 255
     11c:	3f 4f       	sbci	r19, 0xFF	; 255
     11e:	26 17       	cp	r18, r22
     120:	37 07       	cpc	r19, r23
     122:	7c f3       	brlt	.-34     	; 0x102 <strip_init+0x6>
     124:	08 95       	ret

00000126 <LED_StartSignal>:
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     13e:	08 95       	ret

00000140 <LED_EndSignal>:
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     146:	8f ef       	ldi	r24, 0xFF	; 255
     148:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     158:	08 95       	ret

0000015a <LED_ByteSend>:
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	c6 2f       	mov	r28, r22
     162:	d4 2f       	mov	r29, r20
     164:	12 2f       	mov	r17, r18
     166:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     16a:	81 2f       	mov	r24, r17
     16c:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     170:	8d 2f       	mov	r24, r29
     172:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     176:	8c 2f       	mov	r24, r28
     178:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	1f 91       	pop	r17
     182:	08 95       	ret

00000184 <StripCLR>:
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	ec 01       	movw	r28, r24
     18e:	8b 01       	movw	r16, r22
     190:	0e 94 93 00 	call	0x126	; 0x126 <LED_StartSignal>
     194:	b8 01       	movw	r22, r16
     196:	ce 01       	movw	r24, r28
     198:	0e 94 7e 00 	call	0xfc	; 0xfc <strip_init>
     19c:	c0 e0       	ldi	r28, 0x00	; 0
     19e:	d0 e0       	ldi	r29, 0x00	; 0
     1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <StripCLR+0x2c>
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_ByteSend>
     1ae:	21 96       	adiw	r28, 0x01	; 1
     1b0:	c0 17       	cp	r28, r16
     1b2:	d1 07       	cpc	r29, r17
     1b4:	b4 f3       	brlt	.-20     	; 0x1a2 <StripCLR+0x1e>
     1b6:	0e 94 a0 00 	call	0x140	; 0x140 <LED_EndSignal>
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	1f 91       	pop	r17
     1c0:	0f 91       	pop	r16
     1c2:	08 95       	ret

000001c4 <store_LED>:
     1c4:	ef 92       	push	r14
     1c6:	0f 93       	push	r16
     1c8:	6c 33       	cpi	r22, 0x3C	; 60
     1ca:	71 05       	cpc	r23, r1
     1cc:	68 f4       	brcc	.+26     	; 0x1e8 <store_LED+0x24>
     1ce:	fc 01       	movw	r30, r24
     1d0:	e6 0f       	add	r30, r22
     1d2:	f7 1f       	adc	r31, r23
     1d4:	40 83       	st	Z, r20
     1d6:	24 af       	std	Z+60, r18	; 0x3c
     1d8:	df 01       	movw	r26, r30
     1da:	a8 58       	subi	r26, 0x88	; 136
     1dc:	bf 4f       	sbci	r27, 0xFF	; 255
     1de:	0c 93       	st	X, r16
     1e0:	ec 54       	subi	r30, 0x4C	; 76
     1e2:	ff 4f       	sbci	r31, 0xFF	; 255
     1e4:	e0 82       	st	Z, r14
     1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <store_LED+0x2c>
     1e8:	8a e1       	ldi	r24, 0x1A	; 26
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <puts>
     1f0:	0f 91       	pop	r16
     1f2:	ef 90       	pop	r14
     1f4:	08 95       	ret

000001f6 <LED_Display>:
     1f6:	cf 92       	push	r12
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	8c 01       	movw	r16, r24
     208:	7b 01       	movw	r14, r22
     20a:	0e 94 93 00 	call	0x126	; 0x126 <LED_StartSignal>
     20e:	c0 e0       	ldi	r28, 0x00	; 0
     210:	d0 e0       	ldi	r29, 0x00	; 0
     212:	c1 2c       	mov	r12, r1
     214:	d1 2c       	mov	r13, r1
     216:	21 c0       	rjmp	.+66     	; 0x25a <LED_Display+0x64>
     218:	f8 01       	movw	r30, r16
     21a:	ec 0f       	add	r30, r28
     21c:	fd 1f       	adc	r31, r29
     21e:	80 81       	ld	r24, Z
     220:	88 23       	and	r24, r24
     222:	a1 f0       	breq	.+40     	; 0x24c <LED_Display+0x56>
     224:	f8 01       	movw	r30, r16
     226:	ec 0f       	add	r30, r28
     228:	fd 1f       	adc	r31, r29
     22a:	9f 01       	movw	r18, r30
     22c:	2c 54       	subi	r18, 0x4C	; 76
     22e:	3f 4f       	sbci	r19, 0xFF	; 255
     230:	af 01       	movw	r20, r30
     232:	48 58       	subi	r20, 0x88	; 136
     234:	5f 4f       	sbci	r21, 0xFF	; 255
     236:	d9 01       	movw	r26, r18
     238:	2c 91       	ld	r18, X
     23a:	da 01       	movw	r26, r20
     23c:	4c 91       	ld	r20, X
     23e:	64 ad       	ldd	r22, Z+60	; 0x3c
     240:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_ByteSend>
     244:	cc 24       	eor	r12, r12
     246:	c3 94       	inc	r12
     248:	d1 2c       	mov	r13, r1
     24a:	06 c0       	rjmp	.+12     	; 0x258 <LED_Display+0x62>
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_ByteSend>
     258:	21 96       	adiw	r28, 0x01	; 1
     25a:	ce 15       	cp	r28, r14
     25c:	df 05       	cpc	r29, r15
     25e:	e4 f2       	brlt	.-72     	; 0x218 <LED_Display+0x22>
     260:	cd 28       	or	r12, r13
     262:	11 f0       	breq	.+4      	; 0x268 <LED_Display+0x72>
     264:	0e 94 a0 00 	call	0x140	; 0x140 <LED_EndSignal>
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	1f 91       	pop	r17
     26e:	0f 91       	pop	r16
     270:	ff 90       	pop	r15
     272:	ef 90       	pop	r14
     274:	df 90       	pop	r13
     276:	cf 90       	pop	r12
     278:	08 95       	ret

0000027a <rand_Pixel>:
// Returns a Random Pixel Value
uint8_t rand_Pixel(void) {
	uint8_t Pixel = rand() % (0xFF + 1);
     27a:	0e 94 25 0b 	call	0x164a	; 0x164a <rand>
     27e:	90 78       	andi	r25, 0x80	; 128
     280:	99 23       	and	r25, r25
     282:	1c f4       	brge	.+6      	; 0x28a <rand_Pixel+0x10>
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	9f 6f       	ori	r25, 0xFF	; 255
     288:	01 96       	adiw	r24, 0x01	; 1
	return Pixel;
}
     28a:	08 95       	ret

0000028c <LED_Bounce_Pattern>:
// Creates Bouncing pattern between st and en (LED index 0 -> (NUM_LEDS - 1)). s-len::Snake Length
void LED_Bounce_Pattern(strip* LEDSTRIP, int st, int en, int s_len, int strip_len) {
     28c:	2f 92       	push	r2
     28e:	3f 92       	push	r3
     290:	4f 92       	push	r4
     292:	5f 92       	push	r5
     294:	6f 92       	push	r6
     296:	7f 92       	push	r7
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	64 97       	sbiw	r28, 0x14	; 20
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	9a 87       	std	Y+10, r25	; 0x0a
     2c2:	89 87       	std	Y+9, r24	; 0x09
     2c4:	2b 01       	movw	r4, r22
     2c6:	1a 01       	movw	r2, r20
     2c8:	59 01       	movw	r10, r18
     2ca:	1c 87       	std	Y+12, r17	; 0x0c
     2cc:	0b 87       	std	Y+11, r16	; 0x0b
	int Brightness = 0xFF;
	int R = rand_Pixel();
     2ce:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     2d2:	8e 87       	std	Y+14, r24	; 0x0e
	int G = rand_Pixel();
     2d4:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     2d8:	8f 87       	std	Y+15, r24	; 0x0f
	int B = rand_Pixel();
     2da:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     2de:	18 2f       	mov	r17, r24
	int path_len = en - st;
     2e0:	91 01       	movw	r18, r2
     2e2:	24 19       	sub	r18, r4
     2e4:	35 09       	sbc	r19, r5
     2e6:	39 8b       	std	Y+17, r19	; 0x11
     2e8:	28 8b       	std	Y+16, r18	; 0x10
	int delay = 70 + (int)((float)(10 - s_len) * (3000.00 / 10.00));
     2ea:	6a e0       	ldi	r22, 0x0A	; 10
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	6a 19       	sub	r22, r10
     2f0:	7b 09       	sbc	r23, r11
     2f2:	07 2e       	mov	r0, r23
     2f4:	00 0c       	add	r0, r0
     2f6:	88 0b       	sbc	r24, r24
     2f8:	99 0b       	sbc	r25, r25
     2fa:	0e 94 b7 09 	call	0x136e	; 0x136e <__floatsisf>
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	46 e9       	ldi	r20, 0x96	; 150
     304:	53 e4       	ldi	r21, 0x43	; 67
     306:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     30a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <__fixsfsi>
     30e:	3b 01       	movw	r6, r22
     310:	36 e4       	ldi	r19, 0x46	; 70
     312:	63 0e       	add	r6, r19
     314:	71 1c       	adc	r7, r1
	// Get snake moving forward
	for (int i = 0; i < path_len; i++) {
     316:	81 2c       	mov	r8, r1
     318:	91 2c       	mov	r9, r1
     31a:	1d 87       	std	Y+13, r17	; 0x0d
     31c:	19 81       	ldd	r17, Y+1	; 0x01
     31e:	e0 c0       	rjmp	.+448    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
		// Populating Snake
		for (int j = 0; j < s_len; j++) {
			if ((j+i+st) <= en) {
     320:	6b 89       	ldd	r22, Y+19	; 0x13
     322:	7c 89       	ldd	r23, Y+20	; 0x14
     324:	68 0d       	add	r22, r8
     326:	79 1d       	adc	r23, r9
     328:	64 0d       	add	r22, r4
     32a:	75 1d       	adc	r23, r5
     32c:	26 16       	cp	r2, r22
     32e:	37 06       	cpc	r3, r23
     330:	44 f0       	brlt	.+16     	; 0x342 <LED_Bounce_Pattern+0xb6>
				store_LED(LEDSTRIP, i+j+st, Brightness, R, G, B);	// Start at st and goes to that en
     332:	ed 84       	ldd	r14, Y+13	; 0x0d
     334:	0f 85       	ldd	r16, Y+15	; 0x0f
     336:	2e 85       	ldd	r18, Y+14	; 0x0e
     338:	4f ef       	ldi	r20, 0xFF	; 255
     33a:	89 85       	ldd	r24, Y+9	; 0x09
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
			}
			LED_Display(LEDSTRIP, strip_len);
     342:	6b 85       	ldd	r22, Y+11	; 0x0b
     344:	7c 85       	ldd	r23, Y+12	; 0x0c
     346:	89 85       	ldd	r24, Y+9	; 0x09
     348:	9a 85       	ldd	r25, Y+10	; 0x0a
     34a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
			_delay_us(delay);
     34e:	b3 01       	movw	r22, r6
     350:	07 2c       	mov	r0, r7
     352:	00 0c       	add	r0, r0
     354:	88 0b       	sbc	r24, r24
     356:	99 0b       	sbc	r25, r25
     358:	0e 94 b7 09 	call	0x136e	; 0x136e <__floatsisf>
     35c:	6b 01       	movw	r12, r22
     35e:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     360:	2b ea       	ldi	r18, 0xAB	; 171
     362:	3a ea       	ldi	r19, 0xAA	; 170
     364:	4a ea       	ldi	r20, 0xAA	; 170
     366:	50 e4       	ldi	r21, 0x40	; 64
     368:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     36c:	69 83       	std	Y+1, r22	; 0x01
     36e:	7a 83       	std	Y+2, r23	; 0x02
     370:	8b 83       	std	Y+3, r24	; 0x03
     372:	9c 83       	std	Y+4, r25	; 0x04
	__tmp2 = ((F_CPU) / 4e6) * __us;
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e8       	ldi	r20, 0x80	; 128
     37a:	50 e4       	ldi	r21, 0x40	; 64
     37c:	c7 01       	movw	r24, r14
     37e:	b6 01       	movw	r22, r12
     380:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     384:	6d 83       	std	Y+5, r22	; 0x05
     386:	7e 83       	std	Y+6, r23	; 0x06
     388:	8f 83       	std	Y+7, r24	; 0x07
     38a:	98 87       	std	Y+8, r25	; 0x08
	if (__tmp < 1.0)
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	40 e8       	ldi	r20, 0x80	; 128
     392:	5f e3       	ldi	r21, 0x3F	; 63
     394:	69 81       	ldd	r22, Y+1	; 0x01
     396:	7a 81       	ldd	r23, Y+2	; 0x02
     398:	8b 81       	ldd	r24, Y+3	; 0x03
     39a:	9c 81       	ldd	r25, Y+4	; 0x04
     39c:	0e 94 08 09 	call	0x1210	; 0x1210 <__cmpsf2>
     3a0:	88 23       	and	r24, r24
     3a2:	0c f4       	brge	.+2      	; 0x3a6 <LED_Bounce_Pattern+0x11a>
     3a4:	73 c0       	rjmp	.+230    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
		__ticks = 1;
	else if (__tmp2 > 65535)
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	3f ef       	ldi	r19, 0xFF	; 255
     3aa:	4f e7       	ldi	r20, 0x7F	; 127
     3ac:	57 e4       	ldi	r21, 0x47	; 71
     3ae:	6d 81       	ldd	r22, Y+5	; 0x05
     3b0:	7e 81       	ldd	r23, Y+6	; 0x06
     3b2:	8f 81       	ldd	r24, Y+7	; 0x07
     3b4:	98 85       	ldd	r25, Y+8	; 0x08
     3b6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__gesf2>
     3ba:	18 16       	cp	r1, r24
     3bc:	0c f0       	brlt	.+2      	; 0x3c0 <LED_Bounce_Pattern+0x134>
     3be:	48 c0       	rjmp	.+144    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
	{
		_delay_ms(__us / 1000.0);
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	4a e7       	ldi	r20, 0x7A	; 122
     3c6:	54 e4       	ldi	r21, 0x44	; 68
     3c8:	c7 01       	movw	r24, r14
     3ca:	b6 01       	movw	r22, r12
     3cc:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     3d0:	69 83       	std	Y+1, r22	; 0x01
     3d2:	7a 83       	std	Y+2, r23	; 0x02
     3d4:	8b 83       	std	Y+3, r24	; 0x03
     3d6:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	4a e7       	ldi	r20, 0x7A	; 122
     3de:	55 e4       	ldi	r21, 0x45	; 69
     3e0:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     3e4:	6b 01       	movw	r12, r22
     3e6:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e8       	ldi	r20, 0x80	; 128
     3ee:	5f e3       	ldi	r21, 0x3F	; 63
     3f0:	0e 94 08 09 	call	0x1210	; 0x1210 <__cmpsf2>
     3f4:	88 23       	and	r24, r24
     3f6:	34 f1       	brlt	.+76     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		__ticks = 1;
	else if (__tmp > 65535)
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	3f ef       	ldi	r19, 0xFF	; 255
     3fc:	4f e7       	ldi	r20, 0x7F	; 127
     3fe:	57 e4       	ldi	r21, 0x47	; 71
     400:	c7 01       	movw	r24, r14
     402:	b6 01       	movw	r22, r12
     404:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__gesf2>
     408:	18 16       	cp	r1, r24
     40a:	bc f4       	brge	.+46     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	40 e2       	ldi	r20, 0x20	; 32
     412:	51 e4       	ldi	r21, 0x41	; 65
     414:	69 81       	ldd	r22, Y+1	; 0x01
     416:	7a 81       	ldd	r23, Y+2	; 0x02
     418:	8b 81       	ldd	r24, Y+3	; 0x03
     41a:	9c 81       	ldd	r25, Y+4	; 0x04
     41c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     420:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     424:	06 c0       	rjmp	.+12     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     426:	80 e9       	ldi	r24, 0x90	; 144
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	f1 f7       	brne	.-4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     42e:	61 50       	subi	r22, 0x01	; 1
     430:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     432:	61 15       	cp	r22, r1
     434:	71 05       	cpc	r23, r1
     436:	b9 f7       	brne	.-18     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     438:	2a c0       	rjmp	.+84     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     43a:	c7 01       	movw	r24, r14
     43c:	b6 01       	movw	r22, r12
     43e:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	cb 01       	movw	r24, r22
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     44e:	1f c0       	rjmp	.+62     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	4f e7       	ldi	r20, 0x7F	; 127
     456:	53 e4       	ldi	r21, 0x43	; 67
     458:	69 81       	ldd	r22, Y+1	; 0x01
     45a:	7a 81       	ldd	r23, Y+2	; 0x02
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	9c 81       	ldd	r25, Y+4	; 0x04
     460:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__gesf2>
     464:	18 16       	cp	r1, r24
     466:	54 f4       	brge	.+20     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     468:	6d 81       	ldd	r22, Y+5	; 0x05
     46a:	7e 81       	ldd	r23, Y+6	; 0x06
     46c:	8f 81       	ldd	r24, Y+7	; 0x07
     46e:	98 85       	ldd	r25, Y+8	; 0x08
     470:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     474:	cb 01       	movw	r24, r22
     476:	01 97       	sbiw	r24, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     47a:	0c c0       	rjmp	.+24     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     47c:	69 81       	ldd	r22, Y+1	; 0x01
     47e:	7a 81       	ldd	r23, Y+2	; 0x02
     480:	8b 81       	ldd	r24, Y+3	; 0x03
     482:	9c 81       	ldd	r25, Y+4	; 0x04
     484:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     488:	16 2f       	mov	r17, r22
     48a:	01 c0       	rjmp	.+2      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     48c:	11 e0       	ldi	r17, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     48e:	81 2f       	mov	r24, r17
     490:	8a 95       	dec	r24
     492:	f1 f7       	brne	.-4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
	int path_len = en - st;
	int delay = 70 + (int)((float)(10 - s_len) * (3000.00 / 10.00));
	// Get snake moving forward
	for (int i = 0; i < path_len; i++) {
		// Populating Snake
		for (int j = 0; j < s_len; j++) {
     494:	8b 89       	ldd	r24, Y+19	; 0x13
     496:	9c 89       	ldd	r25, Y+20	; 0x14
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	9c 8b       	std	Y+20, r25	; 0x14
     49c:	8b 8b       	std	Y+19, r24	; 0x13
     49e:	06 c0       	rjmp	.+12     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4a0:	1a 82       	std	Y+2, r1	; 0x02
     4a2:	19 82       	std	Y+1, r1	; 0x01
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	3c 8b       	std	Y+20, r19	; 0x14
     4aa:	2b 8b       	std	Y+19, r18	; 0x13
     4ac:	8b 89       	ldd	r24, Y+19	; 0x13
     4ae:	9c 89       	ldd	r25, Y+20	; 0x14
     4b0:	8a 15       	cp	r24, r10
     4b2:	9b 05       	cpc	r25, r11
     4b4:	0c f4       	brge	.+2      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4b6:	34 cf       	rjmp	.-408    	; 0x320 <LED_Bounce_Pattern+0x94>
			}
			LED_Display(LEDSTRIP, strip_len);
			_delay_us(delay);
		}
		// End of Snake
		if ((i + st) <= (en - s_len)) {
     4b8:	b4 01       	movw	r22, r8
     4ba:	64 0d       	add	r22, r4
     4bc:	75 1d       	adc	r23, r5
     4be:	c1 01       	movw	r24, r2
     4c0:	8a 19       	sub	r24, r10
     4c2:	9b 09       	sbc	r25, r11
     4c4:	86 17       	cp	r24, r22
     4c6:	97 07       	cpc	r25, r23
     4c8:	44 f0       	brlt	.+16     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
			store_LED(LEDSTRIP, i+st, Brightness, 0, 0, 0);
     4ca:	e1 2c       	mov	r14, r1
     4cc:	00 e0       	ldi	r16, 0x00	; 0
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	4f ef       	ldi	r20, 0xFF	; 255
     4d2:	89 85       	ldd	r24, Y+9	; 0x09
     4d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
	int G = rand_Pixel();
	int B = rand_Pixel();
	int path_len = en - st;
	int delay = 70 + (int)((float)(10 - s_len) * (3000.00 / 10.00));
	// Get snake moving forward
	for (int i = 0; i < path_len; i++) {
     4da:	9f ef       	ldi	r25, 0xFF	; 255
     4dc:	89 1a       	sub	r8, r25
     4de:	99 0a       	sbc	r9, r25
     4e0:	28 89       	ldd	r18, Y+16	; 0x10
     4e2:	39 89       	ldd	r19, Y+17	; 0x11
     4e4:	82 16       	cp	r8, r18
     4e6:	93 06       	cpc	r9, r19
     4e8:	dc f2       	brlt	.-74     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     4ea:	81 2c       	mov	r8, r1
     4ec:	91 2c       	mov	r9, r1
     4ee:	1a 89       	ldd	r17, Y+18	; 0x12
     4f0:	e3 c0       	rjmp	.+454    	; 0x6b8 <__EEPROM_REGION_LENGTH__+0x2b8>
	}
	// Get snake moving backward
	for (int i = 0; (-1)*i < path_len; i--) {
		// Populating Snake
		for (int j = 0; (-1)*j < s_len; j--) {
			if (i+j+en >= st) {
     4f2:	6b 89       	ldd	r22, Y+19	; 0x13
     4f4:	7c 89       	ldd	r23, Y+20	; 0x14
     4f6:	68 0d       	add	r22, r8
     4f8:	79 1d       	adc	r23, r9
     4fa:	62 0d       	add	r22, r2
     4fc:	73 1d       	adc	r23, r3
     4fe:	64 15       	cp	r22, r4
     500:	75 05       	cpc	r23, r5
     502:	44 f0       	brlt	.+16     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
				store_LED(LEDSTRIP, i+j+en, Brightness, R, G, B);	// Start at en and goes to that st
     504:	ed 84       	ldd	r14, Y+13	; 0x0d
     506:	0f 85       	ldd	r16, Y+15	; 0x0f
     508:	2e 85       	ldd	r18, Y+14	; 0x0e
     50a:	4f ef       	ldi	r20, 0xFF	; 255
     50c:	89 85       	ldd	r24, Y+9	; 0x09
     50e:	9a 85       	ldd	r25, Y+10	; 0x0a
     510:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
			}
			LED_Display(LEDSTRIP, strip_len);
     514:	6b 85       	ldd	r22, Y+11	; 0x0b
     516:	7c 85       	ldd	r23, Y+12	; 0x0c
     518:	89 85       	ldd	r24, Y+9	; 0x09
     51a:	9a 85       	ldd	r25, Y+10	; 0x0a
     51c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
			_delay_us(delay);
     520:	b3 01       	movw	r22, r6
     522:	07 2c       	mov	r0, r7
     524:	00 0c       	add	r0, r0
     526:	88 0b       	sbc	r24, r24
     528:	99 0b       	sbc	r25, r25
     52a:	0e 94 b7 09 	call	0x136e	; 0x136e <__floatsisf>
     52e:	6b 01       	movw	r12, r22
     530:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     532:	2b ea       	ldi	r18, 0xAB	; 171
     534:	3a ea       	ldi	r19, 0xAA	; 170
     536:	4a ea       	ldi	r20, 0xAA	; 170
     538:	50 e4       	ldi	r21, 0x40	; 64
     53a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     53e:	69 83       	std	Y+1, r22	; 0x01
     540:	7a 83       	std	Y+2, r23	; 0x02
     542:	8b 83       	std	Y+3, r24	; 0x03
     544:	9c 83       	std	Y+4, r25	; 0x04
	__tmp2 = ((F_CPU) / 4e6) * __us;
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e8       	ldi	r20, 0x80	; 128
     54c:	50 e4       	ldi	r21, 0x40	; 64
     54e:	c7 01       	movw	r24, r14
     550:	b6 01       	movw	r22, r12
     552:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     556:	6d 83       	std	Y+5, r22	; 0x05
     558:	7e 83       	std	Y+6, r23	; 0x06
     55a:	8f 83       	std	Y+7, r24	; 0x07
     55c:	98 87       	std	Y+8, r25	; 0x08
	if (__tmp < 1.0)
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	40 e8       	ldi	r20, 0x80	; 128
     564:	5f e3       	ldi	r21, 0x3F	; 63
     566:	69 81       	ldd	r22, Y+1	; 0x01
     568:	7a 81       	ldd	r23, Y+2	; 0x02
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	9c 81       	ldd	r25, Y+4	; 0x04
     56e:	0e 94 08 09 	call	0x1210	; 0x1210 <__cmpsf2>
     572:	88 23       	and	r24, r24
     574:	0c f4       	brge	.+2      	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
     576:	73 c0       	rjmp	.+230    	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
		__ticks = 1;
	else if (__tmp2 > 65535)
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	3f ef       	ldi	r19, 0xFF	; 255
     57c:	4f e7       	ldi	r20, 0x7F	; 127
     57e:	57 e4       	ldi	r21, 0x47	; 71
     580:	6d 81       	ldd	r22, Y+5	; 0x05
     582:	7e 81       	ldd	r23, Y+6	; 0x06
     584:	8f 81       	ldd	r24, Y+7	; 0x07
     586:	98 85       	ldd	r25, Y+8	; 0x08
     588:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__gesf2>
     58c:	18 16       	cp	r1, r24
     58e:	0c f0       	brlt	.+2      	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
     590:	48 c0       	rjmp	.+144    	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
	{
		_delay_ms(__us / 1000.0);
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	4a e7       	ldi	r20, 0x7A	; 122
     598:	54 e4       	ldi	r21, 0x44	; 68
     59a:	c7 01       	movw	r24, r14
     59c:	b6 01       	movw	r22, r12
     59e:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	4a e7       	ldi	r20, 0x7A	; 122
     5b0:	55 e4       	ldi	r21, 0x45	; 69
     5b2:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     5b6:	6b 01       	movw	r12, r22
     5b8:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	40 e8       	ldi	r20, 0x80	; 128
     5c0:	5f e3       	ldi	r21, 0x3F	; 63
     5c2:	0e 94 08 09 	call	0x1210	; 0x1210 <__cmpsf2>
     5c6:	88 23       	and	r24, r24
     5c8:	34 f1       	brlt	.+76     	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
		__ticks = 1;
	else if (__tmp > 65535)
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	3f ef       	ldi	r19, 0xFF	; 255
     5ce:	4f e7       	ldi	r20, 0x7F	; 127
     5d0:	57 e4       	ldi	r21, 0x47	; 71
     5d2:	c7 01       	movw	r24, r14
     5d4:	b6 01       	movw	r22, r12
     5d6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__gesf2>
     5da:	18 16       	cp	r1, r24
     5dc:	bc f4       	brge	.+46     	; 0x60c <__EEPROM_REGION_LENGTH__+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e2       	ldi	r20, 0x20	; 32
     5e4:	51 e4       	ldi	r21, 0x41	; 65
     5e6:	69 81       	ldd	r22, Y+1	; 0x01
     5e8:	7a 81       	ldd	r23, Y+2	; 0x02
     5ea:	8b 81       	ldd	r24, Y+3	; 0x03
     5ec:	9c 81       	ldd	r25, Y+4	; 0x04
     5ee:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     5f2:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     5f6:	06 c0       	rjmp	.+12     	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5f8:	80 e9       	ldi	r24, 0x90	; 144
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     600:	61 50       	subi	r22, 0x01	; 1
     602:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     604:	61 15       	cp	r22, r1
     606:	71 05       	cpc	r23, r1
     608:	b9 f7       	brne	.-18     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
     60a:	2a c0       	rjmp	.+84     	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     60c:	c7 01       	movw	r24, r14
     60e:	b6 01       	movw	r22, r12
     610:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     614:	02 c0       	rjmp	.+4      	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	cb 01       	movw	r24, r22
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
     620:	1f c0       	rjmp	.+62     	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	4f e7       	ldi	r20, 0x7F	; 127
     628:	53 e4       	ldi	r21, 0x43	; 67
     62a:	69 81       	ldd	r22, Y+1	; 0x01
     62c:	7a 81       	ldd	r23, Y+2	; 0x02
     62e:	8b 81       	ldd	r24, Y+3	; 0x03
     630:	9c 81       	ldd	r25, Y+4	; 0x04
     632:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__gesf2>
     636:	18 16       	cp	r1, r24
     638:	54 f4       	brge	.+20     	; 0x64e <__EEPROM_REGION_LENGTH__+0x24e>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     63a:	6d 81       	ldd	r22, Y+5	; 0x05
     63c:	7e 81       	ldd	r23, Y+6	; 0x06
     63e:	8f 81       	ldd	r24, Y+7	; 0x07
     640:	98 85       	ldd	r25, Y+8	; 0x08
     642:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     646:	cb 01       	movw	r24, r22
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
     64c:	0c c0       	rjmp	.+24     	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     64e:	69 81       	ldd	r22, Y+1	; 0x01
     650:	7a 81       	ldd	r23, Y+2	; 0x02
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	9c 81       	ldd	r25, Y+4	; 0x04
     656:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     65a:	16 2f       	mov	r17, r22
     65c:	01 c0       	rjmp	.+2      	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
     65e:	11 e0       	ldi	r17, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     660:	81 2f       	mov	r24, r17
     662:	8a 95       	dec	r24
     664:	f1 f7       	brne	.-4      	; 0x662 <__EEPROM_REGION_LENGTH__+0x262>
		}
	}
	// Get snake moving backward
	for (int i = 0; (-1)*i < path_len; i--) {
		// Populating Snake
		for (int j = 0; (-1)*j < s_len; j--) {
     666:	8b 89       	ldd	r24, Y+19	; 0x13
     668:	9c 89       	ldd	r25, Y+20	; 0x14
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	9c 8b       	std	Y+20, r25	; 0x14
     66e:	8b 8b       	std	Y+19, r24	; 0x13
     670:	06 c0       	rjmp	.+12     	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
     672:	1a 82       	std	Y+2, r1	; 0x02
     674:	19 82       	std	Y+1, r1	; 0x01
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	3c 8b       	std	Y+20, r19	; 0x14
     67c:	2b 8b       	std	Y+19, r18	; 0x13
     67e:	8b 89       	ldd	r24, Y+19	; 0x13
     680:	9c 89       	ldd	r25, Y+20	; 0x14
     682:	91 95       	neg	r25
     684:	81 95       	neg	r24
     686:	91 09       	sbc	r25, r1
     688:	8a 15       	cp	r24, r10
     68a:	9b 05       	cpc	r25, r11
     68c:	0c f4       	brge	.+2      	; 0x690 <__EEPROM_REGION_LENGTH__+0x290>
     68e:	31 cf       	rjmp	.-414    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
			}
			LED_Display(LEDSTRIP, strip_len);
			_delay_us(delay);
		}
		// End of Snake
		if ((i + en) >= (st + s_len)) {
     690:	b4 01       	movw	r22, r8
     692:	62 0d       	add	r22, r2
     694:	73 1d       	adc	r23, r3
     696:	c2 01       	movw	r24, r4
     698:	8a 0d       	add	r24, r10
     69a:	9b 1d       	adc	r25, r11
     69c:	68 17       	cp	r22, r24
     69e:	79 07       	cpc	r23, r25
     6a0:	44 f0       	brlt	.+16     	; 0x6b2 <__EEPROM_REGION_LENGTH__+0x2b2>
			store_LED(LEDSTRIP, i+en, Brightness, 0, 0, 0);
     6a2:	e1 2c       	mov	r14, r1
     6a4:	00 e0       	ldi	r16, 0x00	; 0
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	4f ef       	ldi	r20, 0xFF	; 255
     6aa:	89 85       	ldd	r24, Y+9	; 0x09
     6ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ae:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		if ((i + st) <= (en - s_len)) {
			store_LED(LEDSTRIP, i+st, Brightness, 0, 0, 0);
		}
	}
	// Get snake moving backward
	for (int i = 0; (-1)*i < path_len; i--) {
     6b2:	31 e0       	ldi	r19, 0x01	; 1
     6b4:	83 1a       	sub	r8, r19
     6b6:	91 08       	sbc	r9, r1
     6b8:	88 27       	eor	r24, r24
     6ba:	99 27       	eor	r25, r25
     6bc:	88 19       	sub	r24, r8
     6be:	99 09       	sbc	r25, r9
     6c0:	28 89       	ldd	r18, Y+16	; 0x10
     6c2:	39 89       	ldd	r19, Y+17	; 0x11
     6c4:	82 17       	cp	r24, r18
     6c6:	93 07       	cpc	r25, r19
     6c8:	a4 f2       	brlt	.-88     	; 0x672 <__EEPROM_REGION_LENGTH__+0x272>
		if ((i + en) >= (st + s_len)) {
			store_LED(LEDSTRIP, i+en, Brightness, 0, 0, 0);
		}
	}
	
}
     6ca:	64 96       	adiw	r28, 0x14	; 20
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	cf 90       	pop	r12
     6e6:	bf 90       	pop	r11
     6e8:	af 90       	pop	r10
     6ea:	9f 90       	pop	r9
     6ec:	8f 90       	pop	r8
     6ee:	7f 90       	pop	r7
     6f0:	6f 90       	pop	r6
     6f2:	5f 90       	pop	r5
     6f4:	4f 90       	pop	r4
     6f6:	3f 90       	pop	r3
     6f8:	2f 90       	pop	r2
     6fa:	08 95       	ret

000006fc <LED_Rand_Pattern>:
// Creates Completely Random Pattern on LEDSTRIP
void LED_Rand_Pattern(strip* LEDSTRIP, int strip_len, int delay) {
     6fc:	8f 92       	push	r8
     6fe:	9f 92       	push	r9
     700:	af 92       	push	r10
     702:	bf 92       	push	r11
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	6c 01       	movw	r12, r24
     716:	7b 01       	movw	r14, r22
     718:	5a 01       	movw	r10, r20
	for (int i = 0; i < strip_len; i++) {
     71a:	00 e0       	ldi	r16, 0x00	; 0
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	16 c0       	rjmp	.+44     	; 0x74c <LED_Rand_Pattern+0x50>
		LEDSTRIP->Brightness[i] = rand_Pixel();
     720:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     724:	e6 01       	movw	r28, r12
     726:	c0 0f       	add	r28, r16
     728:	d1 1f       	adc	r29, r17
     72a:	88 83       	st	Y, r24
		LEDSTRIP->R[i]			= rand_Pixel();
     72c:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     730:	8c af       	std	Y+60, r24	; 0x3c
		LEDSTRIP->G[i]			= rand_Pixel();
     732:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     736:	fe 01       	movw	r30, r28
     738:	e8 58       	subi	r30, 0x88	; 136
     73a:	ff 4f       	sbci	r31, 0xFF	; 255
     73c:	80 83       	st	Z, r24
		LEDSTRIP->B[i]			= rand_Pixel();
     73e:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     742:	cc 54       	subi	r28, 0x4C	; 76
     744:	df 4f       	sbci	r29, 0xFF	; 255
     746:	88 83       	st	Y, r24
	}
	
}
// Creates Completely Random Pattern on LEDSTRIP
void LED_Rand_Pattern(strip* LEDSTRIP, int strip_len, int delay) {
	for (int i = 0; i < strip_len; i++) {
     748:	0f 5f       	subi	r16, 0xFF	; 255
     74a:	1f 4f       	sbci	r17, 0xFF	; 255
     74c:	0e 15       	cp	r16, r14
     74e:	1f 05       	cpc	r17, r15
     750:	3c f3       	brlt	.-50     	; 0x720 <LED_Rand_Pattern+0x24>
		LEDSTRIP->Brightness[i] = rand_Pixel();
		LEDSTRIP->R[i]			= rand_Pixel();
		LEDSTRIP->G[i]			= rand_Pixel();
		LEDSTRIP->B[i]			= rand_Pixel();
	}
	LED_Display(LEDSTRIP, strip_len);
     752:	b7 01       	movw	r22, r14
     754:	c6 01       	movw	r24, r12
     756:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
	_delay_ms(delay);
     75a:	b5 01       	movw	r22, r10
     75c:	bb 0c       	add	r11, r11
     75e:	88 0b       	sbc	r24, r24
     760:	99 0b       	sbc	r25, r25
     762:	0e 94 b7 09 	call	0x136e	; 0x136e <__floatsisf>
     766:	4b 01       	movw	r8, r22
     768:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	4a e7       	ldi	r20, 0x7A	; 122
     770:	55 e4       	ldi	r21, 0x45	; 69
     772:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     776:	6b 01       	movw	r12, r22
     778:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e8       	ldi	r20, 0x80	; 128
     780:	5f e3       	ldi	r21, 0x3F	; 63
     782:	0e 94 08 09 	call	0x1210	; 0x1210 <__cmpsf2>
     786:	88 23       	and	r24, r24
     788:	24 f1       	brlt	.+72     	; 0x7d2 <LED_Rand_Pattern+0xd6>
		__ticks = 1;
	else if (__tmp > 65535)
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	3f ef       	ldi	r19, 0xFF	; 255
     78e:	4f e7       	ldi	r20, 0x7F	; 127
     790:	57 e4       	ldi	r21, 0x47	; 71
     792:	c7 01       	movw	r24, r14
     794:	b6 01       	movw	r22, r12
     796:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__gesf2>
     79a:	18 16       	cp	r1, r24
     79c:	ac f4       	brge	.+42     	; 0x7c8 <LED_Rand_Pattern+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e2       	ldi	r20, 0x20	; 32
     7a4:	51 e4       	ldi	r21, 0x41	; 65
     7a6:	c5 01       	movw	r24, r10
     7a8:	b4 01       	movw	r22, r8
     7aa:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     7ae:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     7b2:	06 c0       	rjmp	.+12     	; 0x7c0 <LED_Rand_Pattern+0xc4>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7b4:	80 e9       	ldi	r24, 0x90	; 144
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <LED_Rand_Pattern+0xbc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7bc:	61 50       	subi	r22, 0x01	; 1
     7be:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7c0:	61 15       	cp	r22, r1
     7c2:	71 05       	cpc	r23, r1
     7c4:	b9 f7       	brne	.-18     	; 0x7b4 <LED_Rand_Pattern+0xb8>
     7c6:	0a c0       	rjmp	.+20     	; 0x7dc <LED_Rand_Pattern+0xe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7c8:	c7 01       	movw	r24, r14
     7ca:	b6 01       	movw	r22, r12
     7cc:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <LED_Rand_Pattern+0xda>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	cb 01       	movw	r24, r22
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <LED_Rand_Pattern+0xdc>
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	df 90       	pop	r13
     7ea:	cf 90       	pop	r12
     7ec:	bf 90       	pop	r11
     7ee:	af 90       	pop	r10
     7f0:	9f 90       	pop	r9
     7f2:	8f 90       	pop	r8
     7f4:	08 95       	ret

000007f6 <LED_Out2InPattern>:
// Out to in pattern
void LED_Out2InPattern(strip* LEDSTRIP, int strip_len, int delay) {
     7f6:	2f 92       	push	r2
     7f8:	3f 92       	push	r3
     7fa:	4f 92       	push	r4
     7fc:	5f 92       	push	r5
     7fe:	6f 92       	push	r6
     800:	7f 92       	push	r7
     802:	8f 92       	push	r8
     804:	9f 92       	push	r9
     806:	af 92       	push	r10
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	27 97       	sbiw	r28, 0x07	; 7
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	6c 01       	movw	r12, r24
     82c:	1b 01       	movw	r2, r22
     82e:	5a 01       	movw	r10, r20
	int left  =  0;
	int right = 59;
	uint8_t Brightness = 0xFF;
	uint8_t R = rand_Pixel();
     830:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     834:	18 2f       	mov	r17, r24
	uint8_t G = rand_Pixel();
     836:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     83a:	f8 2e       	mov	r15, r24
	uint8_t B = rand_Pixel();
     83c:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     840:	8d 83       	std	Y+5, r24	; 0x05
	_delay_ms(delay);
}
// Out to in pattern
void LED_Out2InPattern(strip* LEDSTRIP, int strip_len, int delay) {
	int left  =  0;
	int right = 59;
     842:	0f 2e       	mov	r0, r31
     844:	fb e3       	ldi	r31, 0x3B	; 59
     846:	8f 2e       	mov	r8, r31
     848:	91 2c       	mov	r9, r1
     84a:	f0 2d       	mov	r31, r0
	LED_Display(LEDSTRIP, strip_len);
	_delay_ms(delay);
}
// Out to in pattern
void LED_Out2InPattern(strip* LEDSTRIP, int strip_len, int delay) {
	int left  =  0;
     84c:	1f 82       	std	Y+7, r1	; 0x07
     84e:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t Brightness = 0xFF;
	uint8_t R = rand_Pixel();
	uint8_t G = rand_Pixel();
	uint8_t B = rand_Pixel();
	while (1) {	// Out 2 In
		store_LED(LEDSTRIP, left, Brightness, R,  G,  B);
     850:	ed 80       	ldd	r14, Y+5	; 0x05
     852:	0f 2d       	mov	r16, r15
     854:	21 2f       	mov	r18, r17
     856:	4f ef       	ldi	r20, 0xFF	; 255
     858:	6e 81       	ldd	r22, Y+6	; 0x06
     85a:	7f 81       	ldd	r23, Y+7	; 0x07
     85c:	c6 01       	movw	r24, r12
     85e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		store_LED(LEDSTRIP, right, Brightness,  R,  G,  B);
     862:	ed 80       	ldd	r14, Y+5	; 0x05
     864:	21 2f       	mov	r18, r17
     866:	4f ef       	ldi	r20, 0xFF	; 255
     868:	b4 01       	movw	r22, r8
     86a:	c6 01       	movw	r24, r12
     86c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		left++;
     870:	8e 81       	ldd	r24, Y+6	; 0x06
     872:	9f 81       	ldd	r25, Y+7	; 0x07
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	9f 83       	std	Y+7, r25	; 0x07
     878:	8e 83       	std	Y+6, r24	; 0x06
		right--;
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	89 1a       	sub	r8, r25
     87e:	91 08       	sbc	r9, r1
		LED_Display(LEDSTRIP, strip_len);
     880:	b1 01       	movw	r22, r2
     882:	c6 01       	movw	r24, r12
     884:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
		if (left == 29) break;
     888:	8e 81       	ldd	r24, Y+6	; 0x06
     88a:	9f 81       	ldd	r25, Y+7	; 0x07
     88c:	4d 97       	sbiw	r24, 0x1d	; 29
     88e:	09 f4       	brne	.+2      	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     890:	47 c0       	rjmp	.+142    	; 0x920 <__stack+0x21>
		_delay_ms(delay);
     892:	b5 01       	movw	r22, r10
     894:	0b 2c       	mov	r0, r11
     896:	00 0c       	add	r0, r0
     898:	88 0b       	sbc	r24, r24
     89a:	99 0b       	sbc	r25, r25
     89c:	0e 94 b7 09 	call	0x136e	; 0x136e <__floatsisf>
     8a0:	69 83       	std	Y+1, r22	; 0x01
     8a2:	7a 83       	std	Y+2, r23	; 0x02
     8a4:	8b 83       	std	Y+3, r24	; 0x03
     8a6:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	4a e7       	ldi	r20, 0x7A	; 122
     8ae:	55 e4       	ldi	r21, 0x45	; 69
     8b0:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     8b4:	2b 01       	movw	r4, r22
     8b6:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	40 e8       	ldi	r20, 0x80	; 128
     8be:	5f e3       	ldi	r21, 0x3F	; 63
     8c0:	0e 94 08 09 	call	0x1210	; 0x1210 <__cmpsf2>
     8c4:	88 23       	and	r24, r24
     8c6:	34 f1       	brlt	.+76     	; 0x914 <__stack+0x15>
		__ticks = 1;
	else if (__tmp > 65535)
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	3f ef       	ldi	r19, 0xFF	; 255
     8cc:	4f e7       	ldi	r20, 0x7F	; 127
     8ce:	57 e4       	ldi	r21, 0x47	; 71
     8d0:	c3 01       	movw	r24, r6
     8d2:	b2 01       	movw	r22, r4
     8d4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__gesf2>
     8d8:	18 16       	cp	r1, r24
     8da:	bc f4       	brge	.+46     	; 0x90a <__stack+0xb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e2       	ldi	r20, 0x20	; 32
     8e2:	51 e4       	ldi	r21, 0x41	; 65
     8e4:	69 81       	ldd	r22, Y+1	; 0x01
     8e6:	7a 81       	ldd	r23, Y+2	; 0x02
     8e8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ea:	9c 81       	ldd	r25, Y+4	; 0x04
     8ec:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     8f0:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     8f4:	06 c0       	rjmp	.+12     	; 0x902 <__stack+0x3>
     8f6:	80 e9       	ldi	r24, 0x90	; 144
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8fe:	61 50       	subi	r22, 0x01	; 1
     900:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	b9 f7       	brne	.-18     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
     908:	a3 cf       	rjmp	.-186    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     90a:	c3 01       	movw	r24, r6
     90c:	b2 01       	movw	r22, r4
     90e:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0x19>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     914:	61 e0       	ldi	r22, 0x01	; 1
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	cb 01       	movw	r24, r22
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <__stack+0x1b>
     91e:	98 cf       	rjmp	.-208    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	}
	left  = 29;
	right = 30;
	R = rand_Pixel();
     920:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     924:	18 2f       	mov	r17, r24
	G = rand_Pixel();
     926:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     92a:	f8 2e       	mov	r15, r24
	B = rand_Pixel();
     92c:	0e 94 3d 01 	call	0x27a	; 0x27a <rand_Pixel>
     930:	8d 83       	std	Y+5, r24	; 0x05
		LED_Display(LEDSTRIP, strip_len);
		if (left == 29) break;
		_delay_ms(delay);
	}
	left  = 29;
	right = 30;
     932:	0f 2e       	mov	r0, r31
     934:	fe e1       	ldi	r31, 0x1E	; 30
     936:	8f 2e       	mov	r8, r31
     938:	91 2c       	mov	r9, r1
     93a:	f0 2d       	mov	r31, r0
	R = rand_Pixel();
	G = rand_Pixel();
	B = rand_Pixel();
	while (1) {	// In 2 Out
		store_LED(LEDSTRIP, left, Brightness, R,  G,  B);
     93c:	ed 80       	ldd	r14, Y+5	; 0x05
     93e:	0f 2d       	mov	r16, r15
     940:	21 2f       	mov	r18, r17
     942:	4f ef       	ldi	r20, 0xFF	; 255
     944:	6e 81       	ldd	r22, Y+6	; 0x06
     946:	7f 81       	ldd	r23, Y+7	; 0x07
     948:	c6 01       	movw	r24, r12
     94a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		store_LED(LEDSTRIP, right, Brightness,  R,  G,  B);
     94e:	ed 80       	ldd	r14, Y+5	; 0x05
     950:	21 2f       	mov	r18, r17
     952:	4f ef       	ldi	r20, 0xFF	; 255
     954:	b4 01       	movw	r22, r8
     956:	c6 01       	movw	r24, r12
     958:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <store_LED>
		left --;
     95c:	8e 81       	ldd	r24, Y+6	; 0x06
     95e:	9f 81       	ldd	r25, Y+7	; 0x07
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	9f 83       	std	Y+7, r25	; 0x07
     964:	8e 83       	std	Y+6, r24	; 0x06
		right++;
     966:	9f ef       	ldi	r25, 0xFF	; 255
     968:	89 1a       	sub	r8, r25
     96a:	99 0a       	sbc	r9, r25
		LED_Display(LEDSTRIP, strip_len);
     96c:	b1 01       	movw	r22, r2
     96e:	c6 01       	movw	r24, r12
     970:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LED_Display>
		if (left == 0) break;
     974:	8e 81       	ldd	r24, Y+6	; 0x06
     976:	9f 81       	ldd	r25, Y+7	; 0x07
     978:	89 2b       	or	r24, r25
     97a:	09 f4       	brne	.+2      	; 0x97e <__stack+0x7f>
     97c:	47 c0       	rjmp	.+142    	; 0xa0c <__stack+0x10d>
		_delay_ms(delay);
     97e:	b5 01       	movw	r22, r10
     980:	0b 2c       	mov	r0, r11
     982:	00 0c       	add	r0, r0
     984:	88 0b       	sbc	r24, r24
     986:	99 0b       	sbc	r25, r25
     988:	0e 94 b7 09 	call	0x136e	; 0x136e <__floatsisf>
     98c:	69 83       	std	Y+1, r22	; 0x01
     98e:	7a 83       	std	Y+2, r23	; 0x02
     990:	8b 83       	std	Y+3, r24	; 0x03
     992:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	4a e7       	ldi	r20, 0x7A	; 122
     99a:	55 e4       	ldi	r21, 0x45	; 69
     99c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     9a0:	2b 01       	movw	r4, r22
     9a2:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e8       	ldi	r20, 0x80	; 128
     9aa:	5f e3       	ldi	r21, 0x3F	; 63
     9ac:	0e 94 08 09 	call	0x1210	; 0x1210 <__cmpsf2>
     9b0:	88 23       	and	r24, r24
     9b2:	34 f1       	brlt	.+76     	; 0xa00 <__stack+0x101>
		__ticks = 1;
	else if (__tmp > 65535)
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	3f ef       	ldi	r19, 0xFF	; 255
     9b8:	4f e7       	ldi	r20, 0x7F	; 127
     9ba:	57 e4       	ldi	r21, 0x47	; 71
     9bc:	c3 01       	movw	r24, r6
     9be:	b2 01       	movw	r22, r4
     9c0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__gesf2>
     9c4:	18 16       	cp	r1, r24
     9c6:	bc f4       	brge	.+46     	; 0x9f6 <__stack+0xf7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e2       	ldi	r20, 0x20	; 32
     9ce:	51 e4       	ldi	r21, 0x41	; 65
     9d0:	69 81       	ldd	r22, Y+1	; 0x01
     9d2:	7a 81       	ldd	r23, Y+2	; 0x02
     9d4:	8b 81       	ldd	r24, Y+3	; 0x03
     9d6:	9c 81       	ldd	r25, Y+4	; 0x04
     9d8:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__mulsf3>
     9dc:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     9e0:	06 c0       	rjmp	.+12     	; 0x9ee <__stack+0xef>
     9e2:	80 e9       	ldi	r24, 0x90	; 144
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <__stack+0xe7>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ea:	61 50       	subi	r22, 0x01	; 1
     9ec:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ee:	61 15       	cp	r22, r1
     9f0:	71 05       	cpc	r23, r1
     9f2:	b9 f7       	brne	.-18     	; 0x9e2 <__stack+0xe3>
     9f4:	a3 cf       	rjmp	.-186    	; 0x93c <__stack+0x3d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9f6:	c3 01       	movw	r24, r6
     9f8:	b2 01       	movw	r22, r4
     9fa:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <__stack+0x105>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	cb 01       	movw	r24, r22
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <__stack+0x107>
     a0a:	98 cf       	rjmp	.-208    	; 0x93c <__stack+0x3d>
	}
     a0c:	27 96       	adiw	r28, 0x07	; 7
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	df 90       	pop	r13
     a26:	cf 90       	pop	r12
     a28:	bf 90       	pop	r11
     a2a:	af 90       	pop	r10
     a2c:	9f 90       	pop	r9
     a2e:	8f 90       	pop	r8
     a30:	7f 90       	pop	r7
     a32:	6f 90       	pop	r6
     a34:	5f 90       	pop	r5
     a36:	4f 90       	pop	r4
     a38:	3f 90       	pop	r3
     a3a:	2f 90       	pop	r2
     a3c:	08 95       	ret

00000a3e <SPI_MasterInit>:
		PORTD = (0<<PIND7);
		_delay_ms(150);
		PORTD = (1<<PIND7);
		_delay_ms(150);
	}
}
     a3e:	8c e2       	ldi	r24, 0x2C	; 44
     a40:	84 b9       	out	0x04, r24	; 4
     a42:	80 e5       	ldi	r24, 0x50	; 80
     a44:	8c bd       	out	0x2c, r24	; 44
     a46:	08 95       	ret

00000a48 <InitTimer1>:
     a48:	e1 e8       	ldi	r30, 0x81	; 129
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	88 60       	ori	r24, 0x08	; 8
     a50:	80 83       	st	Z, r24
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	9f ef       	ldi	r25, 0xFF	; 255
     a56:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     a5a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     a5e:	80 81       	ld	r24, Z
     a60:	82 60       	ori	r24, 0x02	; 2
     a62:	80 83       	st	Z, r24
     a64:	08 95       	ret

00000a66 <__vector_1>:
     a66:	1f 92       	push	r1
     a68:	0f 92       	push	r0
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	0f 92       	push	r0
     a6e:	11 24       	eor	r1, r1
     a70:	2f 93       	push	r18
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	ef 93       	push	r30
     a78:	ff 93       	push	r31
     a7a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <recieving>
     a7e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <recieving+0x1>
     a82:	89 2b       	or	r24, r25
     a84:	c9 f1       	breq	.+114    	; 0xaf8 <__vector_1+0x92>
     a86:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     a8a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     a8e:	88 34       	cpi	r24, 0x48	; 72
     a90:	9d 40       	sbci	r25, 0x0D	; 13
     a92:	5c f4       	brge	.+22     	; 0xaaa <__vector_1+0x44>
     a94:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <__data_end>
     a98:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <__data_end+0x1>
     a9c:	ee 0f       	add	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	ef 5d       	subi	r30, 0xDF	; 223
     aa2:	fc 4f       	sbci	r31, 0xFC	; 252
     aa4:	11 82       	std	Z+1, r1	; 0x01
     aa6:	10 82       	st	Z, r1
     aa8:	0c c0       	rjmp	.+24     	; 0xac2 <__vector_1+0x5c>
     aaa:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <__data_end>
     aae:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <__data_end+0x1>
     ab2:	ee 0f       	add	r30, r30
     ab4:	ff 1f       	adc	r31, r31
     ab6:	ef 5d       	subi	r30, 0xDF	; 223
     ab8:	fc 4f       	sbci	r31, 0xFC	; 252
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	91 83       	std	Z+1, r25	; 0x01
     ac0:	80 83       	st	Z, r24
     ac2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
     ac6:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <__data_end+0x1>
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <__data_end+0x1>
     ad0:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
     ad4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <__data_end>
     ad8:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <__data_end+0x1>
     adc:	84 97       	sbiw	r24, 0x24	; 36
     ade:	41 f4       	brne	.+16     	; 0xaf0 <__vector_1+0x8a>
     ae0:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <__data_end+0x1>
     ae4:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
     ae8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <recieving+0x1>
     aec:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <recieving>
     af0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     af4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	2f 91       	pop	r18
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	0f 90       	pop	r0
     b08:	1f 90       	pop	r1
     b0a:	18 95       	reti

00000b0c <InitINT0>:
     b0c:	8a b1       	in	r24, 0x0a	; 10
     b0e:	8b 7f       	andi	r24, 0xFB	; 251
     b10:	8a b9       	out	0x0a, r24	; 10
     b12:	8d b3       	in	r24, 0x1d	; 29
     b14:	81 60       	ori	r24, 0x01	; 1
     b16:	8d bb       	out	0x1d, r24	; 29
     b18:	e9 e6       	ldi	r30, 0x69	; 105
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	82 60       	ori	r24, 0x02	; 2
     b20:	80 83       	st	Z, r24
     b22:	08 95       	ret

00000b24 <getMode>:
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	41 e2       	ldi	r20, 0x21	; 33
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	18 c0       	rjmp	.+48     	; 0xb62 <getMode+0x3e>
     b32:	fa 01       	movw	r30, r20
     b34:	ee 0f       	add	r30, r30
     b36:	ff 1f       	adc	r31, r31
     b38:	ef 5d       	subi	r30, 0xDF	; 223
     b3a:	fc 4f       	sbci	r31, 0xFC	; 252
     b3c:	60 81       	ld	r22, Z
     b3e:	71 81       	ldd	r23, Z+1	; 0x01
     b40:	61 30       	cpi	r22, 0x01	; 1
     b42:	71 05       	cpc	r23, r1
     b44:	51 f4       	brne	.+20     	; 0xb5a <getMode+0x36>
     b46:	61 e0       	ldi	r22, 0x01	; 1
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	02 2e       	mov	r0, r18
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <getMode+0x2e>
     b4e:	66 0f       	add	r22, r22
     b50:	77 1f       	adc	r23, r23
     b52:	0a 94       	dec	r0
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <getMode+0x2a>
     b56:	86 2b       	or	r24, r22
     b58:	97 2b       	or	r25, r23
     b5a:	41 50       	subi	r20, 0x01	; 1
     b5c:	51 09       	sbc	r21, r1
     b5e:	2f 5f       	subi	r18, 0xFF	; 255
     b60:	3f 4f       	sbci	r19, 0xFF	; 255
     b62:	20 31       	cpi	r18, 0x10	; 16
     b64:	31 05       	cpc	r19, r1
     b66:	2c f3       	brlt	.-54     	; 0xb32 <getMode+0xe>
     b68:	08 95       	ret

00000b6a <dispRECV>:

void dispRECV(void) {
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
	printf("\n Start Signal \n");
     b6e:	88 e2       	ldi	r24, 0x28	; 40
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <puts>
	for (int i = 18; i < 34; i++) {
     b76:	c2 e1       	ldi	r28, 0x12	; 18
     b78:	d0 e0       	ldi	r29, 0x00	; 0
     b7a:	14 c0       	rjmp	.+40     	; 0xba4 <dispRECV+0x3a>
		printf("%d ", RECV_Data[i]);
     b7c:	fe 01       	movw	r30, r28
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	ef 5d       	subi	r30, 0xDF	; 223
     b84:	fc 4f       	sbci	r31, 0xFC	; 252
     b86:	80 81       	ld	r24, Z
     b88:	91 81       	ldd	r25, Z+1	; 0x01
     b8a:	9f 93       	push	r25
     b8c:	8f 93       	push	r24
     b8e:	88 e3       	ldi	r24, 0x38	; 56
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	9f 93       	push	r25
     b94:	8f 93       	push	r24
     b96:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <printf>
	}
}

void dispRECV(void) {
	printf("\n Start Signal \n");
	for (int i = 18; i < 34; i++) {
     b9a:	21 96       	adiw	r28, 0x01	; 1
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	c2 32       	cpi	r28, 0x22	; 34
     ba6:	d1 05       	cpc	r29, r1
     ba8:	4c f3       	brlt	.-46     	; 0xb7c <dispRECV+0x12>
		printf("%d ", RECV_Data[i]);
	}
	printf("\n END Signal \n");
     baa:	8c e3       	ldi	r24, 0x3C	; 60
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <puts>
}
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <runMode>:

void runMode(void) {
	unsigned int modeVal = getMode();
     bb8:	0e 94 92 05 	call	0xb24	; 0xb24 <getMode>
	switch (modeVal) {
     bbc:	87 3c       	cpi	r24, 0xC7	; 199
     bbe:	28 e3       	ldi	r18, 0x38	; 56
     bc0:	92 07       	cpc	r25, r18
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <runMode+0xe>
     bc4:	d8 c0       	rjmp	.+432    	; 0xd76 <runMode+0x1be>
     bc6:	a0 f4       	brcc	.+40     	; 0xbf0 <runMode+0x38>
     bc8:	87 3e       	cpi	r24, 0xE7	; 231
     bca:	28 e1       	ldi	r18, 0x18	; 24
     bcc:	92 07       	cpc	r25, r18
     bce:	09 f4       	brne	.+2      	; 0xbd2 <runMode+0x1a>
     bd0:	c8 c0       	rjmp	.+400    	; 0xd62 <runMode+0x1aa>
     bd2:	28 f4       	brcc	.+10     	; 0xbde <runMode+0x26>
     bd4:	8d 3f       	cpi	r24, 0xFD	; 253
     bd6:	92 40       	sbci	r25, 0x02	; 2
     bd8:	09 f4       	brne	.+2      	; 0xbdc <runMode+0x24>
     bda:	44 c0       	rjmp	.+136    	; 0xc64 <runMode+0xac>
     bdc:	30 c1       	rjmp	.+608    	; 0xe3e <runMode+0x286>
     bde:	8d 3d       	cpi	r24, 0xDD	; 221
     be0:	22 e2       	ldi	r18, 0x22	; 34
     be2:	92 07       	cpc	r25, r18
     be4:	a1 f1       	breq	.+104    	; 0xc4e <runMode+0x96>
     be6:	8f 3c       	cpi	r24, 0xCF	; 207
     be8:	90 43       	sbci	r25, 0x30	; 48
     bea:	09 f4       	brne	.+2      	; 0xbee <runMode+0x36>
     bec:	b5 c0       	rjmp	.+362    	; 0xd58 <runMode+0x1a0>
     bee:	27 c1       	rjmp	.+590    	; 0xe3e <runMode+0x286>
     bf0:	85 38       	cpi	r24, 0x85	; 133
     bf2:	2a e7       	ldi	r18, 0x7A	; 122
     bf4:	92 07       	cpc	r25, r18
     bf6:	09 f4       	brne	.+2      	; 0xbfa <runMode+0x42>
     bf8:	b9 c0       	rjmp	.+370    	; 0xd6c <runMode+0x1b4>
     bfa:	20 f4       	brcc	.+8      	; 0xc04 <runMode+0x4c>
     bfc:	8d 39       	cpi	r24, 0x9D	; 157
     bfe:	92 46       	sbci	r25, 0x62	; 98
     c00:	51 f0       	breq	.+20     	; 0xc16 <runMode+0x5e>
     c02:	1d c1       	rjmp	.+570    	; 0xe3e <runMode+0x286>
     c04:	87 36       	cpi	r24, 0x67	; 103
     c06:	28 e9       	ldi	r18, 0x98	; 152
     c08:	92 07       	cpc	r25, r18
     c0a:	09 f4       	brne	.+2      	; 0xc0e <runMode+0x56>
     c0c:	41 c0       	rjmp	.+130    	; 0xc90 <runMode+0xd8>
     c0e:	8d 33       	cpi	r24, 0x3D	; 61
     c10:	92 4c       	sbci	r25, 0xC2	; 194
     c12:	99 f1       	breq	.+102    	; 0xc7a <runMode+0xc2>
     c14:	14 c1       	rjmp	.+552    	; 0xe3e <runMode+0x286>
		case 0x629D:	// PWR BTN
			printf("POWER ON/OFF\n");
     c16:	8a e4       	ldi	r24, 0x4A	; 74
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <puts>
			if (mode) {
     c1e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <mode>
     c22:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <mode+0x1>
     c26:	89 2b       	or	r24, r25
     c28:	59 f0       	breq	.+22     	; 0xc40 <runMode+0x88>
				StripCLR(&LEDSTRIP, NUM_LEDS);
     c2a:	6c e3       	ldi	r22, 0x3C	; 60
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	81 e3       	ldi	r24, 0x31	; 49
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	0e 94 c2 00 	call	0x184	; 0x184 <StripCLR>
				mode = 0;
     c36:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <mode+0x1>
     c3a:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <mode>
     c3e:	08 95       	ret
			}
			else mode = 1;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <mode+0x1>
     c48:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <mode>
     c4c:	08 95       	ret
			break;
		case 0x22DD:	// A
			mode = 1;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <mode+0x1>
     c56:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <mode>
			printf("A\n");
     c5a:	87 e5       	ldi	r24, 0x57	; 87
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <puts>
			break;
     c62:	08 95       	ret
		case 0x02FD:	// B
			mode = 2;
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <mode+0x1>
     c6c:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <mode>
			printf("B\n");
     c70:	89 e5       	ldi	r24, 0x59	; 89
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <puts>
			break;
     c78:	08 95       	ret
		case 0xC23D:	// C
			mode = 3;
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <mode+0x1>
     c82:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <mode>
			printf("C\n");
     c86:	8b e5       	ldi	r24, 0x5B	; 91
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <puts>
			break;
     c8e:	08 95       	ret
		case 0x9867:	// UP
			switch (mode) {
     c90:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <mode>
     c94:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <mode+0x1>
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	91 05       	cpc	r25, r1
     c9c:	19 f1       	breq	.+70     	; 0xce4 <runMode+0x12c>
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	91 05       	cpc	r25, r1
     ca2:	e9 f1       	breq	.+122    	; 0xd1e <runMode+0x166>
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	09 f0       	breq	.+2      	; 0xcaa <runMode+0xf2>
     ca8:	dc c0       	rjmp	.+440    	; 0xe62 <runMode+0x2aa>
				case 1:		// Snake Mode | Increase Snake
				if (s_len < 10) s_len++;
     caa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_len>
     cae:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <s_len+0x1>
     cb2:	8a 30       	cpi	r24, 0x0A	; 10
     cb4:	91 05       	cpc	r25, r1
     cb6:	2c f4       	brge	.+10     	; 0xcc2 <runMode+0x10a>
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <s_len+0x1>
     cbe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <s_len>
					printf("UP %d\n", s_len);
     cc2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <s_len+0x1>
     cc6:	8f 93       	push	r24
     cc8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_len>
     ccc:	8f 93       	push	r24
     cce:	8d e5       	ldi	r24, 0x5D	; 93
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	9f 93       	push	r25
     cd4:	8f 93       	push	r24
     cd6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <printf>
					break;
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	08 95       	ret
				case 2:		// O2I   Mode | Decrease Delay
					if (O2I_delay > 5) O2I_delay -= 2;
     ce4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <O2I_delay>
     ce8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <O2I_delay+0x1>
     cec:	86 30       	cpi	r24, 0x06	; 6
     cee:	91 05       	cpc	r25, r1
     cf0:	2c f0       	brlt	.+10     	; 0xcfc <runMode+0x144>
     cf2:	02 97       	sbiw	r24, 0x02	; 2
     cf4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <O2I_delay+0x1>
     cf8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <O2I_delay>
					printf("UP %d\n", O2I_delay);
     cfc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <O2I_delay+0x1>
     d00:	8f 93       	push	r24
     d02:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <O2I_delay>
     d06:	8f 93       	push	r24
     d08:	8d e5       	ldi	r24, 0x5D	; 93
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	9f 93       	push	r25
     d0e:	8f 93       	push	r24
     d10:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <printf>
					break;
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	08 95       	ret
				case 3:		// Rand  Mode | Decrease Delay
					if (RAN_delay > 4) RAN_delay -= 4;
     d1e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RAN_delay>
     d22:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <RAN_delay+0x1>
     d26:	85 30       	cpi	r24, 0x05	; 5
     d28:	91 05       	cpc	r25, r1
     d2a:	2c f0       	brlt	.+10     	; 0xd36 <runMode+0x17e>
     d2c:	04 97       	sbiw	r24, 0x04	; 4
     d2e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <RAN_delay+0x1>
     d32:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <RAN_delay>
					printf("UP %d\n", RAN_delay);
     d36:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <RAN_delay+0x1>
     d3a:	8f 93       	push	r24
     d3c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RAN_delay>
     d40:	8f 93       	push	r24
     d42:	8d e5       	ldi	r24, 0x5D	; 93
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <printf>
					break;	
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	08 95       	ret
			}
			break;
		case 0x30CF:	// LEFT
			printf("LEFT\n");
     d58:	84 e6       	ldi	r24, 0x64	; 100
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <puts>
			break;
     d60:	08 95       	ret
		case 0x18E7:	// CIRCLE
			printf("CIRCLE\n");
     d62:	89 e6       	ldi	r24, 0x69	; 105
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <puts>
			break;
     d6a:	08 95       	ret
		case 0x7A85:	// RIGHT
			printf("RIGHT\n");
     d6c:	80 e7       	ldi	r24, 0x70	; 112
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <puts>
			break;
     d74:	08 95       	ret
		case 0x38C7:	// DOWN
			switch (mode) {
     d76:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <mode>
     d7a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <mode+0x1>
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	91 05       	cpc	r25, r1
     d82:	19 f1       	breq	.+70     	; 0xdca <runMode+0x212>
     d84:	83 30       	cpi	r24, 0x03	; 3
     d86:	91 05       	cpc	r25, r1
     d88:	e9 f1       	breq	.+122    	; 0xe04 <runMode+0x24c>
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	09 f0       	breq	.+2      	; 0xd90 <runMode+0x1d8>
     d8e:	69 c0       	rjmp	.+210    	; 0xe62 <runMode+0x2aa>
				case 1:		// Snake Mode | Decrease Snake
					if (s_len > 1) s_len--;
     d90:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_len>
     d94:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <s_len+0x1>
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	91 05       	cpc	r25, r1
     d9c:	2c f0       	brlt	.+10     	; 0xda8 <runMode+0x1f0>
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <s_len+0x1>
     da4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <s_len>
					printf("DOWN %d\n", s_len);
     da8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <s_len+0x1>
     dac:	8f 93       	push	r24
     dae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <s_len>
     db2:	8f 93       	push	r24
     db4:	86 e7       	ldi	r24, 0x76	; 118
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	9f 93       	push	r25
     dba:	8f 93       	push	r24
     dbc:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <printf>
					break;
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	08 95       	ret
				case 2:		// O2I   Mode | Increase Delay
					if (O2I_delay < 20) O2I_delay += 2;
     dca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <O2I_delay>
     dce:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <O2I_delay+0x1>
     dd2:	84 31       	cpi	r24, 0x14	; 20
     dd4:	91 05       	cpc	r25, r1
     dd6:	2c f4       	brge	.+10     	; 0xde2 <runMode+0x22a>
     dd8:	02 96       	adiw	r24, 0x02	; 2
     dda:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <O2I_delay+0x1>
     dde:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <O2I_delay>
					printf("DOWN %d\n", O2I_delay);
     de2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <O2I_delay+0x1>
     de6:	8f 93       	push	r24
     de8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <O2I_delay>
     dec:	8f 93       	push	r24
     dee:	86 e7       	ldi	r24, 0x76	; 118
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	9f 93       	push	r25
     df4:	8f 93       	push	r24
     df6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <printf>
					break;
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	08 95       	ret
				case 3:		// Rand  Mode | Increase Delay
					if (RAN_delay < 60) RAN_delay += 4;
     e04:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RAN_delay>
     e08:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <RAN_delay+0x1>
     e0c:	8c 33       	cpi	r24, 0x3C	; 60
     e0e:	91 05       	cpc	r25, r1
     e10:	2c f4       	brge	.+10     	; 0xe1c <runMode+0x264>
     e12:	04 96       	adiw	r24, 0x04	; 4
     e14:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <RAN_delay+0x1>
     e18:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <RAN_delay>
					printf("DOWN %d\n", RAN_delay);
     e1c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <RAN_delay+0x1>
     e20:	8f 93       	push	r24
     e22:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RAN_delay>
     e26:	8f 93       	push	r24
     e28:	86 e7       	ldi	r24, 0x76	; 118
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	9f 93       	push	r25
     e2e:	8f 93       	push	r24
     e30:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <printf>
					break;
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	08 95       	ret
			}
			break;
		default:	// Error Case
			printf("ERROR OCCURED\n");
     e3e:	8f e7       	ldi	r24, 0x7F	; 127
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <puts>
			for (int i = 0; i < size_signal; i++) {
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	08 c0       	rjmp	.+16     	; 0xe5c <runMode+0x2a4>
				RECV_Data[i] = 0;
     e4c:	fc 01       	movw	r30, r24
     e4e:	ee 0f       	add	r30, r30
     e50:	ff 1f       	adc	r31, r31
     e52:	ef 5d       	subi	r30, 0xDF	; 223
     e54:	fc 4f       	sbci	r31, 0xFC	; 252
     e56:	11 82       	std	Z+1, r1	; 0x01
     e58:	10 82       	st	Z, r1
					break;
			}
			break;
		default:	// Error Case
			printf("ERROR OCCURED\n");
			for (int i = 0; i < size_signal; i++) {
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	85 32       	cpi	r24, 0x25	; 37
     e5e:	91 05       	cpc	r25, r1
     e60:	ac f3       	brlt	.-22     	; 0xe4c <runMode+0x294>
     e62:	08 95       	ret

00000e64 <main>:
			break;
	}
}

int main(void) {
	uart_init(0);
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <uart_init>
	//InitButton();

	InitINT0();
     e6a:	0e 94 86 05 	call	0xb0c	; 0xb0c <InitINT0>
	InitTimer1();
     e6e:	0e 94 24 05 	call	0xa48	; 0xa48 <InitTimer1>
	SPI_MasterInit();
     e72:	0e 94 1f 05 	call	0xa3e	; 0xa3e <SPI_MasterInit>

	sei();					// global interrupts enabled 
     e76:	78 94       	sei
	UCSR0B |= (1<<RXCIE0);	// Interrupts initialized
     e78:	e1 ec       	ldi	r30, 0xC1	; 193
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	80 68       	ori	r24, 0x80	; 128
     e80:	80 83       	st	Z, r24
	// LED to show Power is being Supplied
	DDRD  = (1<<PIND7);		
     e82:	80 e8       	ldi	r24, 0x80	; 128
     e84:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1<<PIND7);
     e86:	8b b9       	out	0x0b, r24	; 11

	strip_init(&LEDSTRIP, NUM_LEDS);		// Initialize all values of OBJ to 0
     e88:	6c e3       	ldi	r22, 0x3C	; 60
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	81 e3       	ldi	r24, 0x31	; 49
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	0e 94 7e 00 	call	0xfc	; 0xfc <strip_init>
	StripCLR(&LEDSTRIP, NUM_LEDS);			// Clears the LEDSTRIP display
     e94:	6c e3       	ldi	r22, 0x3C	; 60
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	81 e3       	ldi	r24, 0x31	; 49
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	0e 94 c2 00 	call	0x184	; 0x184 <StripCLR>

	while (1) {
		if (!recieving) {
     ea0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <recieving>
     ea4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <recieving+0x1>
     ea8:	89 2b       	or	r24, r25
     eaa:	71 f4       	brne	.+28     	; 0xec8 <main+0x64>
			dispRECV();
     eac:	0e 94 b5 05 	call	0xb6a	; 0xb6a <dispRECV>
			runMode();
     eb0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <runMode>
			// RESET
			recieving = 1;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <recieving+0x1>
     ebc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <recieving>
			pointer   = 0;
     ec0:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <__data_end+0x1>
     ec4:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <__data_end>
			
		}
		switch (mode) {
     ec8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <mode>
     ecc:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <mode+0x1>
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	91 05       	cpc	r25, r1
     ed4:	a1 f0       	breq	.+40     	; 0xefe <main+0x9a>
     ed6:	83 30       	cpi	r24, 0x03	; 3
     ed8:	91 05       	cpc	r25, r1
     eda:	e1 f0       	breq	.+56     	; 0xf14 <main+0xb0>
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	01 f7       	brne	.-64     	; 0xea0 <main+0x3c>
			case 0:
				break;
			case 1:
				LED_Bounce_Pattern(&LEDSTRIP, 0, 59, s_len, NUM_LEDS);
     ee0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <s_len>
     ee4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <s_len+0x1>
     ee8:	0c e3       	ldi	r16, 0x3C	; 60
     eea:	10 e0       	ldi	r17, 0x00	; 0
     eec:	4b e3       	ldi	r20, 0x3B	; 59
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	81 e3       	ldi	r24, 0x31	; 49
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	0e 94 46 01 	call	0x28c	; 0x28c <LED_Bounce_Pattern>
				break;
     efc:	d1 cf       	rjmp	.-94     	; 0xea0 <main+0x3c>
			case 2:
				LED_Out2InPattern(&LEDSTRIP, NUM_LEDS, O2I_delay);
     efe:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <O2I_delay>
     f02:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <O2I_delay+0x1>
     f06:	6c e3       	ldi	r22, 0x3C	; 60
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	81 e3       	ldi	r24, 0x31	; 49
     f0c:	92 e0       	ldi	r25, 0x02	; 2
     f0e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LED_Out2InPattern>
				break;
     f12:	c6 cf       	rjmp	.-116    	; 0xea0 <main+0x3c>
			case 3:
				LED_Rand_Pattern(&LEDSTRIP,NUM_LEDS, RAN_delay);
     f14:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <RAN_delay>
     f18:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <RAN_delay+0x1>
     f1c:	6c e3       	ldi	r22, 0x3C	; 60
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	81 e3       	ldi	r24, 0x31	; 49
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	0e 94 7e 03 	call	0x6fc	; 0x6fc <LED_Rand_Pattern>
				break;
     f28:	bb cf       	rjmp	.-138    	; 0xea0 <main+0x3c>

00000f2a <uart_putchar>:

/*
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int uart_putchar(char c, FILE *stream) {
     f2a:	cf 93       	push	r28
     f2c:	c8 2f       	mov	r28, r24

  if (c == '\a')
     f2e:	87 30       	cpi	r24, 0x07	; 7
     f30:	69 f4       	brne	.+26     	; 0xf4c <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
     f32:	20 91 6f 03 	lds	r18, 0x036F	; 0x80036f <__iob+0x4>
     f36:	30 91 70 03 	lds	r19, 0x0370	; 0x800370 <__iob+0x5>
     f3a:	47 e0       	ldi	r20, 0x07	; 7
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	8d e8       	ldi	r24, 0x8D	; 141
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	0e 94 35 0b 	call	0x166a	; 0x166a <fwrite>
      return 0;
     f4a:	2a c0       	rjmp	.+84     	; 0xfa0 <uart_putchar+0x76>
    }

  if (c == '\n')
     f4c:	8a 30       	cpi	r24, 0x0A	; 10
     f4e:	19 f4       	brne	.+6      	; 0xf56 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
     f50:	8d e0       	ldi	r24, 0x0D	; 13
     f52:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
	if (use_tx_interrupts) {
     f56:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <use_tx_interrupts>
     f5a:	88 23       	and	r24, r24
     f5c:	d9 f0       	breq	.+54     	; 0xf94 <uart_putchar+0x6a>
		t_buffer[t_put_index] = c;					// put character in buffer
     f5e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <t_put_index>
     f62:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <t_put_index+0x1>
     f66:	fc 01       	movw	r30, r24
     f68:	ef 50       	subi	r30, 0x0F	; 15
     f6a:	fe 4f       	sbci	r31, 0xFE	; 254
     f6c:	c0 83       	st	Z, r28
		t_put_index = (t_put_index + 1) % BUF_SIZE;	// increment ring buffer index
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	8f 73       	andi	r24, 0x3F	; 63
     f72:	90 78       	andi	r25, 0x80	; 128
     f74:	99 23       	and	r25, r25
     f76:	24 f4       	brge	.+8      	; 0xf80 <uart_putchar+0x56>
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	80 6c       	ori	r24, 0xC0	; 192
     f7c:	9f 6f       	ori	r25, 0xFF	; 255
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <t_put_index+0x1>
     f84:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <t_put_index>
		UCSR0B |= _BV(UDRE0);							// enable interrupt
     f88:	e1 ec       	ldi	r30, 0xC1	; 193
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	80 62       	ori	r24, 0x20	; 32
     f90:	80 83       	st	Z, r24
     f92:	06 c0       	rjmp	.+12     	; 0xfa0 <uart_putchar+0x76>
	} else {
		loop_until_bit_is_set(UCSR0A, UDRE0);
     f94:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     f98:	85 ff       	sbrs	r24, 5
     f9a:	fc cf       	rjmp	.-8      	; 0xf94 <uart_putchar+0x6a>
		UDR0 = c;
     f9c:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}

  return 0;
}
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <uart_getchar>:
 * parity recognition is supported by hardware).
 *
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int uart_getchar(FILE *stream) {
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     fb4:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <rxp.1837>
     fb8:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <rxp.1837+0x1>
     fbc:	23 2b       	or	r18, r19
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <uart_getchar+0x1a>
     fc0:	a3 c0       	rjmp	.+326    	; 0x1108 <uart_getchar+0x160>
     fc2:	8c 01       	movw	r16, r24
     fc4:	ca e9       	ldi	r28, 0x9A	; 154
     fc6:	d1 e0       	ldi	r29, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
     fc8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     fcc:	99 23       	and	r25, r25
     fce:	e4 f7       	brge	.-8      	; 0xfc8 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
     fd0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     fd4:	84 fd       	sbrc	r24, 4
     fd6:	ab c0       	rjmp	.+342    	; 0x112e <uart_getchar+0x186>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
     fd8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     fdc:	83 fd       	sbrc	r24, 3
     fde:	aa c0       	rjmp	.+340    	; 0x1134 <uart_getchar+0x18c>
	  return _FDEV_ERR;
	c = UDR0;
     fe0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     fe4:	8d 30       	cpi	r24, 0x0D	; 13
     fe6:	09 f4       	brne	.+2      	; 0xfea <uart_getchar+0x42>
	  c = '\n';
     fe8:	8a e0       	ldi	r24, 0x0A	; 10
	if (c == '\n')
     fea:	8a 30       	cpi	r24, 0x0A	; 10
     fec:	59 f4       	brne	.+22     	; 0x1004 <uart_getchar+0x5c>
	  {
	    *cp = c;
     fee:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
     ff0:	b8 01       	movw	r22, r16
     ff2:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
	    rxp = b;
     ff6:	8a e9       	ldi	r24, 0x9A	; 154
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <rxp.1837+0x1>
     ffe:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <rxp.1837>
	    break;
    1002:	82 c0       	rjmp	.+260    	; 0x1108 <uart_getchar+0x160>
	  }
	else if (c == '\t')
    1004:	89 30       	cpi	r24, 0x09	; 9
    1006:	09 f4       	brne	.+2      	; 0x100a <uart_getchar+0x62>
	  c = ' ';
    1008:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    100a:	90 ee       	ldi	r25, 0xE0	; 224
    100c:	98 0f       	add	r25, r24
    100e:	9f 35       	cpi	r25, 0x5F	; 95
    1010:	10 f0       	brcs	.+4      	; 0x1016 <uart_getchar+0x6e>
    1012:	80 3a       	cpi	r24, 0xA0	; 160
    1014:	98 f0       	brcs	.+38     	; 0x103c <uart_getchar+0x94>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	c9 3e       	cpi	r28, 0xE9	; 233
    101a:	d9 07       	cpc	r29, r25
    101c:	29 f4       	brne	.+10     	; 0x1028 <uart_getchar+0x80>
	      uart_putchar('\a', stream);
    101e:	b8 01       	movw	r22, r16
    1020:	87 e0       	ldi	r24, 0x07	; 7
    1022:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
    1026:	d0 cf       	rjmp	.-96     	; 0xfc8 <uart_getchar+0x20>
	    else
	      {
		*cp++ = c;
    1028:	7e 01       	movw	r14, r28
    102a:	ef ef       	ldi	r30, 0xFF	; 255
    102c:	ee 1a       	sub	r14, r30
    102e:	fe 0a       	sbc	r15, r30
    1030:	88 83       	st	Y, r24
		uart_putchar(c, stream);
    1032:	b8 01       	movw	r22, r16
    1034:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
    1038:	e7 01       	movw	r28, r14
		uart_putchar(c, stream);
	      }
	    continue;
    103a:	c6 cf       	rjmp	.-116    	; 0xfc8 <uart_getchar+0x20>
	  }

	switch (c)
    103c:	82 31       	cpi	r24, 0x12	; 18
    103e:	19 f1       	breq	.+70     	; 0x1086 <uart_getchar+0xde>
    1040:	30 f4       	brcc	.+12     	; 0x104e <uart_getchar+0xa6>
    1042:	83 30       	cpi	r24, 0x03	; 3
    1044:	09 f4       	brne	.+2      	; 0x1048 <uart_getchar+0xa0>
    1046:	79 c0       	rjmp	.+242    	; 0x113a <uart_getchar+0x192>
    1048:	88 30       	cpi	r24, 0x08	; 8
    104a:	49 f0       	breq	.+18     	; 0x105e <uart_getchar+0xb6>
    104c:	bd cf       	rjmp	.-134    	; 0xfc8 <uart_getchar+0x20>
    104e:	87 31       	cpi	r24, 0x17	; 23
    1050:	09 f4       	brne	.+2      	; 0x1054 <uart_getchar+0xac>
    1052:	4e c0       	rjmp	.+156    	; 0x10f0 <uart_getchar+0x148>
    1054:	8f 37       	cpi	r24, 0x7F	; 127
    1056:	19 f0       	breq	.+6      	; 0x105e <uart_getchar+0xb6>
    1058:	85 31       	cpi	r24, 0x15	; 21
    105a:	b9 f1       	breq	.+110    	; 0x10ca <uart_getchar+0x122>
    105c:	b5 cf       	rjmp	.-150    	; 0xfc8 <uart_getchar+0x20>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    105e:	f1 e0       	ldi	r31, 0x01	; 1
    1060:	ca 39       	cpi	r28, 0x9A	; 154
    1062:	df 07       	cpc	r29, r31
    1064:	09 f0       	breq	.+2      	; 0x1068 <uart_getchar+0xc0>
    1066:	08 f4       	brcc	.+2      	; 0x106a <uart_getchar+0xc2>
    1068:	af cf       	rjmp	.-162    	; 0xfc8 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    106a:	b8 01       	movw	r22, r16
    106c:	88 e0       	ldi	r24, 0x08	; 8
    106e:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
		uart_putchar(' ', stream);
    1072:	b8 01       	movw	r22, r16
    1074:	80 e2       	ldi	r24, 0x20	; 32
    1076:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
		uart_putchar('\b', stream);
    107a:	b8 01       	movw	r22, r16
    107c:	88 e0       	ldi	r24, 0x08	; 8
    107e:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
		cp--;
    1082:	21 97       	sbiw	r28, 0x01	; 1
    1084:	a1 cf       	rjmp	.-190    	; 0xfc8 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1086:	b8 01       	movw	r22, r16
    1088:	8d e0       	ldi	r24, 0x0D	; 13
    108a:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
    108e:	0f 2e       	mov	r0, r31
    1090:	fa e9       	ldi	r31, 0x9A	; 154
    1092:	ef 2e       	mov	r14, r31
    1094:	f1 e0       	ldi	r31, 0x01	; 1
    1096:	ff 2e       	mov	r15, r31
    1098:	f0 2d       	mov	r31, r0
    109a:	06 c0       	rjmp	.+12     	; 0x10a8 <uart_getchar+0x100>
	      uart_putchar(*cp2, stream);
    109c:	b8 01       	movw	r22, r16
    109e:	f7 01       	movw	r30, r14
    10a0:	81 91       	ld	r24, Z+
    10a2:	7f 01       	movw	r14, r30
    10a4:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    10a8:	ec 16       	cp	r14, r28
    10aa:	fd 06       	cpc	r15, r29
    10ac:	b8 f3       	brcs	.-18     	; 0x109c <uart_getchar+0xf4>
    10ae:	8c cf       	rjmp	.-232    	; 0xfc8 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    10b0:	b8 01       	movw	r22, r16
    10b2:	88 e0       	ldi	r24, 0x08	; 8
    10b4:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
		uart_putchar(' ', stream);
    10b8:	b8 01       	movw	r22, r16
    10ba:	80 e2       	ldi	r24, 0x20	; 32
    10bc:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
		uart_putchar('\b', stream);
    10c0:	b8 01       	movw	r22, r16
    10c2:	88 e0       	ldi	r24, 0x08	; 8
    10c4:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
		cp--;
    10c8:	21 97       	sbiw	r28, 0x01	; 1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    10ca:	f1 e0       	ldi	r31, 0x01	; 1
    10cc:	ca 39       	cpi	r28, 0x9A	; 154
    10ce:	df 07       	cpc	r29, r31
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <uart_getchar+0x12c>
    10d2:	70 f7       	brcc	.-36     	; 0x10b0 <uart_getchar+0x108>
    10d4:	79 cf       	rjmp	.-270    	; 0xfc8 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    10d6:	b8 01       	movw	r22, r16
    10d8:	88 e0       	ldi	r24, 0x08	; 8
    10da:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
		uart_putchar(' ', stream);
    10de:	b8 01       	movw	r22, r16
    10e0:	80 e2       	ldi	r24, 0x20	; 32
    10e2:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
		uart_putchar('\b', stream);
    10e6:	b8 01       	movw	r22, r16
    10e8:	88 e0       	ldi	r24, 0x08	; 8
    10ea:	0e 94 95 07 	call	0xf2a	; 0xf2a <uart_putchar>
		cp--;
    10ee:	21 97       	sbiw	r28, 0x01	; 1
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	ca 39       	cpi	r28, 0x9A	; 154
    10f4:	d8 07       	cpc	r29, r24
    10f6:	09 f0       	breq	.+2      	; 0x10fa <uart_getchar+0x152>
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <uart_getchar+0x154>
    10fa:	66 cf       	rjmp	.-308    	; 0xfc8 <uart_getchar+0x20>
    10fc:	fe 01       	movw	r30, r28
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	80 81       	ld	r24, Z
    1102:	80 32       	cpi	r24, 0x20	; 32
    1104:	41 f7       	brne	.-48     	; 0x10d6 <uart_getchar+0x12e>
    1106:	60 cf       	rjmp	.-320    	; 0xfc8 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1108:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <rxp.1837>
    110c:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <rxp.1837+0x1>
    1110:	cf 01       	movw	r24, r30
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <rxp.1837+0x1>
    1118:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <rxp.1837>
    111c:	80 81       	ld	r24, Z
  if (c == '\n')
    111e:	8a 30       	cpi	r24, 0x0A	; 10
    1120:	21 f4       	brne	.+8      	; 0x112a <uart_getchar+0x182>
    rxp = 0;
    1122:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <rxp.1837+0x1>
    1126:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <rxp.1837>

  return c;
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	08 c0       	rjmp	.+16     	; 0x113e <uart_getchar+0x196>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
    112e:	8e ef       	ldi	r24, 0xFE	; 254
    1130:	9f ef       	ldi	r25, 0xFF	; 255
    1132:	05 c0       	rjmp	.+10     	; 0x113e <uart_getchar+0x196>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	9f ef       	ldi	r25, 0xFF	; 255
    1138:	02 c0       	rjmp	.+4      	; 0x113e <uart_getchar+0x196>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
    113a:	8f ef       	ldi	r24, 0xFF	; 255
    113c:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	08 95       	ret

0000114c <__vector_19>:
static char t_buffer[BUF_SIZE];
static int t_put_index = 0;
volatile static int t_get_index = 0;

ISR(USART0_UDRE_vect)
{
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    115e:	ef 93       	push	r30
    1160:	ff 93       	push	r31
	if (t_get_index != t_put_index) {
    1162:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <t_get_index>
    1166:	30 91 ee 01 	lds	r19, 0x01EE	; 0x8001ee <t_get_index+0x1>
    116a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <t_put_index>
    116e:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <t_put_index+0x1>
    1172:	28 17       	cp	r18, r24
    1174:	39 07       	cpc	r19, r25
    1176:	51 f1       	breq	.+84     	; 0x11cc <__vector_19+0x80>
		UDR0 = t_buffer[t_get_index];
    1178:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <t_get_index>
    117c:	f0 91 ee 01 	lds	r31, 0x01EE	; 0x8001ee <t_get_index+0x1>
    1180:	ef 50       	subi	r30, 0x0F	; 15
    1182:	fe 4f       	sbci	r31, 0xFE	; 254
    1184:	80 81       	ld	r24, Z
    1186:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		t_get_index = (t_get_index + 1) % BUF_SIZE;
    118a:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <t_get_index>
    118e:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <t_get_index+0x1>
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	8f 73       	andi	r24, 0x3F	; 63
    1196:	90 78       	andi	r25, 0x80	; 128
    1198:	99 23       	and	r25, r25
    119a:	24 f4       	brge	.+8      	; 0x11a4 <__vector_19+0x58>
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	80 6c       	ori	r24, 0xC0	; 192
    11a0:	9f 6f       	ori	r25, 0xFF	; 255
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <t_get_index+0x1>
    11a8:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <t_get_index>
		if (t_get_index == t_put_index) {
    11ac:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <t_get_index>
    11b0:	30 91 ee 01 	lds	r19, 0x01EE	; 0x8001ee <t_get_index+0x1>
    11b4:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <t_put_index>
    11b8:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <t_put_index+0x1>
    11bc:	28 17       	cp	r18, r24
    11be:	39 07       	cpc	r19, r25
    11c0:	29 f4       	brne	.+10     	; 0x11cc <__vector_19+0x80>
			UCSR0B &= ~(_BV(UDRE0));
    11c2:	e1 ec       	ldi	r30, 0xC1	; 193
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	8f 7d       	andi	r24, 0xDF	; 223
    11ca:	80 83       	st	Z, r24
		}
	}
	
}
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	9f 91       	pop	r25
    11d2:	8f 91       	pop	r24
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <uart_init>:
void uart_init(bool use_tx_intr) {
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
    11e2:	97 e6       	ldi	r25, 0x67	; 103
    11e4:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    11e8:	98 e1       	ldi	r25, 0x18	; 24
    11ea:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  
  stdout = &uartFile;
    11ee:	eb e6       	ldi	r30, 0x6B	; 107
    11f0:	f3 e0       	ldi	r31, 0x03	; 3
    11f2:	2c e0       	ldi	r18, 0x0C	; 12
    11f4:	31 e0       	ldi	r19, 0x01	; 1
    11f6:	33 83       	std	Z+3, r19	; 0x03
    11f8:	22 83       	std	Z+2, r18	; 0x02
  stdin = &uartFile;
    11fa:	31 83       	std	Z+1, r19	; 0x01
    11fc:	20 83       	st	Z, r18
  stderr = &uartFile;
    11fe:	35 83       	std	Z+5, r19	; 0x05
    1200:	24 83       	std	Z+4, r18	; 0x04
  if (use_tx_intr) {
    1202:	88 23       	and	r24, r24
    1204:	21 f0       	breq	.+8      	; 0x120e <uart_init+0x2c>
	  use_tx_interrupts = true;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <use_tx_interrupts>
	  sei();
    120c:	78 94       	sei
    120e:	08 95       	ret

00001210 <__cmpsf2>:
    1210:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__fp_cmp>
    1214:	08 f4       	brcc	.+2      	; 0x1218 <__cmpsf2+0x8>
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	08 95       	ret

0000121a <__divsf3>:
    121a:	0e 94 21 09 	call	0x1242	; 0x1242 <__divsf3x>
    121e:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__fp_round>
    1222:	0e 94 26 0a 	call	0x144c	; 0x144c <__fp_pscB>
    1226:	58 f0       	brcs	.+22     	; 0x123e <__divsf3+0x24>
    1228:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fp_pscA>
    122c:	40 f0       	brcs	.+16     	; 0x123e <__divsf3+0x24>
    122e:	29 f4       	brne	.+10     	; 0x123a <__divsf3+0x20>
    1230:	5f 3f       	cpi	r21, 0xFF	; 255
    1232:	29 f0       	breq	.+10     	; 0x123e <__divsf3+0x24>
    1234:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_inf>
    1238:	51 11       	cpse	r21, r1
    123a:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__fp_szero>
    123e:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_nan>

00001242 <__divsf3x>:
    1242:	0e 94 3e 0a 	call	0x147c	; 0x147c <__fp_split3>
    1246:	68 f3       	brcs	.-38     	; 0x1222 <__divsf3+0x8>

00001248 <__divsf3_pse>:
    1248:	99 23       	and	r25, r25
    124a:	b1 f3       	breq	.-20     	; 0x1238 <__divsf3+0x1e>
    124c:	55 23       	and	r21, r21
    124e:	91 f3       	breq	.-28     	; 0x1234 <__divsf3+0x1a>
    1250:	95 1b       	sub	r25, r21
    1252:	55 0b       	sbc	r21, r21
    1254:	bb 27       	eor	r27, r27
    1256:	aa 27       	eor	r26, r26
    1258:	62 17       	cp	r22, r18
    125a:	73 07       	cpc	r23, r19
    125c:	84 07       	cpc	r24, r20
    125e:	38 f0       	brcs	.+14     	; 0x126e <__divsf3_pse+0x26>
    1260:	9f 5f       	subi	r25, 0xFF	; 255
    1262:	5f 4f       	sbci	r21, 0xFF	; 255
    1264:	22 0f       	add	r18, r18
    1266:	33 1f       	adc	r19, r19
    1268:	44 1f       	adc	r20, r20
    126a:	aa 1f       	adc	r26, r26
    126c:	a9 f3       	breq	.-22     	; 0x1258 <__divsf3_pse+0x10>
    126e:	35 d0       	rcall	.+106    	; 0x12da <__divsf3_pse+0x92>
    1270:	0e 2e       	mov	r0, r30
    1272:	3a f0       	brmi	.+14     	; 0x1282 <__divsf3_pse+0x3a>
    1274:	e0 e8       	ldi	r30, 0x80	; 128
    1276:	32 d0       	rcall	.+100    	; 0x12dc <__divsf3_pse+0x94>
    1278:	91 50       	subi	r25, 0x01	; 1
    127a:	50 40       	sbci	r21, 0x00	; 0
    127c:	e6 95       	lsr	r30
    127e:	00 1c       	adc	r0, r0
    1280:	ca f7       	brpl	.-14     	; 0x1274 <__divsf3_pse+0x2c>
    1282:	2b d0       	rcall	.+86     	; 0x12da <__divsf3_pse+0x92>
    1284:	fe 2f       	mov	r31, r30
    1286:	29 d0       	rcall	.+82     	; 0x12da <__divsf3_pse+0x92>
    1288:	66 0f       	add	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	88 1f       	adc	r24, r24
    128e:	bb 1f       	adc	r27, r27
    1290:	26 17       	cp	r18, r22
    1292:	37 07       	cpc	r19, r23
    1294:	48 07       	cpc	r20, r24
    1296:	ab 07       	cpc	r26, r27
    1298:	b0 e8       	ldi	r27, 0x80	; 128
    129a:	09 f0       	breq	.+2      	; 0x129e <__divsf3_pse+0x56>
    129c:	bb 0b       	sbc	r27, r27
    129e:	80 2d       	mov	r24, r0
    12a0:	bf 01       	movw	r22, r30
    12a2:	ff 27       	eor	r31, r31
    12a4:	93 58       	subi	r25, 0x83	; 131
    12a6:	5f 4f       	sbci	r21, 0xFF	; 255
    12a8:	3a f0       	brmi	.+14     	; 0x12b8 <__divsf3_pse+0x70>
    12aa:	9e 3f       	cpi	r25, 0xFE	; 254
    12ac:	51 05       	cpc	r21, r1
    12ae:	78 f0       	brcs	.+30     	; 0x12ce <__divsf3_pse+0x86>
    12b0:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_inf>
    12b4:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__fp_szero>
    12b8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ba:	e4 f3       	brlt	.-8      	; 0x12b4 <__divsf3_pse+0x6c>
    12bc:	98 3e       	cpi	r25, 0xE8	; 232
    12be:	d4 f3       	brlt	.-12     	; 0x12b4 <__divsf3_pse+0x6c>
    12c0:	86 95       	lsr	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	b7 95       	ror	r27
    12c8:	f7 95       	ror	r31
    12ca:	9f 5f       	subi	r25, 0xFF	; 255
    12cc:	c9 f7       	brne	.-14     	; 0x12c0 <__divsf3_pse+0x78>
    12ce:	88 0f       	add	r24, r24
    12d0:	91 1d       	adc	r25, r1
    12d2:	96 95       	lsr	r25
    12d4:	87 95       	ror	r24
    12d6:	97 f9       	bld	r25, 7
    12d8:	08 95       	ret
    12da:	e1 e0       	ldi	r30, 0x01	; 1
    12dc:	66 0f       	add	r22, r22
    12de:	77 1f       	adc	r23, r23
    12e0:	88 1f       	adc	r24, r24
    12e2:	bb 1f       	adc	r27, r27
    12e4:	62 17       	cp	r22, r18
    12e6:	73 07       	cpc	r23, r19
    12e8:	84 07       	cpc	r24, r20
    12ea:	ba 07       	cpc	r27, r26
    12ec:	20 f0       	brcs	.+8      	; 0x12f6 <__divsf3_pse+0xae>
    12ee:	62 1b       	sub	r22, r18
    12f0:	73 0b       	sbc	r23, r19
    12f2:	84 0b       	sbc	r24, r20
    12f4:	ba 0b       	sbc	r27, r26
    12f6:	ee 1f       	adc	r30, r30
    12f8:	88 f7       	brcc	.-30     	; 0x12dc <__divsf3_pse+0x94>
    12fa:	e0 95       	com	r30
    12fc:	08 95       	ret

000012fe <__fixsfsi>:
    12fe:	0e 94 86 09 	call	0x130c	; 0x130c <__fixunssfsi>
    1302:	68 94       	set
    1304:	b1 11       	cpse	r27, r1
    1306:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__fp_szero>
    130a:	08 95       	ret

0000130c <__fixunssfsi>:
    130c:	0e 94 46 0a 	call	0x148c	; 0x148c <__fp_splitA>
    1310:	88 f0       	brcs	.+34     	; 0x1334 <__fixunssfsi+0x28>
    1312:	9f 57       	subi	r25, 0x7F	; 127
    1314:	98 f0       	brcs	.+38     	; 0x133c <__fixunssfsi+0x30>
    1316:	b9 2f       	mov	r27, r25
    1318:	99 27       	eor	r25, r25
    131a:	b7 51       	subi	r27, 0x17	; 23
    131c:	b0 f0       	brcs	.+44     	; 0x134a <__fixunssfsi+0x3e>
    131e:	e1 f0       	breq	.+56     	; 0x1358 <__fixunssfsi+0x4c>
    1320:	66 0f       	add	r22, r22
    1322:	77 1f       	adc	r23, r23
    1324:	88 1f       	adc	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	1a f0       	brmi	.+6      	; 0x1330 <__fixunssfsi+0x24>
    132a:	ba 95       	dec	r27
    132c:	c9 f7       	brne	.-14     	; 0x1320 <__fixunssfsi+0x14>
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <__fixunssfsi+0x4c>
    1330:	b1 30       	cpi	r27, 0x01	; 1
    1332:	91 f0       	breq	.+36     	; 0x1358 <__fixunssfsi+0x4c>
    1334:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__fp_zero>
    1338:	b1 e0       	ldi	r27, 0x01	; 1
    133a:	08 95       	ret
    133c:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__fp_zero>
    1340:	67 2f       	mov	r22, r23
    1342:	78 2f       	mov	r23, r24
    1344:	88 27       	eor	r24, r24
    1346:	b8 5f       	subi	r27, 0xF8	; 248
    1348:	39 f0       	breq	.+14     	; 0x1358 <__fixunssfsi+0x4c>
    134a:	b9 3f       	cpi	r27, 0xF9	; 249
    134c:	cc f3       	brlt	.-14     	; 0x1340 <__fixunssfsi+0x34>
    134e:	86 95       	lsr	r24
    1350:	77 95       	ror	r23
    1352:	67 95       	ror	r22
    1354:	b3 95       	inc	r27
    1356:	d9 f7       	brne	.-10     	; 0x134e <__fixunssfsi+0x42>
    1358:	3e f4       	brtc	.+14     	; 0x1368 <__fixunssfsi+0x5c>
    135a:	90 95       	com	r25
    135c:	80 95       	com	r24
    135e:	70 95       	com	r23
    1360:	61 95       	neg	r22
    1362:	7f 4f       	sbci	r23, 0xFF	; 255
    1364:	8f 4f       	sbci	r24, 0xFF	; 255
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	08 95       	ret

0000136a <__floatunsisf>:
    136a:	e8 94       	clt
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <__floatsisf+0x12>

0000136e <__floatsisf>:
    136e:	97 fb       	bst	r25, 7
    1370:	3e f4       	brtc	.+14     	; 0x1380 <__floatsisf+0x12>
    1372:	90 95       	com	r25
    1374:	80 95       	com	r24
    1376:	70 95       	com	r23
    1378:	61 95       	neg	r22
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	8f 4f       	sbci	r24, 0xFF	; 255
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	99 23       	and	r25, r25
    1382:	a9 f0       	breq	.+42     	; 0x13ae <__floatsisf+0x40>
    1384:	f9 2f       	mov	r31, r25
    1386:	96 e9       	ldi	r25, 0x96	; 150
    1388:	bb 27       	eor	r27, r27
    138a:	93 95       	inc	r25
    138c:	f6 95       	lsr	r31
    138e:	87 95       	ror	r24
    1390:	77 95       	ror	r23
    1392:	67 95       	ror	r22
    1394:	b7 95       	ror	r27
    1396:	f1 11       	cpse	r31, r1
    1398:	f8 cf       	rjmp	.-16     	; 0x138a <__floatsisf+0x1c>
    139a:	fa f4       	brpl	.+62     	; 0x13da <__floatsisf+0x6c>
    139c:	bb 0f       	add	r27, r27
    139e:	11 f4       	brne	.+4      	; 0x13a4 <__floatsisf+0x36>
    13a0:	60 ff       	sbrs	r22, 0
    13a2:	1b c0       	rjmp	.+54     	; 0x13da <__floatsisf+0x6c>
    13a4:	6f 5f       	subi	r22, 0xFF	; 255
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	16 c0       	rjmp	.+44     	; 0x13da <__floatsisf+0x6c>
    13ae:	88 23       	and	r24, r24
    13b0:	11 f0       	breq	.+4      	; 0x13b6 <__floatsisf+0x48>
    13b2:	96 e9       	ldi	r25, 0x96	; 150
    13b4:	11 c0       	rjmp	.+34     	; 0x13d8 <__floatsisf+0x6a>
    13b6:	77 23       	and	r23, r23
    13b8:	21 f0       	breq	.+8      	; 0x13c2 <__floatsisf+0x54>
    13ba:	9e e8       	ldi	r25, 0x8E	; 142
    13bc:	87 2f       	mov	r24, r23
    13be:	76 2f       	mov	r23, r22
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <__floatsisf+0x5e>
    13c2:	66 23       	and	r22, r22
    13c4:	71 f0       	breq	.+28     	; 0x13e2 <__floatsisf+0x74>
    13c6:	96 e8       	ldi	r25, 0x86	; 134
    13c8:	86 2f       	mov	r24, r22
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	2a f0       	brmi	.+10     	; 0x13da <__floatsisf+0x6c>
    13d0:	9a 95       	dec	r25
    13d2:	66 0f       	add	r22, r22
    13d4:	77 1f       	adc	r23, r23
    13d6:	88 1f       	adc	r24, r24
    13d8:	da f7       	brpl	.-10     	; 0x13d0 <__floatsisf+0x62>
    13da:	88 0f       	add	r24, r24
    13dc:	96 95       	lsr	r25
    13de:	87 95       	ror	r24
    13e0:	97 f9       	bld	r25, 7
    13e2:	08 95       	ret

000013e4 <__fp_cmp>:
    13e4:	99 0f       	add	r25, r25
    13e6:	00 08       	sbc	r0, r0
    13e8:	55 0f       	add	r21, r21
    13ea:	aa 0b       	sbc	r26, r26
    13ec:	e0 e8       	ldi	r30, 0x80	; 128
    13ee:	fe ef       	ldi	r31, 0xFE	; 254
    13f0:	16 16       	cp	r1, r22
    13f2:	17 06       	cpc	r1, r23
    13f4:	e8 07       	cpc	r30, r24
    13f6:	f9 07       	cpc	r31, r25
    13f8:	c0 f0       	brcs	.+48     	; 0x142a <__fp_cmp+0x46>
    13fa:	12 16       	cp	r1, r18
    13fc:	13 06       	cpc	r1, r19
    13fe:	e4 07       	cpc	r30, r20
    1400:	f5 07       	cpc	r31, r21
    1402:	98 f0       	brcs	.+38     	; 0x142a <__fp_cmp+0x46>
    1404:	62 1b       	sub	r22, r18
    1406:	73 0b       	sbc	r23, r19
    1408:	84 0b       	sbc	r24, r20
    140a:	95 0b       	sbc	r25, r21
    140c:	39 f4       	brne	.+14     	; 0x141c <__fp_cmp+0x38>
    140e:	0a 26       	eor	r0, r26
    1410:	61 f0       	breq	.+24     	; 0x142a <__fp_cmp+0x46>
    1412:	23 2b       	or	r18, r19
    1414:	24 2b       	or	r18, r20
    1416:	25 2b       	or	r18, r21
    1418:	21 f4       	brne	.+8      	; 0x1422 <__fp_cmp+0x3e>
    141a:	08 95       	ret
    141c:	0a 26       	eor	r0, r26
    141e:	09 f4       	brne	.+2      	; 0x1422 <__fp_cmp+0x3e>
    1420:	a1 40       	sbci	r26, 0x01	; 1
    1422:	a6 95       	lsr	r26
    1424:	8f ef       	ldi	r24, 0xFF	; 255
    1426:	81 1d       	adc	r24, r1
    1428:	81 1d       	adc	r24, r1
    142a:	08 95       	ret

0000142c <__fp_inf>:
    142c:	97 f9       	bld	r25, 7
    142e:	9f 67       	ori	r25, 0x7F	; 127
    1430:	80 e8       	ldi	r24, 0x80	; 128
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	08 95       	ret

00001438 <__fp_nan>:
    1438:	9f ef       	ldi	r25, 0xFF	; 255
    143a:	80 ec       	ldi	r24, 0xC0	; 192
    143c:	08 95       	ret

0000143e <__fp_pscA>:
    143e:	00 24       	eor	r0, r0
    1440:	0a 94       	dec	r0
    1442:	16 16       	cp	r1, r22
    1444:	17 06       	cpc	r1, r23
    1446:	18 06       	cpc	r1, r24
    1448:	09 06       	cpc	r0, r25
    144a:	08 95       	ret

0000144c <__fp_pscB>:
    144c:	00 24       	eor	r0, r0
    144e:	0a 94       	dec	r0
    1450:	12 16       	cp	r1, r18
    1452:	13 06       	cpc	r1, r19
    1454:	14 06       	cpc	r1, r20
    1456:	05 06       	cpc	r0, r21
    1458:	08 95       	ret

0000145a <__fp_round>:
    145a:	09 2e       	mov	r0, r25
    145c:	03 94       	inc	r0
    145e:	00 0c       	add	r0, r0
    1460:	11 f4       	brne	.+4      	; 0x1466 <__fp_round+0xc>
    1462:	88 23       	and	r24, r24
    1464:	52 f0       	brmi	.+20     	; 0x147a <__fp_round+0x20>
    1466:	bb 0f       	add	r27, r27
    1468:	40 f4       	brcc	.+16     	; 0x147a <__fp_round+0x20>
    146a:	bf 2b       	or	r27, r31
    146c:	11 f4       	brne	.+4      	; 0x1472 <__fp_round+0x18>
    146e:	60 ff       	sbrs	r22, 0
    1470:	04 c0       	rjmp	.+8      	; 0x147a <__fp_round+0x20>
    1472:	6f 5f       	subi	r22, 0xFF	; 255
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	8f 4f       	sbci	r24, 0xFF	; 255
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	08 95       	ret

0000147c <__fp_split3>:
    147c:	57 fd       	sbrc	r21, 7
    147e:	90 58       	subi	r25, 0x80	; 128
    1480:	44 0f       	add	r20, r20
    1482:	55 1f       	adc	r21, r21
    1484:	59 f0       	breq	.+22     	; 0x149c <__fp_splitA+0x10>
    1486:	5f 3f       	cpi	r21, 0xFF	; 255
    1488:	71 f0       	breq	.+28     	; 0x14a6 <__fp_splitA+0x1a>
    148a:	47 95       	ror	r20

0000148c <__fp_splitA>:
    148c:	88 0f       	add	r24, r24
    148e:	97 fb       	bst	r25, 7
    1490:	99 1f       	adc	r25, r25
    1492:	61 f0       	breq	.+24     	; 0x14ac <__fp_splitA+0x20>
    1494:	9f 3f       	cpi	r25, 0xFF	; 255
    1496:	79 f0       	breq	.+30     	; 0x14b6 <__fp_splitA+0x2a>
    1498:	87 95       	ror	r24
    149a:	08 95       	ret
    149c:	12 16       	cp	r1, r18
    149e:	13 06       	cpc	r1, r19
    14a0:	14 06       	cpc	r1, r20
    14a2:	55 1f       	adc	r21, r21
    14a4:	f2 cf       	rjmp	.-28     	; 0x148a <__fp_split3+0xe>
    14a6:	46 95       	lsr	r20
    14a8:	f1 df       	rcall	.-30     	; 0x148c <__fp_splitA>
    14aa:	08 c0       	rjmp	.+16     	; 0x14bc <__fp_splitA+0x30>
    14ac:	16 16       	cp	r1, r22
    14ae:	17 06       	cpc	r1, r23
    14b0:	18 06       	cpc	r1, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	f1 cf       	rjmp	.-30     	; 0x1498 <__fp_splitA+0xc>
    14b6:	86 95       	lsr	r24
    14b8:	71 05       	cpc	r23, r1
    14ba:	61 05       	cpc	r22, r1
    14bc:	08 94       	sec
    14be:	08 95       	ret

000014c0 <__fp_zero>:
    14c0:	e8 94       	clt

000014c2 <__fp_szero>:
    14c2:	bb 27       	eor	r27, r27
    14c4:	66 27       	eor	r22, r22
    14c6:	77 27       	eor	r23, r23
    14c8:	cb 01       	movw	r24, r22
    14ca:	97 f9       	bld	r25, 7
    14cc:	08 95       	ret

000014ce <__gesf2>:
    14ce:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__fp_cmp>
    14d2:	08 f4       	brcc	.+2      	; 0x14d6 <__gesf2+0x8>
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	08 95       	ret

000014d8 <__mulsf3>:
    14d8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__mulsf3x>
    14dc:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__fp_round>
    14e0:	0e 94 1f 0a 	call	0x143e	; 0x143e <__fp_pscA>
    14e4:	38 f0       	brcs	.+14     	; 0x14f4 <__mulsf3+0x1c>
    14e6:	0e 94 26 0a 	call	0x144c	; 0x144c <__fp_pscB>
    14ea:	20 f0       	brcs	.+8      	; 0x14f4 <__mulsf3+0x1c>
    14ec:	95 23       	and	r25, r21
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <__mulsf3+0x1c>
    14f0:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_inf>
    14f4:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__fp_nan>
    14f8:	11 24       	eor	r1, r1
    14fa:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__fp_szero>

000014fe <__mulsf3x>:
    14fe:	0e 94 3e 0a 	call	0x147c	; 0x147c <__fp_split3>
    1502:	70 f3       	brcs	.-36     	; 0x14e0 <__mulsf3+0x8>

00001504 <__mulsf3_pse>:
    1504:	95 9f       	mul	r25, r21
    1506:	c1 f3       	breq	.-16     	; 0x14f8 <__mulsf3+0x20>
    1508:	95 0f       	add	r25, r21
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	55 1f       	adc	r21, r21
    150e:	62 9f       	mul	r22, r18
    1510:	f0 01       	movw	r30, r0
    1512:	72 9f       	mul	r23, r18
    1514:	bb 27       	eor	r27, r27
    1516:	f0 0d       	add	r31, r0
    1518:	b1 1d       	adc	r27, r1
    151a:	63 9f       	mul	r22, r19
    151c:	aa 27       	eor	r26, r26
    151e:	f0 0d       	add	r31, r0
    1520:	b1 1d       	adc	r27, r1
    1522:	aa 1f       	adc	r26, r26
    1524:	64 9f       	mul	r22, r20
    1526:	66 27       	eor	r22, r22
    1528:	b0 0d       	add	r27, r0
    152a:	a1 1d       	adc	r26, r1
    152c:	66 1f       	adc	r22, r22
    152e:	82 9f       	mul	r24, r18
    1530:	22 27       	eor	r18, r18
    1532:	b0 0d       	add	r27, r0
    1534:	a1 1d       	adc	r26, r1
    1536:	62 1f       	adc	r22, r18
    1538:	73 9f       	mul	r23, r19
    153a:	b0 0d       	add	r27, r0
    153c:	a1 1d       	adc	r26, r1
    153e:	62 1f       	adc	r22, r18
    1540:	83 9f       	mul	r24, r19
    1542:	a0 0d       	add	r26, r0
    1544:	61 1d       	adc	r22, r1
    1546:	22 1f       	adc	r18, r18
    1548:	74 9f       	mul	r23, r20
    154a:	33 27       	eor	r19, r19
    154c:	a0 0d       	add	r26, r0
    154e:	61 1d       	adc	r22, r1
    1550:	23 1f       	adc	r18, r19
    1552:	84 9f       	mul	r24, r20
    1554:	60 0d       	add	r22, r0
    1556:	21 1d       	adc	r18, r1
    1558:	82 2f       	mov	r24, r18
    155a:	76 2f       	mov	r23, r22
    155c:	6a 2f       	mov	r22, r26
    155e:	11 24       	eor	r1, r1
    1560:	9f 57       	subi	r25, 0x7F	; 127
    1562:	50 40       	sbci	r21, 0x00	; 0
    1564:	9a f0       	brmi	.+38     	; 0x158c <__mulsf3_pse+0x88>
    1566:	f1 f0       	breq	.+60     	; 0x15a4 <__mulsf3_pse+0xa0>
    1568:	88 23       	and	r24, r24
    156a:	4a f0       	brmi	.+18     	; 0x157e <__mulsf3_pse+0x7a>
    156c:	ee 0f       	add	r30, r30
    156e:	ff 1f       	adc	r31, r31
    1570:	bb 1f       	adc	r27, r27
    1572:	66 1f       	adc	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	91 50       	subi	r25, 0x01	; 1
    157a:	50 40       	sbci	r21, 0x00	; 0
    157c:	a9 f7       	brne	.-22     	; 0x1568 <__mulsf3_pse+0x64>
    157e:	9e 3f       	cpi	r25, 0xFE	; 254
    1580:	51 05       	cpc	r21, r1
    1582:	80 f0       	brcs	.+32     	; 0x15a4 <__mulsf3_pse+0xa0>
    1584:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_inf>
    1588:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__fp_szero>
    158c:	5f 3f       	cpi	r21, 0xFF	; 255
    158e:	e4 f3       	brlt	.-8      	; 0x1588 <__mulsf3_pse+0x84>
    1590:	98 3e       	cpi	r25, 0xE8	; 232
    1592:	d4 f3       	brlt	.-12     	; 0x1588 <__mulsf3_pse+0x84>
    1594:	86 95       	lsr	r24
    1596:	77 95       	ror	r23
    1598:	67 95       	ror	r22
    159a:	b7 95       	ror	r27
    159c:	f7 95       	ror	r31
    159e:	e7 95       	ror	r30
    15a0:	9f 5f       	subi	r25, 0xFF	; 255
    15a2:	c1 f7       	brne	.-16     	; 0x1594 <__mulsf3_pse+0x90>
    15a4:	fe 2b       	or	r31, r30
    15a6:	88 0f       	add	r24, r24
    15a8:	91 1d       	adc	r25, r1
    15aa:	96 95       	lsr	r25
    15ac:	87 95       	ror	r24
    15ae:	97 f9       	bld	r25, 7
    15b0:	08 95       	ret

000015b2 <do_rand>:
    15b2:	8f 92       	push	r8
    15b4:	9f 92       	push	r9
    15b6:	af 92       	push	r10
    15b8:	bf 92       	push	r11
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	ec 01       	movw	r28, r24
    15c8:	68 81       	ld	r22, Y
    15ca:	79 81       	ldd	r23, Y+1	; 0x01
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	9b 81       	ldd	r25, Y+3	; 0x03
    15d0:	61 15       	cp	r22, r1
    15d2:	71 05       	cpc	r23, r1
    15d4:	81 05       	cpc	r24, r1
    15d6:	91 05       	cpc	r25, r1
    15d8:	21 f4       	brne	.+8      	; 0x15e2 <do_rand+0x30>
    15da:	64 e2       	ldi	r22, 0x24	; 36
    15dc:	79 ed       	ldi	r23, 0xD9	; 217
    15de:	8b e5       	ldi	r24, 0x5B	; 91
    15e0:	97 e0       	ldi	r25, 0x07	; 7
    15e2:	2d e1       	ldi	r18, 0x1D	; 29
    15e4:	33 ef       	ldi	r19, 0xF3	; 243
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__divmodsi4>
    15ee:	49 01       	movw	r8, r18
    15f0:	5a 01       	movw	r10, r20
    15f2:	9b 01       	movw	r18, r22
    15f4:	ac 01       	movw	r20, r24
    15f6:	a7 ea       	ldi	r26, 0xA7	; 167
    15f8:	b1 e4       	ldi	r27, 0x41	; 65
    15fa:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__muluhisi3>
    15fe:	6b 01       	movw	r12, r22
    1600:	7c 01       	movw	r14, r24
    1602:	ac ee       	ldi	r26, 0xEC	; 236
    1604:	b4 ef       	ldi	r27, 0xF4	; 244
    1606:	a5 01       	movw	r20, r10
    1608:	94 01       	movw	r18, r8
    160a:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__mulohisi3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	8c 0d       	add	r24, r12
    1614:	9d 1d       	adc	r25, r13
    1616:	ae 1d       	adc	r26, r14
    1618:	bf 1d       	adc	r27, r15
    161a:	b7 ff       	sbrs	r27, 7
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <do_rand+0x72>
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	a1 09       	sbc	r26, r1
    1622:	b0 48       	sbci	r27, 0x80	; 128
    1624:	88 83       	st	Y, r24
    1626:	99 83       	std	Y+1, r25	; 0x01
    1628:	aa 83       	std	Y+2, r26	; 0x02
    162a:	bb 83       	std	Y+3, r27	; 0x03
    162c:	9f 77       	andi	r25, 0x7F	; 127
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	bf 90       	pop	r11
    163c:	af 90       	pop	r10
    163e:	9f 90       	pop	r9
    1640:	8f 90       	pop	r8
    1642:	08 95       	ret

00001644 <rand_r>:
    1644:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <do_rand>
    1648:	08 95       	ret

0000164a <rand>:
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <do_rand>
    1652:	08 95       	ret

00001654 <srand>:
    1654:	a0 e0       	ldi	r26, 0x00	; 0
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    165c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1660:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1664:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1668:	08 95       	ret

0000166a <fwrite>:
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e3       	ldi	r30, 0x3B	; 59
    1670:	fb e0       	ldi	r31, 0x0B	; 11
    1672:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__prologue_saves__+0xc>
    1676:	5b 01       	movw	r10, r22
    1678:	4a 01       	movw	r8, r20
    167a:	79 01       	movw	r14, r18
    167c:	d9 01       	movw	r26, r18
    167e:	13 96       	adiw	r26, 0x03	; 3
    1680:	2c 91       	ld	r18, X
    1682:	21 ff       	sbrs	r18, 1
    1684:	1d c0       	rjmp	.+58     	; 0x16c0 <fwrite+0x56>
    1686:	c0 e0       	ldi	r28, 0x00	; 0
    1688:	d0 e0       	ldi	r29, 0x00	; 0
    168a:	c8 15       	cp	r28, r8
    168c:	d9 05       	cpc	r29, r9
    168e:	d9 f0       	breq	.+54     	; 0x16c6 <fwrite+0x5c>
    1690:	8c 01       	movw	r16, r24
    1692:	6c 01       	movw	r12, r24
    1694:	ca 0c       	add	r12, r10
    1696:	db 1c       	adc	r13, r11
    1698:	c8 01       	movw	r24, r16
    169a:	0c 15       	cp	r16, r12
    169c:	1d 05       	cpc	r17, r13
    169e:	71 f0       	breq	.+28     	; 0x16bc <fwrite+0x52>
    16a0:	0f 5f       	subi	r16, 0xFF	; 255
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	d7 01       	movw	r26, r14
    16a6:	18 96       	adiw	r26, 0x08	; 8
    16a8:	ed 91       	ld	r30, X+
    16aa:	fc 91       	ld	r31, X
    16ac:	19 97       	sbiw	r26, 0x09	; 9
    16ae:	b7 01       	movw	r22, r14
    16b0:	dc 01       	movw	r26, r24
    16b2:	8c 91       	ld	r24, X
    16b4:	09 95       	icall
    16b6:	89 2b       	or	r24, r25
    16b8:	79 f3       	breq	.-34     	; 0x1698 <fwrite+0x2e>
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <fwrite+0x5c>
    16bc:	21 96       	adiw	r28, 0x01	; 1
    16be:	e5 cf       	rjmp	.-54     	; 0x168a <fwrite+0x20>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <fwrite+0x5e>
    16c6:	ce 01       	movw	r24, r28
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	ec e0       	ldi	r30, 0x0C	; 12
    16ce:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__epilogue_restores__+0xc>

000016d2 <printf>:
    16d2:	a0 e0       	ldi	r26, 0x00	; 0
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ef e6       	ldi	r30, 0x6F	; 111
    16d8:	fb e0       	ldi	r31, 0x0B	; 11
    16da:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__prologue_saves__+0x20>
    16de:	ae 01       	movw	r20, r28
    16e0:	4b 5f       	subi	r20, 0xFB	; 251
    16e2:	5f 4f       	sbci	r21, 0xFF	; 255
    16e4:	fa 01       	movw	r30, r20
    16e6:	61 91       	ld	r22, Z+
    16e8:	71 91       	ld	r23, Z+
    16ea:	af 01       	movw	r20, r30
    16ec:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <__iob+0x2>
    16f0:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <__iob+0x3>
    16f4:	0e 94 af 0b 	call	0x175e	; 0x175e <vfprintf>
    16f8:	e2 e0       	ldi	r30, 0x02	; 2
    16fa:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__epilogue_restores__+0x20>

000016fe <puts>:
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <__iob+0x2>
    170a:	f0 91 6e 03 	lds	r31, 0x036E	; 0x80036e <__iob+0x3>
    170e:	23 81       	ldd	r18, Z+3	; 0x03
    1710:	21 ff       	sbrs	r18, 1
    1712:	1b c0       	rjmp	.+54     	; 0x174a <puts+0x4c>
    1714:	8c 01       	movw	r16, r24
    1716:	d0 e0       	ldi	r29, 0x00	; 0
    1718:	c0 e0       	ldi	r28, 0x00	; 0
    171a:	f8 01       	movw	r30, r16
    171c:	81 91       	ld	r24, Z+
    171e:	8f 01       	movw	r16, r30
    1720:	60 91 6d 03 	lds	r22, 0x036D	; 0x80036d <__iob+0x2>
    1724:	70 91 6e 03 	lds	r23, 0x036E	; 0x80036e <__iob+0x3>
    1728:	db 01       	movw	r26, r22
    172a:	18 96       	adiw	r26, 0x08	; 8
    172c:	ed 91       	ld	r30, X+
    172e:	fc 91       	ld	r31, X
    1730:	19 97       	sbiw	r26, 0x09	; 9
    1732:	88 23       	and	r24, r24
    1734:	31 f0       	breq	.+12     	; 0x1742 <puts+0x44>
    1736:	09 95       	icall
    1738:	89 2b       	or	r24, r25
    173a:	79 f3       	breq	.-34     	; 0x171a <puts+0x1c>
    173c:	df ef       	ldi	r29, 0xFF	; 255
    173e:	cf ef       	ldi	r28, 0xFF	; 255
    1740:	ec cf       	rjmp	.-40     	; 0x171a <puts+0x1c>
    1742:	8a e0       	ldi	r24, 0x0A	; 10
    1744:	09 95       	icall
    1746:	89 2b       	or	r24, r25
    1748:	19 f0       	breq	.+6      	; 0x1750 <puts+0x52>
    174a:	8f ef       	ldi	r24, 0xFF	; 255
    174c:	9f ef       	ldi	r25, 0xFF	; 255
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <puts+0x56>
    1750:	8d 2f       	mov	r24, r29
    1752:	9c 2f       	mov	r25, r28
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	08 95       	ret

0000175e <vfprintf>:
    175e:	ab e0       	ldi	r26, 0x0B	; 11
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e5 eb       	ldi	r30, 0xB5	; 181
    1764:	fb e0       	ldi	r31, 0x0B	; 11
    1766:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <__prologue_saves__>
    176a:	6c 01       	movw	r12, r24
    176c:	7b 01       	movw	r14, r22
    176e:	8a 01       	movw	r16, r20
    1770:	fc 01       	movw	r30, r24
    1772:	17 82       	std	Z+7, r1	; 0x07
    1774:	16 82       	std	Z+6, r1	; 0x06
    1776:	83 81       	ldd	r24, Z+3	; 0x03
    1778:	81 ff       	sbrs	r24, 1
    177a:	cc c1       	rjmp	.+920    	; 0x1b14 <vfprintf+0x3b6>
    177c:	ce 01       	movw	r24, r28
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	3c 01       	movw	r6, r24
    1782:	f6 01       	movw	r30, r12
    1784:	93 81       	ldd	r25, Z+3	; 0x03
    1786:	f7 01       	movw	r30, r14
    1788:	93 fd       	sbrc	r25, 3
    178a:	85 91       	lpm	r24, Z+
    178c:	93 ff       	sbrs	r25, 3
    178e:	81 91       	ld	r24, Z+
    1790:	7f 01       	movw	r14, r30
    1792:	88 23       	and	r24, r24
    1794:	09 f4       	brne	.+2      	; 0x1798 <vfprintf+0x3a>
    1796:	ba c1       	rjmp	.+884    	; 0x1b0c <vfprintf+0x3ae>
    1798:	85 32       	cpi	r24, 0x25	; 37
    179a:	39 f4       	brne	.+14     	; 0x17aa <vfprintf+0x4c>
    179c:	93 fd       	sbrc	r25, 3
    179e:	85 91       	lpm	r24, Z+
    17a0:	93 ff       	sbrs	r25, 3
    17a2:	81 91       	ld	r24, Z+
    17a4:	7f 01       	movw	r14, r30
    17a6:	85 32       	cpi	r24, 0x25	; 37
    17a8:	29 f4       	brne	.+10     	; 0x17b4 <vfprintf+0x56>
    17aa:	b6 01       	movw	r22, r12
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <fputc>
    17b2:	e7 cf       	rjmp	.-50     	; 0x1782 <vfprintf+0x24>
    17b4:	91 2c       	mov	r9, r1
    17b6:	21 2c       	mov	r2, r1
    17b8:	31 2c       	mov	r3, r1
    17ba:	ff e1       	ldi	r31, 0x1F	; 31
    17bc:	f3 15       	cp	r31, r3
    17be:	d8 f0       	brcs	.+54     	; 0x17f6 <vfprintf+0x98>
    17c0:	8b 32       	cpi	r24, 0x2B	; 43
    17c2:	79 f0       	breq	.+30     	; 0x17e2 <vfprintf+0x84>
    17c4:	38 f4       	brcc	.+14     	; 0x17d4 <vfprintf+0x76>
    17c6:	80 32       	cpi	r24, 0x20	; 32
    17c8:	79 f0       	breq	.+30     	; 0x17e8 <vfprintf+0x8a>
    17ca:	83 32       	cpi	r24, 0x23	; 35
    17cc:	a1 f4       	brne	.+40     	; 0x17f6 <vfprintf+0x98>
    17ce:	23 2d       	mov	r18, r3
    17d0:	20 61       	ori	r18, 0x10	; 16
    17d2:	1d c0       	rjmp	.+58     	; 0x180e <vfprintf+0xb0>
    17d4:	8d 32       	cpi	r24, 0x2D	; 45
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <vfprintf+0x92>
    17d8:	80 33       	cpi	r24, 0x30	; 48
    17da:	69 f4       	brne	.+26     	; 0x17f6 <vfprintf+0x98>
    17dc:	23 2d       	mov	r18, r3
    17de:	21 60       	ori	r18, 0x01	; 1
    17e0:	16 c0       	rjmp	.+44     	; 0x180e <vfprintf+0xb0>
    17e2:	83 2d       	mov	r24, r3
    17e4:	82 60       	ori	r24, 0x02	; 2
    17e6:	38 2e       	mov	r3, r24
    17e8:	e3 2d       	mov	r30, r3
    17ea:	e4 60       	ori	r30, 0x04	; 4
    17ec:	3e 2e       	mov	r3, r30
    17ee:	2a c0       	rjmp	.+84     	; 0x1844 <vfprintf+0xe6>
    17f0:	f3 2d       	mov	r31, r3
    17f2:	f8 60       	ori	r31, 0x08	; 8
    17f4:	1d c0       	rjmp	.+58     	; 0x1830 <vfprintf+0xd2>
    17f6:	37 fc       	sbrc	r3, 7
    17f8:	2d c0       	rjmp	.+90     	; 0x1854 <vfprintf+0xf6>
    17fa:	20 ed       	ldi	r18, 0xD0	; 208
    17fc:	28 0f       	add	r18, r24
    17fe:	2a 30       	cpi	r18, 0x0A	; 10
    1800:	40 f0       	brcs	.+16     	; 0x1812 <vfprintf+0xb4>
    1802:	8e 32       	cpi	r24, 0x2E	; 46
    1804:	b9 f4       	brne	.+46     	; 0x1834 <vfprintf+0xd6>
    1806:	36 fc       	sbrc	r3, 6
    1808:	81 c1       	rjmp	.+770    	; 0x1b0c <vfprintf+0x3ae>
    180a:	23 2d       	mov	r18, r3
    180c:	20 64       	ori	r18, 0x40	; 64
    180e:	32 2e       	mov	r3, r18
    1810:	19 c0       	rjmp	.+50     	; 0x1844 <vfprintf+0xe6>
    1812:	36 fe       	sbrs	r3, 6
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <vfprintf+0xc4>
    1816:	8a e0       	ldi	r24, 0x0A	; 10
    1818:	98 9e       	mul	r9, r24
    181a:	20 0d       	add	r18, r0
    181c:	11 24       	eor	r1, r1
    181e:	92 2e       	mov	r9, r18
    1820:	11 c0       	rjmp	.+34     	; 0x1844 <vfprintf+0xe6>
    1822:	ea e0       	ldi	r30, 0x0A	; 10
    1824:	2e 9e       	mul	r2, r30
    1826:	20 0d       	add	r18, r0
    1828:	11 24       	eor	r1, r1
    182a:	22 2e       	mov	r2, r18
    182c:	f3 2d       	mov	r31, r3
    182e:	f0 62       	ori	r31, 0x20	; 32
    1830:	3f 2e       	mov	r3, r31
    1832:	08 c0       	rjmp	.+16     	; 0x1844 <vfprintf+0xe6>
    1834:	8c 36       	cpi	r24, 0x6C	; 108
    1836:	21 f4       	brne	.+8      	; 0x1840 <vfprintf+0xe2>
    1838:	83 2d       	mov	r24, r3
    183a:	80 68       	ori	r24, 0x80	; 128
    183c:	38 2e       	mov	r3, r24
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <vfprintf+0xe6>
    1840:	88 36       	cpi	r24, 0x68	; 104
    1842:	41 f4       	brne	.+16     	; 0x1854 <vfprintf+0xf6>
    1844:	f7 01       	movw	r30, r14
    1846:	93 fd       	sbrc	r25, 3
    1848:	85 91       	lpm	r24, Z+
    184a:	93 ff       	sbrs	r25, 3
    184c:	81 91       	ld	r24, Z+
    184e:	7f 01       	movw	r14, r30
    1850:	81 11       	cpse	r24, r1
    1852:	b3 cf       	rjmp	.-154    	; 0x17ba <vfprintf+0x5c>
    1854:	98 2f       	mov	r25, r24
    1856:	9f 7d       	andi	r25, 0xDF	; 223
    1858:	95 54       	subi	r25, 0x45	; 69
    185a:	93 30       	cpi	r25, 0x03	; 3
    185c:	28 f4       	brcc	.+10     	; 0x1868 <vfprintf+0x10a>
    185e:	0c 5f       	subi	r16, 0xFC	; 252
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	9f e3       	ldi	r25, 0x3F	; 63
    1864:	99 83       	std	Y+1, r25	; 0x01
    1866:	0d c0       	rjmp	.+26     	; 0x1882 <vfprintf+0x124>
    1868:	83 36       	cpi	r24, 0x63	; 99
    186a:	31 f0       	breq	.+12     	; 0x1878 <vfprintf+0x11a>
    186c:	83 37       	cpi	r24, 0x73	; 115
    186e:	71 f0       	breq	.+28     	; 0x188c <vfprintf+0x12e>
    1870:	83 35       	cpi	r24, 0x53	; 83
    1872:	09 f0       	breq	.+2      	; 0x1876 <vfprintf+0x118>
    1874:	59 c0       	rjmp	.+178    	; 0x1928 <vfprintf+0x1ca>
    1876:	21 c0       	rjmp	.+66     	; 0x18ba <vfprintf+0x15c>
    1878:	f8 01       	movw	r30, r16
    187a:	80 81       	ld	r24, Z
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	0e 5f       	subi	r16, 0xFE	; 254
    1880:	1f 4f       	sbci	r17, 0xFF	; 255
    1882:	88 24       	eor	r8, r8
    1884:	83 94       	inc	r8
    1886:	91 2c       	mov	r9, r1
    1888:	53 01       	movw	r10, r6
    188a:	13 c0       	rjmp	.+38     	; 0x18b2 <vfprintf+0x154>
    188c:	28 01       	movw	r4, r16
    188e:	f2 e0       	ldi	r31, 0x02	; 2
    1890:	4f 0e       	add	r4, r31
    1892:	51 1c       	adc	r5, r1
    1894:	f8 01       	movw	r30, r16
    1896:	a0 80       	ld	r10, Z
    1898:	b1 80       	ldd	r11, Z+1	; 0x01
    189a:	36 fe       	sbrs	r3, 6
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <vfprintf+0x146>
    189e:	69 2d       	mov	r22, r9
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <vfprintf+0x14a>
    18a4:	6f ef       	ldi	r22, 0xFF	; 255
    18a6:	7f ef       	ldi	r23, 0xFF	; 255
    18a8:	c5 01       	movw	r24, r10
    18aa:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <strnlen>
    18ae:	4c 01       	movw	r8, r24
    18b0:	82 01       	movw	r16, r4
    18b2:	f3 2d       	mov	r31, r3
    18b4:	ff 77       	andi	r31, 0x7F	; 127
    18b6:	3f 2e       	mov	r3, r31
    18b8:	16 c0       	rjmp	.+44     	; 0x18e6 <vfprintf+0x188>
    18ba:	28 01       	movw	r4, r16
    18bc:	22 e0       	ldi	r18, 0x02	; 2
    18be:	42 0e       	add	r4, r18
    18c0:	51 1c       	adc	r5, r1
    18c2:	f8 01       	movw	r30, r16
    18c4:	a0 80       	ld	r10, Z
    18c6:	b1 80       	ldd	r11, Z+1	; 0x01
    18c8:	36 fe       	sbrs	r3, 6
    18ca:	03 c0       	rjmp	.+6      	; 0x18d2 <vfprintf+0x174>
    18cc:	69 2d       	mov	r22, r9
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <vfprintf+0x178>
    18d2:	6f ef       	ldi	r22, 0xFF	; 255
    18d4:	7f ef       	ldi	r23, 0xFF	; 255
    18d6:	c5 01       	movw	r24, r10
    18d8:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <strnlen_P>
    18dc:	4c 01       	movw	r8, r24
    18de:	f3 2d       	mov	r31, r3
    18e0:	f0 68       	ori	r31, 0x80	; 128
    18e2:	3f 2e       	mov	r3, r31
    18e4:	82 01       	movw	r16, r4
    18e6:	33 fc       	sbrc	r3, 3
    18e8:	1b c0       	rjmp	.+54     	; 0x1920 <vfprintf+0x1c2>
    18ea:	82 2d       	mov	r24, r2
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	88 16       	cp	r8, r24
    18f0:	99 06       	cpc	r9, r25
    18f2:	b0 f4       	brcc	.+44     	; 0x1920 <vfprintf+0x1c2>
    18f4:	b6 01       	movw	r22, r12
    18f6:	80 e2       	ldi	r24, 0x20	; 32
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <fputc>
    18fe:	2a 94       	dec	r2
    1900:	f4 cf       	rjmp	.-24     	; 0x18ea <vfprintf+0x18c>
    1902:	f5 01       	movw	r30, r10
    1904:	37 fc       	sbrc	r3, 7
    1906:	85 91       	lpm	r24, Z+
    1908:	37 fe       	sbrs	r3, 7
    190a:	81 91       	ld	r24, Z+
    190c:	5f 01       	movw	r10, r30
    190e:	b6 01       	movw	r22, r12
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <fputc>
    1916:	21 10       	cpse	r2, r1
    1918:	2a 94       	dec	r2
    191a:	21 e0       	ldi	r18, 0x01	; 1
    191c:	82 1a       	sub	r8, r18
    191e:	91 08       	sbc	r9, r1
    1920:	81 14       	cp	r8, r1
    1922:	91 04       	cpc	r9, r1
    1924:	71 f7       	brne	.-36     	; 0x1902 <vfprintf+0x1a4>
    1926:	e8 c0       	rjmp	.+464    	; 0x1af8 <vfprintf+0x39a>
    1928:	84 36       	cpi	r24, 0x64	; 100
    192a:	11 f0       	breq	.+4      	; 0x1930 <vfprintf+0x1d2>
    192c:	89 36       	cpi	r24, 0x69	; 105
    192e:	41 f5       	brne	.+80     	; 0x1980 <vfprintf+0x222>
    1930:	f8 01       	movw	r30, r16
    1932:	37 fe       	sbrs	r3, 7
    1934:	07 c0       	rjmp	.+14     	; 0x1944 <vfprintf+0x1e6>
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	0c 5f       	subi	r16, 0xFC	; 252
    1940:	1f 4f       	sbci	r17, 0xFF	; 255
    1942:	08 c0       	rjmp	.+16     	; 0x1954 <vfprintf+0x1f6>
    1944:	60 81       	ld	r22, Z
    1946:	71 81       	ldd	r23, Z+1	; 0x01
    1948:	07 2e       	mov	r0, r23
    194a:	00 0c       	add	r0, r0
    194c:	88 0b       	sbc	r24, r24
    194e:	99 0b       	sbc	r25, r25
    1950:	0e 5f       	subi	r16, 0xFE	; 254
    1952:	1f 4f       	sbci	r17, 0xFF	; 255
    1954:	f3 2d       	mov	r31, r3
    1956:	ff 76       	andi	r31, 0x6F	; 111
    1958:	3f 2e       	mov	r3, r31
    195a:	97 ff       	sbrs	r25, 7
    195c:	09 c0       	rjmp	.+18     	; 0x1970 <vfprintf+0x212>
    195e:	90 95       	com	r25
    1960:	80 95       	com	r24
    1962:	70 95       	com	r23
    1964:	61 95       	neg	r22
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	8f 4f       	sbci	r24, 0xFF	; 255
    196a:	9f 4f       	sbci	r25, 0xFF	; 255
    196c:	f0 68       	ori	r31, 0x80	; 128
    196e:	3f 2e       	mov	r3, r31
    1970:	2a e0       	ldi	r18, 0x0A	; 10
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	a3 01       	movw	r20, r6
    1976:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__ultoa_invert>
    197a:	88 2e       	mov	r8, r24
    197c:	86 18       	sub	r8, r6
    197e:	45 c0       	rjmp	.+138    	; 0x1a0a <vfprintf+0x2ac>
    1980:	85 37       	cpi	r24, 0x75	; 117
    1982:	31 f4       	brne	.+12     	; 0x1990 <vfprintf+0x232>
    1984:	23 2d       	mov	r18, r3
    1986:	2f 7e       	andi	r18, 0xEF	; 239
    1988:	b2 2e       	mov	r11, r18
    198a:	2a e0       	ldi	r18, 0x0A	; 10
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	25 c0       	rjmp	.+74     	; 0x19da <vfprintf+0x27c>
    1990:	93 2d       	mov	r25, r3
    1992:	99 7f       	andi	r25, 0xF9	; 249
    1994:	b9 2e       	mov	r11, r25
    1996:	8f 36       	cpi	r24, 0x6F	; 111
    1998:	c1 f0       	breq	.+48     	; 0x19ca <vfprintf+0x26c>
    199a:	18 f4       	brcc	.+6      	; 0x19a2 <vfprintf+0x244>
    199c:	88 35       	cpi	r24, 0x58	; 88
    199e:	79 f0       	breq	.+30     	; 0x19be <vfprintf+0x260>
    19a0:	b5 c0       	rjmp	.+362    	; 0x1b0c <vfprintf+0x3ae>
    19a2:	80 37       	cpi	r24, 0x70	; 112
    19a4:	19 f0       	breq	.+6      	; 0x19ac <vfprintf+0x24e>
    19a6:	88 37       	cpi	r24, 0x78	; 120
    19a8:	21 f0       	breq	.+8      	; 0x19b2 <vfprintf+0x254>
    19aa:	b0 c0       	rjmp	.+352    	; 0x1b0c <vfprintf+0x3ae>
    19ac:	e9 2f       	mov	r30, r25
    19ae:	e0 61       	ori	r30, 0x10	; 16
    19b0:	be 2e       	mov	r11, r30
    19b2:	b4 fe       	sbrs	r11, 4
    19b4:	0d c0       	rjmp	.+26     	; 0x19d0 <vfprintf+0x272>
    19b6:	fb 2d       	mov	r31, r11
    19b8:	f4 60       	ori	r31, 0x04	; 4
    19ba:	bf 2e       	mov	r11, r31
    19bc:	09 c0       	rjmp	.+18     	; 0x19d0 <vfprintf+0x272>
    19be:	34 fe       	sbrs	r3, 4
    19c0:	0a c0       	rjmp	.+20     	; 0x19d6 <vfprintf+0x278>
    19c2:	29 2f       	mov	r18, r25
    19c4:	26 60       	ori	r18, 0x06	; 6
    19c6:	b2 2e       	mov	r11, r18
    19c8:	06 c0       	rjmp	.+12     	; 0x19d6 <vfprintf+0x278>
    19ca:	28 e0       	ldi	r18, 0x08	; 8
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	05 c0       	rjmp	.+10     	; 0x19da <vfprintf+0x27c>
    19d0:	20 e1       	ldi	r18, 0x10	; 16
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <vfprintf+0x27c>
    19d6:	20 e1       	ldi	r18, 0x10	; 16
    19d8:	32 e0       	ldi	r19, 0x02	; 2
    19da:	f8 01       	movw	r30, r16
    19dc:	b7 fe       	sbrs	r11, 7
    19de:	07 c0       	rjmp	.+14     	; 0x19ee <vfprintf+0x290>
    19e0:	60 81       	ld	r22, Z
    19e2:	71 81       	ldd	r23, Z+1	; 0x01
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	0c 5f       	subi	r16, 0xFC	; 252
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	06 c0       	rjmp	.+12     	; 0x19fa <vfprintf+0x29c>
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 5f       	subi	r16, 0xFE	; 254
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	a3 01       	movw	r20, r6
    19fc:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__ultoa_invert>
    1a00:	88 2e       	mov	r8, r24
    1a02:	86 18       	sub	r8, r6
    1a04:	fb 2d       	mov	r31, r11
    1a06:	ff 77       	andi	r31, 0x7F	; 127
    1a08:	3f 2e       	mov	r3, r31
    1a0a:	36 fe       	sbrs	r3, 6
    1a0c:	0d c0       	rjmp	.+26     	; 0x1a28 <vfprintf+0x2ca>
    1a0e:	23 2d       	mov	r18, r3
    1a10:	2e 7f       	andi	r18, 0xFE	; 254
    1a12:	a2 2e       	mov	r10, r18
    1a14:	89 14       	cp	r8, r9
    1a16:	58 f4       	brcc	.+22     	; 0x1a2e <vfprintf+0x2d0>
    1a18:	34 fe       	sbrs	r3, 4
    1a1a:	0b c0       	rjmp	.+22     	; 0x1a32 <vfprintf+0x2d4>
    1a1c:	32 fc       	sbrc	r3, 2
    1a1e:	09 c0       	rjmp	.+18     	; 0x1a32 <vfprintf+0x2d4>
    1a20:	83 2d       	mov	r24, r3
    1a22:	8e 7e       	andi	r24, 0xEE	; 238
    1a24:	a8 2e       	mov	r10, r24
    1a26:	05 c0       	rjmp	.+10     	; 0x1a32 <vfprintf+0x2d4>
    1a28:	b8 2c       	mov	r11, r8
    1a2a:	a3 2c       	mov	r10, r3
    1a2c:	03 c0       	rjmp	.+6      	; 0x1a34 <vfprintf+0x2d6>
    1a2e:	b8 2c       	mov	r11, r8
    1a30:	01 c0       	rjmp	.+2      	; 0x1a34 <vfprintf+0x2d6>
    1a32:	b9 2c       	mov	r11, r9
    1a34:	a4 fe       	sbrs	r10, 4
    1a36:	0f c0       	rjmp	.+30     	; 0x1a56 <vfprintf+0x2f8>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e8 0d       	add	r30, r8
    1a3c:	f1 1d       	adc	r31, r1
    1a3e:	80 81       	ld	r24, Z
    1a40:	80 33       	cpi	r24, 0x30	; 48
    1a42:	21 f4       	brne	.+8      	; 0x1a4c <vfprintf+0x2ee>
    1a44:	9a 2d       	mov	r25, r10
    1a46:	99 7e       	andi	r25, 0xE9	; 233
    1a48:	a9 2e       	mov	r10, r25
    1a4a:	09 c0       	rjmp	.+18     	; 0x1a5e <vfprintf+0x300>
    1a4c:	a2 fe       	sbrs	r10, 2
    1a4e:	06 c0       	rjmp	.+12     	; 0x1a5c <vfprintf+0x2fe>
    1a50:	b3 94       	inc	r11
    1a52:	b3 94       	inc	r11
    1a54:	04 c0       	rjmp	.+8      	; 0x1a5e <vfprintf+0x300>
    1a56:	8a 2d       	mov	r24, r10
    1a58:	86 78       	andi	r24, 0x86	; 134
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <vfprintf+0x300>
    1a5c:	b3 94       	inc	r11
    1a5e:	a3 fc       	sbrc	r10, 3
    1a60:	11 c0       	rjmp	.+34     	; 0x1a84 <vfprintf+0x326>
    1a62:	a0 fe       	sbrs	r10, 0
    1a64:	06 c0       	rjmp	.+12     	; 0x1a72 <vfprintf+0x314>
    1a66:	b2 14       	cp	r11, r2
    1a68:	88 f4       	brcc	.+34     	; 0x1a8c <vfprintf+0x32e>
    1a6a:	28 0c       	add	r2, r8
    1a6c:	92 2c       	mov	r9, r2
    1a6e:	9b 18       	sub	r9, r11
    1a70:	0e c0       	rjmp	.+28     	; 0x1a8e <vfprintf+0x330>
    1a72:	b2 14       	cp	r11, r2
    1a74:	60 f4       	brcc	.+24     	; 0x1a8e <vfprintf+0x330>
    1a76:	b6 01       	movw	r22, r12
    1a78:	80 e2       	ldi	r24, 0x20	; 32
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <fputc>
    1a80:	b3 94       	inc	r11
    1a82:	f7 cf       	rjmp	.-18     	; 0x1a72 <vfprintf+0x314>
    1a84:	b2 14       	cp	r11, r2
    1a86:	18 f4       	brcc	.+6      	; 0x1a8e <vfprintf+0x330>
    1a88:	2b 18       	sub	r2, r11
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <vfprintf+0x332>
    1a8c:	98 2c       	mov	r9, r8
    1a8e:	21 2c       	mov	r2, r1
    1a90:	a4 fe       	sbrs	r10, 4
    1a92:	10 c0       	rjmp	.+32     	; 0x1ab4 <vfprintf+0x356>
    1a94:	b6 01       	movw	r22, r12
    1a96:	80 e3       	ldi	r24, 0x30	; 48
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <fputc>
    1a9e:	a2 fe       	sbrs	r10, 2
    1aa0:	17 c0       	rjmp	.+46     	; 0x1ad0 <vfprintf+0x372>
    1aa2:	a1 fc       	sbrc	r10, 1
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <vfprintf+0x34e>
    1aa6:	88 e7       	ldi	r24, 0x78	; 120
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <vfprintf+0x352>
    1aac:	88 e5       	ldi	r24, 0x58	; 88
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	b6 01       	movw	r22, r12
    1ab2:	0c c0       	rjmp	.+24     	; 0x1acc <vfprintf+0x36e>
    1ab4:	8a 2d       	mov	r24, r10
    1ab6:	86 78       	andi	r24, 0x86	; 134
    1ab8:	59 f0       	breq	.+22     	; 0x1ad0 <vfprintf+0x372>
    1aba:	a1 fe       	sbrs	r10, 1
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <vfprintf+0x364>
    1abe:	8b e2       	ldi	r24, 0x2B	; 43
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <vfprintf+0x366>
    1ac2:	80 e2       	ldi	r24, 0x20	; 32
    1ac4:	a7 fc       	sbrc	r10, 7
    1ac6:	8d e2       	ldi	r24, 0x2D	; 45
    1ac8:	b6 01       	movw	r22, r12
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <fputc>
    1ad0:	89 14       	cp	r8, r9
    1ad2:	38 f4       	brcc	.+14     	; 0x1ae2 <vfprintf+0x384>
    1ad4:	b6 01       	movw	r22, r12
    1ad6:	80 e3       	ldi	r24, 0x30	; 48
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <fputc>
    1ade:	9a 94       	dec	r9
    1ae0:	f7 cf       	rjmp	.-18     	; 0x1ad0 <vfprintf+0x372>
    1ae2:	8a 94       	dec	r8
    1ae4:	f3 01       	movw	r30, r6
    1ae6:	e8 0d       	add	r30, r8
    1ae8:	f1 1d       	adc	r31, r1
    1aea:	80 81       	ld	r24, Z
    1aec:	b6 01       	movw	r22, r12
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <fputc>
    1af4:	81 10       	cpse	r8, r1
    1af6:	f5 cf       	rjmp	.-22     	; 0x1ae2 <vfprintf+0x384>
    1af8:	22 20       	and	r2, r2
    1afa:	09 f4       	brne	.+2      	; 0x1afe <vfprintf+0x3a0>
    1afc:	42 ce       	rjmp	.-892    	; 0x1782 <vfprintf+0x24>
    1afe:	b6 01       	movw	r22, r12
    1b00:	80 e2       	ldi	r24, 0x20	; 32
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <fputc>
    1b08:	2a 94       	dec	r2
    1b0a:	f6 cf       	rjmp	.-20     	; 0x1af8 <vfprintf+0x39a>
    1b0c:	f6 01       	movw	r30, r12
    1b0e:	86 81       	ldd	r24, Z+6	; 0x06
    1b10:	97 81       	ldd	r25, Z+7	; 0x07
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <vfprintf+0x3ba>
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	9f ef       	ldi	r25, 0xFF	; 255
    1b18:	2b 96       	adiw	r28, 0x0b	; 11
    1b1a:	e2 e1       	ldi	r30, 0x12	; 18
    1b1c:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__epilogue_restores__>

00001b20 <strnlen_P>:
    1b20:	fc 01       	movw	r30, r24
    1b22:	05 90       	lpm	r0, Z+
    1b24:	61 50       	subi	r22, 0x01	; 1
    1b26:	70 40       	sbci	r23, 0x00	; 0
    1b28:	01 10       	cpse	r0, r1
    1b2a:	d8 f7       	brcc	.-10     	; 0x1b22 <strnlen_P+0x2>
    1b2c:	80 95       	com	r24
    1b2e:	90 95       	com	r25
    1b30:	8e 0f       	add	r24, r30
    1b32:	9f 1f       	adc	r25, r31
    1b34:	08 95       	ret

00001b36 <strnlen>:
    1b36:	fc 01       	movw	r30, r24
    1b38:	61 50       	subi	r22, 0x01	; 1
    1b3a:	70 40       	sbci	r23, 0x00	; 0
    1b3c:	01 90       	ld	r0, Z+
    1b3e:	01 10       	cpse	r0, r1
    1b40:	d8 f7       	brcc	.-10     	; 0x1b38 <strnlen+0x2>
    1b42:	80 95       	com	r24
    1b44:	90 95       	com	r25
    1b46:	8e 0f       	add	r24, r30
    1b48:	9f 1f       	adc	r25, r31
    1b4a:	08 95       	ret

00001b4c <fputc>:
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	fb 01       	movw	r30, r22
    1b56:	23 81       	ldd	r18, Z+3	; 0x03
    1b58:	21 fd       	sbrc	r18, 1
    1b5a:	03 c0       	rjmp	.+6      	; 0x1b62 <fputc+0x16>
    1b5c:	8f ef       	ldi	r24, 0xFF	; 255
    1b5e:	9f ef       	ldi	r25, 0xFF	; 255
    1b60:	2c c0       	rjmp	.+88     	; 0x1bba <fputc+0x6e>
    1b62:	22 ff       	sbrs	r18, 2
    1b64:	16 c0       	rjmp	.+44     	; 0x1b92 <fputc+0x46>
    1b66:	46 81       	ldd	r20, Z+6	; 0x06
    1b68:	57 81       	ldd	r21, Z+7	; 0x07
    1b6a:	24 81       	ldd	r18, Z+4	; 0x04
    1b6c:	35 81       	ldd	r19, Z+5	; 0x05
    1b6e:	42 17       	cp	r20, r18
    1b70:	53 07       	cpc	r21, r19
    1b72:	44 f4       	brge	.+16     	; 0x1b84 <fputc+0x38>
    1b74:	a0 81       	ld	r26, Z
    1b76:	b1 81       	ldd	r27, Z+1	; 0x01
    1b78:	9d 01       	movw	r18, r26
    1b7a:	2f 5f       	subi	r18, 0xFF	; 255
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	31 83       	std	Z+1, r19	; 0x01
    1b80:	20 83       	st	Z, r18
    1b82:	8c 93       	st	X, r24
    1b84:	26 81       	ldd	r18, Z+6	; 0x06
    1b86:	37 81       	ldd	r19, Z+7	; 0x07
    1b88:	2f 5f       	subi	r18, 0xFF	; 255
    1b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8c:	37 83       	std	Z+7, r19	; 0x07
    1b8e:	26 83       	std	Z+6, r18	; 0x06
    1b90:	14 c0       	rjmp	.+40     	; 0x1bba <fputc+0x6e>
    1b92:	8b 01       	movw	r16, r22
    1b94:	ec 01       	movw	r28, r24
    1b96:	fb 01       	movw	r30, r22
    1b98:	00 84       	ldd	r0, Z+8	; 0x08
    1b9a:	f1 85       	ldd	r31, Z+9	; 0x09
    1b9c:	e0 2d       	mov	r30, r0
    1b9e:	09 95       	icall
    1ba0:	89 2b       	or	r24, r25
    1ba2:	e1 f6       	brne	.-72     	; 0x1b5c <fputc+0x10>
    1ba4:	d8 01       	movw	r26, r16
    1ba6:	16 96       	adiw	r26, 0x06	; 6
    1ba8:	8d 91       	ld	r24, X+
    1baa:	9c 91       	ld	r25, X
    1bac:	17 97       	sbiw	r26, 0x07	; 7
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	17 96       	adiw	r26, 0x07	; 7
    1bb2:	9c 93       	st	X, r25
    1bb4:	8e 93       	st	-X, r24
    1bb6:	16 97       	sbiw	r26, 0x06	; 6
    1bb8:	ce 01       	movw	r24, r28
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	08 95       	ret

00001bc4 <__ultoa_invert>:
    1bc4:	fa 01       	movw	r30, r20
    1bc6:	aa 27       	eor	r26, r26
    1bc8:	28 30       	cpi	r18, 0x08	; 8
    1bca:	51 f1       	breq	.+84     	; 0x1c20 <__ultoa_invert+0x5c>
    1bcc:	20 31       	cpi	r18, 0x10	; 16
    1bce:	81 f1       	breq	.+96     	; 0x1c30 <__ultoa_invert+0x6c>
    1bd0:	e8 94       	clt
    1bd2:	6f 93       	push	r22
    1bd4:	6e 7f       	andi	r22, 0xFE	; 254
    1bd6:	6e 5f       	subi	r22, 0xFE	; 254
    1bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bda:	8f 4f       	sbci	r24, 0xFF	; 255
    1bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bde:	af 4f       	sbci	r26, 0xFF	; 255
    1be0:	b1 e0       	ldi	r27, 0x01	; 1
    1be2:	3e d0       	rcall	.+124    	; 0x1c60 <__ultoa_invert+0x9c>
    1be4:	b4 e0       	ldi	r27, 0x04	; 4
    1be6:	3c d0       	rcall	.+120    	; 0x1c60 <__ultoa_invert+0x9c>
    1be8:	67 0f       	add	r22, r23
    1bea:	78 1f       	adc	r23, r24
    1bec:	89 1f       	adc	r24, r25
    1bee:	9a 1f       	adc	r25, r26
    1bf0:	a1 1d       	adc	r26, r1
    1bf2:	68 0f       	add	r22, r24
    1bf4:	79 1f       	adc	r23, r25
    1bf6:	8a 1f       	adc	r24, r26
    1bf8:	91 1d       	adc	r25, r1
    1bfa:	a1 1d       	adc	r26, r1
    1bfc:	6a 0f       	add	r22, r26
    1bfe:	71 1d       	adc	r23, r1
    1c00:	81 1d       	adc	r24, r1
    1c02:	91 1d       	adc	r25, r1
    1c04:	a1 1d       	adc	r26, r1
    1c06:	20 d0       	rcall	.+64     	; 0x1c48 <__ultoa_invert+0x84>
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <__ultoa_invert+0x48>
    1c0a:	68 94       	set
    1c0c:	3f 91       	pop	r19
    1c0e:	2a e0       	ldi	r18, 0x0A	; 10
    1c10:	26 9f       	mul	r18, r22
    1c12:	11 24       	eor	r1, r1
    1c14:	30 19       	sub	r19, r0
    1c16:	30 5d       	subi	r19, 0xD0	; 208
    1c18:	31 93       	st	Z+, r19
    1c1a:	de f6       	brtc	.-74     	; 0x1bd2 <__ultoa_invert+0xe>
    1c1c:	cf 01       	movw	r24, r30
    1c1e:	08 95       	ret
    1c20:	46 2f       	mov	r20, r22
    1c22:	47 70       	andi	r20, 0x07	; 7
    1c24:	40 5d       	subi	r20, 0xD0	; 208
    1c26:	41 93       	st	Z+, r20
    1c28:	b3 e0       	ldi	r27, 0x03	; 3
    1c2a:	0f d0       	rcall	.+30     	; 0x1c4a <__ultoa_invert+0x86>
    1c2c:	c9 f7       	brne	.-14     	; 0x1c20 <__ultoa_invert+0x5c>
    1c2e:	f6 cf       	rjmp	.-20     	; 0x1c1c <__ultoa_invert+0x58>
    1c30:	46 2f       	mov	r20, r22
    1c32:	4f 70       	andi	r20, 0x0F	; 15
    1c34:	40 5d       	subi	r20, 0xD0	; 208
    1c36:	4a 33       	cpi	r20, 0x3A	; 58
    1c38:	18 f0       	brcs	.+6      	; 0x1c40 <__ultoa_invert+0x7c>
    1c3a:	49 5d       	subi	r20, 0xD9	; 217
    1c3c:	31 fd       	sbrc	r19, 1
    1c3e:	40 52       	subi	r20, 0x20	; 32
    1c40:	41 93       	st	Z+, r20
    1c42:	02 d0       	rcall	.+4      	; 0x1c48 <__ultoa_invert+0x84>
    1c44:	a9 f7       	brne	.-22     	; 0x1c30 <__ultoa_invert+0x6c>
    1c46:	ea cf       	rjmp	.-44     	; 0x1c1c <__ultoa_invert+0x58>
    1c48:	b4 e0       	ldi	r27, 0x04	; 4
    1c4a:	a6 95       	lsr	r26
    1c4c:	97 95       	ror	r25
    1c4e:	87 95       	ror	r24
    1c50:	77 95       	ror	r23
    1c52:	67 95       	ror	r22
    1c54:	ba 95       	dec	r27
    1c56:	c9 f7       	brne	.-14     	; 0x1c4a <__ultoa_invert+0x86>
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	61 05       	cpc	r22, r1
    1c5c:	71 05       	cpc	r23, r1
    1c5e:	08 95       	ret
    1c60:	9b 01       	movw	r18, r22
    1c62:	ac 01       	movw	r20, r24
    1c64:	0a 2e       	mov	r0, r26
    1c66:	06 94       	lsr	r0
    1c68:	57 95       	ror	r21
    1c6a:	47 95       	ror	r20
    1c6c:	37 95       	ror	r19
    1c6e:	27 95       	ror	r18
    1c70:	ba 95       	dec	r27
    1c72:	c9 f7       	brne	.-14     	; 0x1c66 <__ultoa_invert+0xa2>
    1c74:	62 0f       	add	r22, r18
    1c76:	73 1f       	adc	r23, r19
    1c78:	84 1f       	adc	r24, r20
    1c7a:	95 1f       	adc	r25, r21
    1c7c:	a0 1d       	adc	r26, r0
    1c7e:	08 95       	ret

00001c80 <__divmodsi4>:
    1c80:	05 2e       	mov	r0, r21
    1c82:	97 fb       	bst	r25, 7
    1c84:	1e f4       	brtc	.+6      	; 0x1c8c <__divmodsi4+0xc>
    1c86:	00 94       	com	r0
    1c88:	0e 94 57 0e 	call	0x1cae	; 0x1cae <__negsi2>
    1c8c:	57 fd       	sbrc	r21, 7
    1c8e:	07 d0       	rcall	.+14     	; 0x1c9e <__divmodsi4_neg2>
    1c90:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__udivmodsi4>
    1c94:	07 fc       	sbrc	r0, 7
    1c96:	03 d0       	rcall	.+6      	; 0x1c9e <__divmodsi4_neg2>
    1c98:	4e f4       	brtc	.+18     	; 0x1cac <__divmodsi4_exit>
    1c9a:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <__negsi2>

00001c9e <__divmodsi4_neg2>:
    1c9e:	50 95       	com	r21
    1ca0:	40 95       	com	r20
    1ca2:	30 95       	com	r19
    1ca4:	21 95       	neg	r18
    1ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca8:	4f 4f       	sbci	r20, 0xFF	; 255
    1caa:	5f 4f       	sbci	r21, 0xFF	; 255

00001cac <__divmodsi4_exit>:
    1cac:	08 95       	ret

00001cae <__negsi2>:
    1cae:	90 95       	com	r25
    1cb0:	80 95       	com	r24
    1cb2:	70 95       	com	r23
    1cb4:	61 95       	neg	r22
    1cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cba:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbc:	08 95       	ret

00001cbe <__muluhisi3>:
    1cbe:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__umulhisi3>
    1cc2:	a5 9f       	mul	r26, r21
    1cc4:	90 0d       	add	r25, r0
    1cc6:	b4 9f       	mul	r27, r20
    1cc8:	90 0d       	add	r25, r0
    1cca:	a4 9f       	mul	r26, r20
    1ccc:	80 0d       	add	r24, r0
    1cce:	91 1d       	adc	r25, r1
    1cd0:	11 24       	eor	r1, r1
    1cd2:	08 95       	ret

00001cd4 <__mulshisi3>:
    1cd4:	b7 ff       	sbrs	r27, 7
    1cd6:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__muluhisi3>

00001cda <__mulohisi3>:
    1cda:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__muluhisi3>
    1cde:	82 1b       	sub	r24, r18
    1ce0:	93 0b       	sbc	r25, r19
    1ce2:	08 95       	ret

00001ce4 <__prologue_saves__>:
    1ce4:	2f 92       	push	r2
    1ce6:	3f 92       	push	r3
    1ce8:	4f 92       	push	r4
    1cea:	5f 92       	push	r5
    1cec:	6f 92       	push	r6
    1cee:	7f 92       	push	r7
    1cf0:	8f 92       	push	r8
    1cf2:	9f 92       	push	r9
    1cf4:	af 92       	push	r10
    1cf6:	bf 92       	push	r11
    1cf8:	cf 92       	push	r12
    1cfa:	df 92       	push	r13
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	ca 1b       	sub	r28, r26
    1d0e:	db 0b       	sbc	r29, r27
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	09 94       	ijmp

00001d1c <__epilogue_restores__>:
    1d1c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d1e:	39 88       	ldd	r3, Y+17	; 0x11
    1d20:	48 88       	ldd	r4, Y+16	; 0x10
    1d22:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d24:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d26:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d28:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d2e:	b9 84       	ldd	r11, Y+9	; 0x09
    1d30:	c8 84       	ldd	r12, Y+8	; 0x08
    1d32:	df 80       	ldd	r13, Y+7	; 0x07
    1d34:	ee 80       	ldd	r14, Y+6	; 0x06
    1d36:	fd 80       	ldd	r15, Y+5	; 0x05
    1d38:	0c 81       	ldd	r16, Y+4	; 0x04
    1d3a:	1b 81       	ldd	r17, Y+3	; 0x03
    1d3c:	aa 81       	ldd	r26, Y+2	; 0x02
    1d3e:	b9 81       	ldd	r27, Y+1	; 0x01
    1d40:	ce 0f       	add	r28, r30
    1d42:	d1 1d       	adc	r29, r1
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	ed 01       	movw	r28, r26
    1d50:	08 95       	ret

00001d52 <__udivmodsi4>:
    1d52:	a1 e2       	ldi	r26, 0x21	; 33
    1d54:	1a 2e       	mov	r1, r26
    1d56:	aa 1b       	sub	r26, r26
    1d58:	bb 1b       	sub	r27, r27
    1d5a:	fd 01       	movw	r30, r26
    1d5c:	0d c0       	rjmp	.+26     	; 0x1d78 <__udivmodsi4_ep>

00001d5e <__udivmodsi4_loop>:
    1d5e:	aa 1f       	adc	r26, r26
    1d60:	bb 1f       	adc	r27, r27
    1d62:	ee 1f       	adc	r30, r30
    1d64:	ff 1f       	adc	r31, r31
    1d66:	a2 17       	cp	r26, r18
    1d68:	b3 07       	cpc	r27, r19
    1d6a:	e4 07       	cpc	r30, r20
    1d6c:	f5 07       	cpc	r31, r21
    1d6e:	20 f0       	brcs	.+8      	; 0x1d78 <__udivmodsi4_ep>
    1d70:	a2 1b       	sub	r26, r18
    1d72:	b3 0b       	sbc	r27, r19
    1d74:	e4 0b       	sbc	r30, r20
    1d76:	f5 0b       	sbc	r31, r21

00001d78 <__udivmodsi4_ep>:
    1d78:	66 1f       	adc	r22, r22
    1d7a:	77 1f       	adc	r23, r23
    1d7c:	88 1f       	adc	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	1a 94       	dec	r1
    1d82:	69 f7       	brne	.-38     	; 0x1d5e <__udivmodsi4_loop>
    1d84:	60 95       	com	r22
    1d86:	70 95       	com	r23
    1d88:	80 95       	com	r24
    1d8a:	90 95       	com	r25
    1d8c:	9b 01       	movw	r18, r22
    1d8e:	ac 01       	movw	r20, r24
    1d90:	bd 01       	movw	r22, r26
    1d92:	cf 01       	movw	r24, r30
    1d94:	08 95       	ret

00001d96 <__umulhisi3>:
    1d96:	a2 9f       	mul	r26, r18
    1d98:	b0 01       	movw	r22, r0
    1d9a:	b3 9f       	mul	r27, r19
    1d9c:	c0 01       	movw	r24, r0
    1d9e:	a3 9f       	mul	r26, r19
    1da0:	70 0d       	add	r23, r0
    1da2:	81 1d       	adc	r24, r1
    1da4:	11 24       	eor	r1, r1
    1da6:	91 1d       	adc	r25, r1
    1da8:	b2 9f       	mul	r27, r18
    1daa:	70 0d       	add	r23, r0
    1dac:	81 1d       	adc	r24, r1
    1dae:	11 24       	eor	r1, r1
    1db0:	91 1d       	adc	r25, r1
    1db2:	08 95       	ret

00001db4 <_exit>:
    1db4:	f8 94       	cli

00001db6 <__stop_program>:
    1db6:	ff cf       	rjmp	.-2      	; 0x1db6 <__stop_program>
