
FinalProj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000628  000006bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000628  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  00800116  00800116  000006d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a0  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d28  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000920  00000000  00000000  00002bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  0000350c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066b  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ca  00000000  00000000  00003deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000046b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_1>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_19>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 e2       	ldi	r30, 0x28	; 40
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 31       	cpi	r26, 0x16	; 22
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e1       	ldi	r26, 0x16	; 22
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a3 3b       	cpi	r26, 0xB3	; 179
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  ea:	0c 94 12 03 	jmp	0x624	; 0x624 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <SPI_LEDtransmit>:
#include "apa_strip.h"
#include <string.h>		 //#include <stdlib.h>

// Transmits 8 bits or 2 bytes on SPI0 using SPDR0 Register
void SPI_LEDtransmit(uint8_t digital_data) {
	SPDR0 = digital_data;			// Send Data
  f2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR0 & (1<<SPIF)));	// Wait for transmission complete
  f4:	0d b4       	in	r0, 0x2d	; 45
  f6:	07 fe       	sbrs	r0, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <SPI_LEDtransmit+0x2>
}
  fa:	08 95       	ret

000000fc <strip_init>:

// Initializes the LEDSTRIP Object
void strip_init(strip* LEDSTRIP, int length) {
	for (int i = 0; i < length; i++) {
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	0e c0       	rjmp	.+28     	; 0x11e <strip_init+0x22>
		LEDSTRIP->Brightness[i] = 0;
 102:	fc 01       	movw	r30, r24
 104:	e2 0f       	add	r30, r18
 106:	f3 1f       	adc	r31, r19
 108:	10 82       	st	Z, r1
		LEDSTRIP->R[i]			= 0;
 10a:	14 ae       	std	Z+60, r1	; 0x3c
		LEDSTRIP->G[i]			= 0;
 10c:	df 01       	movw	r26, r30
 10e:	a8 58       	subi	r26, 0x88	; 136
 110:	bf 4f       	sbci	r27, 0xFF	; 255
 112:	1c 92       	st	X, r1
		LEDSTRIP->B[i]			= 0;
 114:	ec 54       	subi	r30, 0x4C	; 76
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	10 82       	st	Z, r1
	while(!(SPSR0 & (1<<SPIF)));	// Wait for transmission complete
}

// Initializes the LEDSTRIP Object
void strip_init(strip* LEDSTRIP, int length) {
	for (int i = 0; i < length; i++) {
 11a:	2f 5f       	subi	r18, 0xFF	; 255
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
 11e:	26 17       	cp	r18, r22
 120:	37 07       	cpc	r19, r23
 122:	7c f3       	brlt	.-34     	; 0x102 <strip_init+0x6>
		LEDSTRIP->Brightness[i] = 0;
		LEDSTRIP->R[i]			= 0;
		LEDSTRIP->G[i]			= 0;
		LEDSTRIP->B[i]			= 0;
	}
}
 124:	08 95       	ret

00000126 <LED_StartSignal>:

// Start Transmission Signal
void LED_StartSignal(void) {
	SPI_LEDtransmit(0);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
	SPI_LEDtransmit(0);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
	SPI_LEDtransmit(0);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
	SPI_LEDtransmit(0);
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
 13e:	08 95       	ret

00000140 <LED_EndSignal>:
}
// End Transmission Signal
void LED_EndSignal(void) {
	SPI_LEDtransmit(0xFF);
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
	SPI_LEDtransmit(0xFF);
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
	SPI_LEDtransmit(0xFF);
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
	SPI_LEDtransmit(0xFF);
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
 158:	08 95       	ret

0000015a <LED_ByteSend>:
}
// Sends 4 bytes of info for one LED
void LED_ByteSend(uint8_t brightness, uint8_t R, uint8_t G, uint8_t B) {
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	c6 2f       	mov	r28, r22
 162:	d4 2f       	mov	r29, r20
 164:	12 2f       	mov	r17, r18
	SPI_LEDtransmit(brightness);	//brightness [111] [11111]Brightness value [10000] = 16/31 Driving Current
 166:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
	SPI_LEDtransmit(B);				//blue [Strip Order is (BGR) not (RGB)]
 16a:	81 2f       	mov	r24, r17
 16c:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
	SPI_LEDtransmit(G);				//green
 170:	8d 2f       	mov	r24, r29
 172:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
	SPI_LEDtransmit(R);				//red	
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 79 00 	call	0xf2	; 0xf2 <SPI_LEDtransmit>
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	08 95       	ret

00000184 <StripCLR>:
// Clears LEDSTRIP
void StripCLR(strip* LEDSTRIP, int length) {
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ec 01       	movw	r28, r24
 18e:	8b 01       	movw	r16, r22
	LED_StartSignal();
 190:	0e 94 93 00 	call	0x126	; 0x126 <LED_StartSignal>
	strip_init(LEDSTRIP, length);
 194:	b8 01       	movw	r22, r16
 196:	ce 01       	movw	r24, r28
 198:	0e 94 7e 00 	call	0xfc	; 0xfc <strip_init>
	for (int i = 0; i < length; i++) {
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	d0 e0       	ldi	r29, 0x00	; 0
 1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <StripCLR+0x2c>
		LED_ByteSend(0xFF,0,0,0);
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_ByteSend>
}
// Clears LEDSTRIP
void StripCLR(strip* LEDSTRIP, int length) {
	LED_StartSignal();
	strip_init(LEDSTRIP, length);
	for (int i = 0; i < length; i++) {
 1ae:	21 96       	adiw	r28, 0x01	; 1
 1b0:	c0 17       	cp	r28, r16
 1b2:	d1 07       	cpc	r29, r17
 1b4:	b4 f3       	brlt	.-20     	; 0x1a2 <StripCLR+0x1e>
		LED_ByteSend(0xFF,0,0,0);
	}
	LED_EndSignal();
 1b6:	0e 94 a0 00 	call	0x140	; 0x140 <LED_EndSignal>
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <SPI_MasterInit>:
	ADCSRA |= (1<<ADSC);
	loop_until_bit_is_clear(ADCSRA, ADSC); // while (!(ADCSRA & (1<<ADSC) == 0));
	Ain = ADC; // Typecast the volatile integer into floating type // data, divide by maximum 10-bit value, and // multiply by 5V for normalization
	Voltage = (float)Ain/1024.00 * 5.00;
	dtostrf(Voltage, 3, 2, VoltageBuffer);
}
 1c4:	8c e2       	ldi	r24, 0x2C	; 44
 1c6:	84 b9       	out	0x04, r24	; 4
 1c8:	83 e5       	ldi	r24, 0x53	; 83
 1ca:	8c bd       	out	0x2c, r24	; 44
 1cc:	08 95       	ret

000001ce <InitADC0>:
 1ce:	87 b1       	in	r24, 0x07	; 7
 1d0:	8e 7f       	andi	r24, 0xFE	; 254
 1d2:	87 b9       	out	0x07, r24	; 7
 1d4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 1d8:	ea e7       	ldi	r30, 0x7A	; 122
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	87 e8       	ldi	r24, 0x87	; 135
 1de:	80 83       	st	Z, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	80 64       	ori	r24, 0x40	; 64
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret

000001e8 <__vector_1>:

ISR(INT0_vect) {		   // interrupt button
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1

}
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <InitINT0>:
void InitINT0(void) {	 // Init the interrupt BTN
	DDRD &= ~(1<<DDRD2); // INT1 is an input
 1fc:	8a b1       	in	r24, 0x0a	; 10
 1fe:	8b 7f       	andi	r24, 0xFB	; 251
 200:	8a b9       	out	0x0a, r24	; 10
	EIMSK |= (1<<INT0);	 // EXT interrupt enable
 202:	8d b3       	in	r24, 0x1d	; 29
 204:	81 60       	ori	r24, 0x01	; 1
 206:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC01); // Rising / Falling Edge
 208:	e9 e6       	ldi	r30, 0x69	; 105
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	80 83       	st	Z, r24
 212:	08 95       	ret

00000214 <main>:
}


int main(void) {
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	c0 5f       	subi	r28, 0xF0	; 240
 21e:	d1 09       	sbc	r29, r1
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
	uart_init(1);
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 90 02 	call	0x520	; 0x520 <uart_init>
    InitADC0();
 230:	0e 94 e7 00 	call	0x1ce	; 0x1ce <InitADC0>
	//InitTimer0();
	InitINT0();
 234:	0e 94 fe 00 	call	0x1fc	; 0x1fc <InitINT0>
	SPI_MasterInit();
 238:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_MasterInit>

	sei();
 23c:	78 94       	sei
	UCSR0B |= (1<<RXCIE0);	//Interrupts INIT
 23e:	e1 ec       	ldi	r30, 0xC1	; 193
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	80 68       	ori	r24, 0x80	; 128
 246:	80 83       	st	Z, r24
	
	DDRD  = (1<<PIND7);		// LED to show Power is being Supplied
 248:	80 e8       	ldi	r24, 0x80	; 128
 24a:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1<<PIND7);
 24c:	8b b9       	out	0x0b, r24	; 11
	
	strip LEDSTRIP;
	strip_init(&LEDSTRIP, NUM_LEDS);
 24e:	6c e3       	ldi	r22, 0x3C	; 60
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	0e 94 7e 00 	call	0xfc	; 0xfc <strip_init>
	StripCLR(&LEDSTRIP, NUM_LEDS);
 25a:	6c e3       	ldi	r22, 0x3C	; 60
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	ce 01       	movw	r24, r28
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	0e 94 c2 00 	call	0x184	; 0x184 <StripCLR>
 266:	ff cf       	rjmp	.-2      	; 0x266 <main+0x52>

00000268 <uart_putchar>:

/*
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int uart_putchar(char c, FILE *stream) {
 268:	cf 93       	push	r28
 26a:	c8 2f       	mov	r28, r24

  if (c == '\a')
 26c:	87 30       	cpi	r24, 0x07	; 7
 26e:	69 f4       	brne	.+26     	; 0x28a <uart_putchar+0x22>
    {
      fputs("*ring*\n", stderr);
 270:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <__iob+0x4>
 274:	30 91 b2 01 	lds	r19, 0x01B2	; 0x8001b2 <__iob+0x5>
 278:	47 e0       	ldi	r20, 0x07	; 7
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	8e e0       	ldi	r24, 0x0E	; 14
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 a7 02 	call	0x54e	; 0x54e <fwrite>
      return 0;
 288:	2a c0       	rjmp	.+84     	; 0x2de <uart_putchar+0x76>
    }

  if (c == '\n')
 28a:	8a 30       	cpi	r24, 0x0A	; 10
 28c:	19 f4       	brne	.+6      	; 0x294 <uart_putchar+0x2c>
    uart_putchar('\r', stream);
 28e:	8d e0       	ldi	r24, 0x0D	; 13
 290:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
	if (use_tx_interrupts) {
 294:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <use_tx_interrupts>
 298:	88 23       	and	r24, r24
 29a:	d9 f0       	breq	.+54     	; 0x2d2 <uart_putchar+0x6a>
		t_buffer[t_put_index] = c;					// put character in buffer
 29c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <t_put_index>
 2a0:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <t_put_index+0x1>
 2a4:	fc 01       	movw	r30, r24
 2a6:	e3 59       	subi	r30, 0x93	; 147
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	c0 83       	st	Z, r28
		t_put_index = (t_put_index + 1) % BUF_SIZE;	// increment ring buffer index
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	8f 73       	andi	r24, 0x3F	; 63
 2b0:	90 78       	andi	r25, 0x80	; 128
 2b2:	99 23       	and	r25, r25
 2b4:	24 f4       	brge	.+8      	; 0x2be <uart_putchar+0x56>
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	80 6c       	ori	r24, 0xC0	; 192
 2ba:	9f 6f       	ori	r25, 0xFF	; 255
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <t_put_index+0x1>
 2c2:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <t_put_index>
		UCSR0B |= _BV(UDRE0);							// enable interrupt
 2c6:	e1 ec       	ldi	r30, 0xC1	; 193
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	80 62       	ori	r24, 0x20	; 32
 2ce:	80 83       	st	Z, r24
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <uart_putchar+0x76>
	} else {
		loop_until_bit_is_set(UCSR0A, UDRE0);
 2d2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2d6:	85 ff       	sbrs	r24, 5
 2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <uart_putchar+0x6a>
		UDR0 = c;
 2da:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}

  return 0;
}
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <uart_getchar>:
 * parity recognition is supported by hardware).
 *
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int uart_getchar(FILE *stream) {
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
 2f2:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <rxp.1837>
 2f6:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <rxp.1837+0x1>
 2fa:	23 2b       	or	r18, r19
 2fc:	09 f0       	breq	.+2      	; 0x300 <uart_getchar+0x1a>
 2fe:	a3 c0       	rjmp	.+326    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 300:	8c 01       	movw	r16, r24
 302:	c6 e1       	ldi	r28, 0x16	; 22
 304:	d1 e0       	ldi	r29, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
 306:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 30a:	99 23       	and	r25, r25
 30c:	e4 f7       	brge	.-8      	; 0x306 <uart_getchar+0x20>
	if (UCSR0A & _BV(FE0))
 30e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 312:	84 fd       	sbrc	r24, 4
 314:	ab c0       	rjmp	.+342    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
 316:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 31a:	83 fd       	sbrc	r24, 3
 31c:	aa c0       	rjmp	.+340    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
	  return _FDEV_ERR;
	c = UDR0;
 31e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
 322:	8d 30       	cpi	r24, 0x0D	; 13
 324:	09 f4       	brne	.+2      	; 0x328 <uart_getchar+0x42>
	  c = '\n';
 326:	8a e0       	ldi	r24, 0x0A	; 10
	if (c == '\n')
 328:	8a 30       	cpi	r24, 0x0A	; 10
 32a:	59 f4       	brne	.+22     	; 0x342 <uart_getchar+0x5c>
	  {
	    *cp = c;
 32c:	88 83       	st	Y, r24
	    uart_putchar(c, stream);
 32e:	b8 01       	movw	r22, r16
 330:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
	    rxp = b;
 334:	86 e1       	ldi	r24, 0x16	; 22
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <rxp.1837+0x1>
 33c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rxp.1837>
	    break;
 340:	82 c0       	rjmp	.+260    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	  }
	else if (c == '\t')
 342:	89 30       	cpi	r24, 0x09	; 9
 344:	09 f4       	brne	.+2      	; 0x348 <uart_getchar+0x62>
	  c = ' ';
 346:	80 e2       	ldi	r24, 0x20	; 32

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 348:	90 ee       	ldi	r25, 0xE0	; 224
 34a:	98 0f       	add	r25, r24
 34c:	9f 35       	cpi	r25, 0x5F	; 95
 34e:	10 f0       	brcs	.+4      	; 0x354 <uart_getchar+0x6e>
 350:	80 3a       	cpi	r24, 0xA0	; 160
 352:	98 f0       	brcs	.+38     	; 0x37a <uart_getchar+0x94>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	c5 36       	cpi	r28, 0x65	; 101
 358:	d9 07       	cpc	r29, r25
 35a:	29 f4       	brne	.+10     	; 0x366 <uart_getchar+0x80>
	      uart_putchar('\a', stream);
 35c:	b8 01       	movw	r22, r16
 35e:	87 e0       	ldi	r24, 0x07	; 7
 360:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
 364:	d0 cf       	rjmp	.-96     	; 0x306 <uart_getchar+0x20>
	    else
	      {
		*cp++ = c;
 366:	7e 01       	movw	r14, r28
 368:	ef ef       	ldi	r30, 0xFF	; 255
 36a:	ee 1a       	sub	r14, r30
 36c:	fe 0a       	sbc	r15, r30
 36e:	88 83       	st	Y, r24
		uart_putchar(c, stream);
 370:	b8 01       	movw	r22, r16
 372:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
	      uart_putchar('\a', stream);
	    else
	      {
		*cp++ = c;
 376:	e7 01       	movw	r28, r14
		uart_putchar(c, stream);
	      }
	    continue;
 378:	c6 cf       	rjmp	.-116    	; 0x306 <uart_getchar+0x20>
	  }

	switch (c)
 37a:	82 31       	cpi	r24, 0x12	; 18
 37c:	19 f1       	breq	.+70     	; 0x3c4 <uart_getchar+0xde>
 37e:	30 f4       	brcc	.+12     	; 0x38c <uart_getchar+0xa6>
 380:	83 30       	cpi	r24, 0x03	; 3
 382:	09 f4       	brne	.+2      	; 0x386 <uart_getchar+0xa0>
 384:	79 c0       	rjmp	.+242    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 386:	88 30       	cpi	r24, 0x08	; 8
 388:	49 f0       	breq	.+18     	; 0x39c <uart_getchar+0xb6>
 38a:	bd cf       	rjmp	.-134    	; 0x306 <uart_getchar+0x20>
 38c:	87 31       	cpi	r24, 0x17	; 23
 38e:	09 f4       	brne	.+2      	; 0x392 <uart_getchar+0xac>
 390:	4e c0       	rjmp	.+156    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 392:	8f 37       	cpi	r24, 0x7F	; 127
 394:	19 f0       	breq	.+6      	; 0x39c <uart_getchar+0xb6>
 396:	85 31       	cpi	r24, 0x15	; 21
 398:	b9 f1       	breq	.+110    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 39a:	b5 cf       	rjmp	.-150    	; 0x306 <uart_getchar+0x20>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	c6 31       	cpi	r28, 0x16	; 22
 3a0:	df 07       	cpc	r29, r31
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <uart_getchar+0xc0>
 3a4:	08 f4       	brcc	.+2      	; 0x3a8 <uart_getchar+0xc2>
 3a6:	af cf       	rjmp	.-162    	; 0x306 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
 3a8:	b8 01       	movw	r22, r16
 3aa:	88 e0       	ldi	r24, 0x08	; 8
 3ac:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
		uart_putchar(' ', stream);
 3b0:	b8 01       	movw	r22, r16
 3b2:	80 e2       	ldi	r24, 0x20	; 32
 3b4:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
		uart_putchar('\b', stream);
 3b8:	b8 01       	movw	r22, r16
 3ba:	88 e0       	ldi	r24, 0x08	; 8
 3bc:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
		cp--;
 3c0:	21 97       	sbiw	r28, 0x01	; 1
 3c2:	a1 cf       	rjmp	.-190    	; 0x306 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
 3c4:	b8 01       	movw	r22, r16
 3c6:	8d e0       	ldi	r24, 0x0D	; 13
 3c8:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
	    for (cp2 = b; cp2 < cp; cp2++)
 3cc:	0f 2e       	mov	r0, r31
 3ce:	f6 e1       	ldi	r31, 0x16	; 22
 3d0:	ef 2e       	mov	r14, r31
 3d2:	f1 e0       	ldi	r31, 0x01	; 1
 3d4:	ff 2e       	mov	r15, r31
 3d6:	f0 2d       	mov	r31, r0
 3d8:	06 c0       	rjmp	.+12     	; 0x3e6 <uart_getchar+0x100>
	      uart_putchar(*cp2, stream);
 3da:	b8 01       	movw	r22, r16
 3dc:	f7 01       	movw	r30, r14
 3de:	81 91       	ld	r24, Z+
 3e0:	7f 01       	movw	r14, r30
 3e2:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
 3e6:	ec 16       	cp	r14, r28
 3e8:	fd 06       	cpc	r15, r29
 3ea:	b8 f3       	brcs	.-18     	; 0x3da <uart_getchar+0xf4>
 3ec:	8c cf       	rjmp	.-232    	; 0x306 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
 3ee:	b8 01       	movw	r22, r16
 3f0:	88 e0       	ldi	r24, 0x08	; 8
 3f2:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
		uart_putchar(' ', stream);
 3f6:	b8 01       	movw	r22, r16
 3f8:	80 e2       	ldi	r24, 0x20	; 32
 3fa:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
		uart_putchar('\b', stream);
 3fe:	b8 01       	movw	r22, r16
 400:	88 e0       	ldi	r24, 0x08	; 8
 402:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
		cp--;
 406:	21 97       	sbiw	r28, 0x01	; 1
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
 408:	f1 e0       	ldi	r31, 0x01	; 1
 40a:	c6 31       	cpi	r28, 0x16	; 22
 40c:	df 07       	cpc	r29, r31
 40e:	09 f0       	breq	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	70 f7       	brcc	.-36     	; 0x3ee <uart_getchar+0x108>
 412:	79 cf       	rjmp	.-270    	; 0x306 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
 414:	b8 01       	movw	r22, r16
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
		uart_putchar(' ', stream);
 41c:	b8 01       	movw	r22, r16
 41e:	80 e2       	ldi	r24, 0x20	; 32
 420:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
		uart_putchar('\b', stream);
 424:	b8 01       	movw	r22, r16
 426:	88 e0       	ldi	r24, 0x08	; 8
 428:	0e 94 34 01 	call	0x268	; 0x268 <uart_putchar>
		cp--;
 42c:	21 97       	sbiw	r28, 0x01	; 1
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	c6 31       	cpi	r28, 0x16	; 22
 432:	d8 07       	cpc	r29, r24
 434:	09 f0       	breq	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 436:	08 f4       	brcc	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 438:	66 cf       	rjmp	.-308    	; 0x306 <uart_getchar+0x20>
 43a:	fe 01       	movw	r30, r28
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	80 81       	ld	r24, Z
 440:	80 32       	cpi	r24, 0x20	; 32
 442:	41 f7       	brne	.-48     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 444:	60 cf       	rjmp	.-320    	; 0x306 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
 446:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <rxp.1837>
 44a:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <rxp.1837+0x1>
 44e:	cf 01       	movw	r24, r30
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <rxp.1837+0x1>
 456:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rxp.1837>
 45a:	80 81       	ld	r24, Z
  if (c == '\n')
 45c:	8a 30       	cpi	r24, 0x0A	; 10
 45e:	21 f4       	brne	.+8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
    rxp = 0;
 460:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <rxp.1837+0x1>
 464:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <rxp.1837>

  return c;
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	08 c0       	rjmp	.+16     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
  if (rxp == 0)
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
	if (UCSR0A & _BV(FE0))
	  return _FDEV_EOF;
 46c:	8e ef       	ldi	r24, 0xFE	; 254
 46e:	9f ef       	ldi	r25, 0xFF	; 255
 470:	05 c0       	rjmp	.+10     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	if (UCSR0A & _BV(DOR0))
	  return _FDEV_ERR;
 472:	8f ef       	ldi	r24, 0xFF	; 255
 474:	9f ef       	ldi	r25, 0xFF	; 255
 476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
	  }

	switch (c)
	  {
	  case 'c' & 0x1f:
	    return -1;
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	9f ef       	ldi	r25, 0xFF	; 255
  c = *rxp++;
  if (c == '\n')
    rxp = 0;

  return c;
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	ff 90       	pop	r15
 486:	ef 90       	pop	r14
 488:	08 95       	ret

0000048a <__vector_19>:
static char t_buffer[BUF_SIZE];
static int t_put_index = 0;
volatile static int t_get_index = 0;

ISR(USART0_UDRE_vect)
{
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	2f 93       	push	r18
 496:	3f 93       	push	r19
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	ef 93       	push	r30
 49e:	ff 93       	push	r31
	if (t_get_index != t_put_index) {
 4a0:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <t_get_index>
 4a4:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <t_get_index+0x1>
 4a8:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <t_put_index>
 4ac:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <t_put_index+0x1>
 4b0:	28 17       	cp	r18, r24
 4b2:	39 07       	cpc	r19, r25
 4b4:	51 f1       	breq	.+84     	; 0x50a <__vector_19+0x80>
		UDR0 = t_buffer[t_get_index];
 4b6:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <t_get_index>
 4ba:	f0 91 6a 01 	lds	r31, 0x016A	; 0x80016a <t_get_index+0x1>
 4be:	e3 59       	subi	r30, 0x93	; 147
 4c0:	fe 4f       	sbci	r31, 0xFE	; 254
 4c2:	80 81       	ld	r24, Z
 4c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		t_get_index = (t_get_index + 1) % BUF_SIZE;
 4c8:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <t_get_index>
 4cc:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <t_get_index+0x1>
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	8f 73       	andi	r24, 0x3F	; 63
 4d4:	90 78       	andi	r25, 0x80	; 128
 4d6:	99 23       	and	r25, r25
 4d8:	24 f4       	brge	.+8      	; 0x4e2 <__vector_19+0x58>
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	80 6c       	ori	r24, 0xC0	; 192
 4de:	9f 6f       	ori	r25, 0xFF	; 255
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <t_get_index+0x1>
 4e6:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <t_get_index>
		if (t_get_index == t_put_index) {
 4ea:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <t_get_index>
 4ee:	30 91 6a 01 	lds	r19, 0x016A	; 0x80016a <t_get_index+0x1>
 4f2:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <t_put_index>
 4f6:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <t_put_index+0x1>
 4fa:	28 17       	cp	r18, r24
 4fc:	39 07       	cpc	r19, r25
 4fe:	29 f4       	brne	.+10     	; 0x50a <__vector_19+0x80>
			UCSR0B &= ~(_BV(UDRE0));
 500:	e1 ec       	ldi	r30, 0xC1	; 193
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	8f 7d       	andi	r24, 0xDF	; 223
 508:	80 83       	st	Z, r24
		}
	}
	
}
 50a:	ff 91       	pop	r31
 50c:	ef 91       	pop	r30
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <uart_init>:
void uart_init(bool use_tx_intr) {
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD)) - 1;
 520:	97 e6       	ldi	r25, 0x67	; 103
 522:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
 526:	98 e1       	ldi	r25, 0x18	; 24
 528:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  
  stdout = &uartFile;
 52c:	ed ea       	ldi	r30, 0xAD	; 173
 52e:	f1 e0       	ldi	r31, 0x01	; 1
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	31 e0       	ldi	r19, 0x01	; 1
 534:	33 83       	std	Z+3, r19	; 0x03
 536:	22 83       	std	Z+2, r18	; 0x02
  stdin = &uartFile;
 538:	31 83       	std	Z+1, r19	; 0x01
 53a:	20 83       	st	Z, r18
  stderr = &uartFile;
 53c:	35 83       	std	Z+5, r19	; 0x05
 53e:	24 83       	std	Z+4, r18	; 0x04
  if (use_tx_intr) {
 540:	88 23       	and	r24, r24
 542:	21 f0       	breq	.+8      	; 0x54c <uart_init+0x2c>
	  use_tx_interrupts = true;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <use_tx_interrupts>
	  sei();
 54a:	78 94       	sei
 54c:	08 95       	ret

0000054e <fwrite>:
 54e:	a0 e0       	ldi	r26, 0x00	; 0
 550:	b0 e0       	ldi	r27, 0x00	; 0
 552:	ed ea       	ldi	r30, 0xAD	; 173
 554:	f2 e0       	ldi	r31, 0x02	; 2
 556:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__prologue_saves__+0xc>
 55a:	5b 01       	movw	r10, r22
 55c:	4a 01       	movw	r8, r20
 55e:	79 01       	movw	r14, r18
 560:	d9 01       	movw	r26, r18
 562:	13 96       	adiw	r26, 0x03	; 3
 564:	2c 91       	ld	r18, X
 566:	21 ff       	sbrs	r18, 1
 568:	1d c0       	rjmp	.+58     	; 0x5a4 <fwrite+0x56>
 56a:	c0 e0       	ldi	r28, 0x00	; 0
 56c:	d0 e0       	ldi	r29, 0x00	; 0
 56e:	c8 15       	cp	r28, r8
 570:	d9 05       	cpc	r29, r9
 572:	d9 f0       	breq	.+54     	; 0x5aa <fwrite+0x5c>
 574:	8c 01       	movw	r16, r24
 576:	6c 01       	movw	r12, r24
 578:	ca 0c       	add	r12, r10
 57a:	db 1c       	adc	r13, r11
 57c:	c8 01       	movw	r24, r16
 57e:	0c 15       	cp	r16, r12
 580:	1d 05       	cpc	r17, r13
 582:	71 f0       	breq	.+28     	; 0x5a0 <fwrite+0x52>
 584:	0f 5f       	subi	r16, 0xFF	; 255
 586:	1f 4f       	sbci	r17, 0xFF	; 255
 588:	d7 01       	movw	r26, r14
 58a:	18 96       	adiw	r26, 0x08	; 8
 58c:	ed 91       	ld	r30, X+
 58e:	fc 91       	ld	r31, X
 590:	19 97       	sbiw	r26, 0x09	; 9
 592:	b7 01       	movw	r22, r14
 594:	dc 01       	movw	r26, r24
 596:	8c 91       	ld	r24, X
 598:	09 95       	icall
 59a:	89 2b       	or	r24, r25
 59c:	79 f3       	breq	.-34     	; 0x57c <fwrite+0x2e>
 59e:	05 c0       	rjmp	.+10     	; 0x5aa <fwrite+0x5c>
 5a0:	21 96       	adiw	r28, 0x01	; 1
 5a2:	e5 cf       	rjmp	.-54     	; 0x56e <fwrite+0x20>
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	01 c0       	rjmp	.+2      	; 0x5ac <fwrite+0x5e>
 5aa:	ce 01       	movw	r24, r28
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
 5b0:	ec e0       	ldi	r30, 0x0C	; 12
 5b2:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__epilogue_restores__+0xc>

000005b6 <__prologue_saves__>:
 5b6:	2f 92       	push	r2
 5b8:	3f 92       	push	r3
 5ba:	4f 92       	push	r4
 5bc:	5f 92       	push	r5
 5be:	6f 92       	push	r6
 5c0:	7f 92       	push	r7
 5c2:	8f 92       	push	r8
 5c4:	9f 92       	push	r9
 5c6:	af 92       	push	r10
 5c8:	bf 92       	push	r11
 5ca:	cf 92       	push	r12
 5cc:	df 92       	push	r13
 5ce:	ef 92       	push	r14
 5d0:	ff 92       	push	r15
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	ca 1b       	sub	r28, r26
 5e0:	db 0b       	sbc	r29, r27
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	f8 94       	cli
 5e6:	de bf       	out	0x3e, r29	; 62
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	cd bf       	out	0x3d, r28	; 61
 5ec:	09 94       	ijmp

000005ee <__epilogue_restores__>:
 5ee:	2a 88       	ldd	r2, Y+18	; 0x12
 5f0:	39 88       	ldd	r3, Y+17	; 0x11
 5f2:	48 88       	ldd	r4, Y+16	; 0x10
 5f4:	5f 84       	ldd	r5, Y+15	; 0x0f
 5f6:	6e 84       	ldd	r6, Y+14	; 0x0e
 5f8:	7d 84       	ldd	r7, Y+13	; 0x0d
 5fa:	8c 84       	ldd	r8, Y+12	; 0x0c
 5fc:	9b 84       	ldd	r9, Y+11	; 0x0b
 5fe:	aa 84       	ldd	r10, Y+10	; 0x0a
 600:	b9 84       	ldd	r11, Y+9	; 0x09
 602:	c8 84       	ldd	r12, Y+8	; 0x08
 604:	df 80       	ldd	r13, Y+7	; 0x07
 606:	ee 80       	ldd	r14, Y+6	; 0x06
 608:	fd 80       	ldd	r15, Y+5	; 0x05
 60a:	0c 81       	ldd	r16, Y+4	; 0x04
 60c:	1b 81       	ldd	r17, Y+3	; 0x03
 60e:	aa 81       	ldd	r26, Y+2	; 0x02
 610:	b9 81       	ldd	r27, Y+1	; 0x01
 612:	ce 0f       	add	r28, r30
 614:	d1 1d       	adc	r29, r1
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	f8 94       	cli
 61a:	de bf       	out	0x3e, r29	; 62
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	cd bf       	out	0x3d, r28	; 61
 620:	ed 01       	movw	r28, r26
 622:	08 95       	ret

00000624 <_exit>:
 624:	f8 94       	cli

00000626 <__stop_program>:
 626:	ff cf       	rjmp	.-2      	; 0x626 <__stop_program>
